/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/reactive-form/reactive-form.consts.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/** @type {?} */
export var VALIDATOR_REQUIRED = 'required';
/** @type {?} */
export var VALIDATOR_PATTERN = 'pattern';
/** @type {?} */
export var VALIDATOR_MINLENGTH = 'minlength';
/** @type {?} */
export var VALIDATOR_MAXLENGTH = 'maxlength';
import * as _ from 'lodash';
/** @type {?} */
export var UpdateFormValue = (/**
 * @param {?} inputs
 * @param {?} data
 * @param {?=} options
 * @return {?}
 */
function (inputs, data, options) {
    // tslint:disable-next-line:max-line-length
    /** @type {?} */
    var ableSimpleValue = [
        'textbox',
        'dropdown',
        'radio',
        'checkbox',
        'datetimepicker',
        'uploadfile',
        'phonecode',
        'textarea',
        'textbox-mask',
        'tinymce',
        'single-select2',
        'selection-by-api',
        'switch-input',
        'uploadfilev2',
        'uploadfilev3',
        'type-ahead',
        'type-ahead-without-api',
        'custom_dropdown',
        'ranger-slider',
        'gutenberg',
        'dropzone'
    ];
    _.forEach(data, (/**
     * @param {?} value
     * @param {?} key
     * @return {?}
     */
    function (value, key) {
        inputs = _.map(inputs, (/**
         * @param {?} input
         * @return {?}
         */
        function (input) {
            if (input.key === key) {
                if (_.includes(ableSimpleValue, input.controlType)) {
                    input.value = value;
                    return input;
                }
                switch (input.controlType) {
                    case 'list-checkbox':
                        input.options = input.options.map((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            var e_1, _a;
                            try {
                                for (var value_1 = tslib_1.__values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                                    var i = value_1_1.value;
                                    if (item.value === i) {
                                        item.checked = true;
                                    }
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                            return item;
                        }));
                        return input;
                        break;
                    case 'select2':
                        input.options = input.options.map((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            var e_2, _a;
                            try {
                                for (var value_2 = tslib_1.__values(value), value_2_1 = value_2.next(); !value_2_1.done; value_2_1 = value_2.next()) {
                                    var i = value_2_1.value;
                                    if (item.value === i) {
                                        item.selected = true;
                                    }
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (value_2_1 && !value_2_1.done && (_a = value_2.return)) _a.call(value_2);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                            return item;
                        }));
                        return input;
                        break;
                }
            }
            return input;
        }));
    }));
    return inputs;
});
/** @type {?} */
export var UpdateInputsValue = (/**
 * @param {?} inputs
 * @param {?} data
 * @return {?}
 */
function (inputs, data) {
    /** @type {?} */
    var ableType = ['dropdown', 'radio', 'list-checkbox', 'select2', 'single-select2', 'type-ahead-without-api', 'custom_dropdown'];
    _.forEach(data, (/**
     * @param {?} value
     * @param {?} key
     * @return {?}
     */
    function (value, key) {
        _.forEach(inputs, (/**
         * @param {?} input
         * @return {?}
         */
        function (input) {
            if (input.key === key) {
                if (_.includes(ableType, input.controlType)) {
                    input.options = value;
                }
                if (input.controlType === 'dropdown') {
                    input.value = _.head(value);
                }
                if (input.controlType === 'radio') {
                    input.value = ((/** @type {?} */ (_.head(value)))).value;
                }
            }
        }));
    }));
    return inputs;
});
var Support = /** @class */ (function () {
    function Support() {
        this.UpdateInputsValue = (/**
         * @param {?} inputs
         * @param {?} data
         * @return {?}
         */
        function (inputs, data) {
            /** @type {?} */
            var ableType = ['dropdown', 'radio', 'list-checkbox', 'select2', 'single-select2', 'type-ahead-without-api', 'custom_dropdown'];
            _.forEach(data, (/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            function (value, key) {
                _.forEach(inputs, (/**
                 * @param {?} input
                 * @return {?}
                 */
                function (input) {
                    if (input.key === key) {
                        if (_.includes(ableType, input.controlType)) {
                            input.options = value;
                        }
                        if (input.controlType === 'dropdown') {
                            input.value = _.head(value);
                        }
                        if (input.controlType === 'radio') {
                            input.value = ((/** @type {?} */ (_.head(value)))).value;
                        }
                    }
                }));
            }));
            return inputs;
            // tslint:disable-next-line:semicolon
        });
        this.UpdateFormValue = (/**
         * @param {?} inputs
         * @param {?} data
         * @param {?=} options
         * @return {?}
         */
        function (inputs, data, options) {
            // tslint:disable-next-line:max-line-length
            /** @type {?} */
            var ableSimpleValue = [
                'textbox',
                'dropdown',
                'radio',
                'checkbox',
                'datetimepicker',
                'uploadfile',
                'phonecode',
                'textarea',
                'textbox-mask',
                'tinymce',
                'single-select2',
                'selection-by-api',
                'switch-input',
                'uploadfilev2',
                'uploadfilev3',
                'type-ahead',
                'type-ahead-without-api',
                'custom_dropdown',
                'ranger-slider',
                'gutenberg',
                'dropzone'
            ];
            _.forEach(data, (/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            function (value, key) {
                inputs = _.map(inputs, (/**
                 * @param {?} input
                 * @return {?}
                 */
                function (input) {
                    if (input.key === key) {
                        if (_.includes(ableSimpleValue, input.controlType)) {
                            input.value = value;
                        }
                        switch (input.controlType) {
                            case 'list-checkbox':
                                input.options = input.options.map((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                function (item) {
                                    var e_3, _a;
                                    try {
                                        for (var value_3 = tslib_1.__values(value), value_3_1 = value_3.next(); !value_3_1.done; value_3_1 = value_3.next()) {
                                            var i = value_3_1.value;
                                            if (item.value === i) {
                                                item.checked = true;
                                            }
                                        }
                                    }
                                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                    finally {
                                        try {
                                            if (value_3_1 && !value_3_1.done && (_a = value_3.return)) _a.call(value_3);
                                        }
                                        finally { if (e_3) throw e_3.error; }
                                    }
                                    return item;
                                }));
                                break;
                            case 'select2':
                                input.options = input.options.map((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                function (item) {
                                    var e_4, _a;
                                    try {
                                        for (var value_4 = tslib_1.__values(value), value_4_1 = value_4.next(); !value_4_1.done; value_4_1 = value_4.next()) {
                                            var i = value_4_1.value;
                                            if (item.value === i) {
                                                item.selected = true;
                                            }
                                        }
                                    }
                                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                                    finally {
                                        try {
                                            if (value_4_1 && !value_4_1.done && (_a = value_4.return)) _a.call(value_4);
                                        }
                                        finally { if (e_4) throw e_4.error; }
                                    }
                                    return item;
                                }));
                                break;
                        }
                    }
                    else {
                        input.value = input.value;
                    }
                    return input;
                }));
            }));
            return inputs;
            // tslint:disable-next-line:semicolon
        });
    }
    return Support;
}());
if (false) {
    /** @type {?} */
    Support.prototype.UpdateInputsValue;
    /** @type {?} */
    Support.prototype.UpdateFormValue;
}
/** @type {?} */
export var support = new Support();
//# sourceMappingURL=data:application/json;base64,