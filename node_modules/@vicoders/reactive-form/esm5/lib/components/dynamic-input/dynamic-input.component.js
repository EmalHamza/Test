/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/dynamic-input/dynamic-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Injector } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { InputBase } from '../../models/InputBase';
import * as _ from 'lodash';
import { FileService } from '../../directives/upload-images/test';
var DynamicInputComponent = /** @class */ (function () {
    function DynamicInputComponent(api, injector) {
        this.api = api;
        this.injector = injector;
    }
    /**
     * @param {?} test
     * @return {?}
     */
    DynamicInputComponent.prototype.initTinyMce = /**
     * @param {?} test
     * @return {?}
     */
    function (test) {
        /** @type {?} */
        var $this = this;
        /** @type {?} */
        var UPLOAD_DIRECTIVE_HEADERS = this.injector.get('UPLOAD_DIRECTIVE_HEADERS');
        /** @type {?} */
        var UPLOAD_DIRECTIVE_API_URL = this.injector.get('UPLOAD_DIRECTIVE_API_URL');
        /** @type {?} */
        var TINYMCE_CONFIG = this.injector.get('TINYMCE_CONFIG');
        return _.assign({}, test, {
            file_picker_callback: (/**
             * @param {?} callback
             * @param {?} value
             * @param {?} meta
             * @return {?}
             */
            function (callback, value, meta) {
                // console.log('lebaotrung');
                // $('#single').modal('show');
                /** @type {?} */
                var input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');
                input.onchange = (/**
                 * @return {?}
                 */
                function () {
                    // const file = (this as any).files[0];
                    // const reader = new FileReader();
                    // reader.onload = function(e) {
                    //   callback((e.target as any).result, {
                    //     alt: ''
                    //   });
                    // };
                    // reader.readAsDataURL(file);
                    /** @type {?} */
                    var file = ((/** @type {?} */ (this))).files[0];
                    /** @type {?} */
                    var params = {};
                    params[TINYMCE_CONFIG.paramName] = file;
                    if (TINYMCE_CONFIG.uploadPath) {
                        params['upload_path'] = TINYMCE_CONFIG.uploadPath;
                    }
                    /** @type {?} */
                    var requestHeaders = UPLOAD_DIRECTIVE_HEADERS;
                    /** @type {?} */
                    var requestApiUrl = UPLOAD_DIRECTIVE_API_URL + TINYMCE_CONFIG.apiUpload;
                    $this.api.upload(params, requestApiUrl, requestHeaders).subscribe((/**
                     * @param {?} response
                     * @return {?}
                     */
                    function (response) {
                        callback(TINYMCE_CONFIG.resultTransformer(response));
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        console.log('error', error);
                    }));
                });
                input.click();
            })
        });
    };
    /**
     * @return {?}
     */
    DynamicInputComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () { };
    Object.defineProperty(DynamicInputComponent.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.form.controls[this.input.key].errors) {
                this.validatorForm = this.form.controls[this.input.key].errors;
            }
            return this.submitted && this.form.controls[this.input.key].valid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} validators
     * @return {?}
     */
    DynamicInputComponent.prototype.getError = /**
     * @param {?} validators
     * @return {?}
     */
    function (validators) {
        /** @type {?} */
        var $this = this;
        /** @type {?} */
        var mess = '';
        _.forEach(validators, (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var errorValidator = value.validator($this.form.controls[$this.input.key]);
            if (!_.isUndefined(errorValidator) && !_.isNil(errorValidator)) {
                /** @type {?} */
                var errorKey = Object.keys(errorValidator)[0];
                if ($this.validatorForm.hasOwnProperty(errorKey)) {
                    mess = value.message;
                    return false;
                }
            }
        }));
        return mess;
    };
    /**
     * @param {?} validators
     * @return {?}
     */
    DynamicInputComponent.prototype.getAsyncErrors = /**
     * @param {?} validators
     * @return {?}
     */
    function (validators) {
        /** @type {?} */
        var mess = '';
        if (this.form.controls[this.input.key].errors) {
            /** @type {?} */
            var error = this.form.controls[this.input.key].errors[Object.keys(this.form.controls[this.input.key].errors)[0]];
            mess = error.message;
        }
        return mess;
    };
    /**
     * @param {?} e
     * @param {?} k
     * @return {?}
     */
    DynamicInputComponent.prototype.onKeyup = /**
     * @param {?} e
     * @param {?} k
     * @return {?}
     */
    function (e, k) {
        // console.log(e.target.value);
        // console.log(k);
    };
    DynamicInputComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'dynamic-input',
                    template: "<div [formGroup]=\"form\">\r\n  <div [ngSwitch]=\"input.controlType\">\r\n    <div *ngSwitchCase=\"'block'\">\r\n      <div class=\"form-primary\"><div [innerHtml]=\"input.content\"></div></div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'textbox'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <input\r\n            [attr.disabled]=\"input.disabled\"\r\n            [placeholder]=\"input.placeholder\"\r\n            class=\"form-control\"\r\n            [formControlName]=\"input.key\"\r\n            [type]=\"input.type\"\r\n            [min]=\"input.min\"\r\n            [max]=\"input.max\"\r\n            (keyup)=\"onKeyup($event, input.key)\"\r\n            autocomplete=\"false\"\r\n          />\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'textarea'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <textarea\r\n            [placeholder]=\"input.placeholder\"\r\n            [attr.disabled]=\"input.disabled\"\r\n            [rows]=\"input.rows\"\r\n            id=\"textarea\"\r\n            [formControlName]=\"input.key\"\r\n          ></textarea>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"flex-row\" *ngSwitchCase=\"'dropdown'\">\r\n      <div class=\"reactive-form-group\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <select id=\"dropdown-reactive-form\" [attr.disabled]=\"input.disabled\" [formControlName]=\"input.key\" class=\"form-control\">\r\n            <option *ngFor=\"let opt of input.options\" [attr.disabled]=\"opt.disabled\" [ngValue]=\"opt\">{{ opt.label }}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'radio'\" class=\"radio\">\r\n      <div class=\"input-content\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div class=\"form-primary\">\r\n          <div class=\"form-radio\">\r\n            <div class=\"group-add-on\">\r\n              <div class=\"radio radiofill\" *ngFor=\"let opt of input.options\">\r\n                <label class=\"radio-label\"\r\n                  >{{ opt.label }} <input [attr.disabled]=\"input.disabled\" type=\"radio\" [formControlName]=\"input.key\" [value]=\"opt.value\" />\r\n                  <span class=\"checkmark\"></span>\r\n                </label>\r\n                <div [innerHtml]=\"opt.content\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n        <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n        <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'custom_dropdown'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <custom-selection\r\n            id=\"custom-selection-reactive-form\"\r\n            [oldValue]=\"input.value\"\r\n            [formControlName]=\"input.key\"\r\n            name=\"test-dropdown\"\r\n            [(options)]=\"input.options\"\r\n          ></custom-selection>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n      <!-- <div class=\"form-primary\">\r\n        <label class=\"float-label\">{{ input.label }}</label>\r\n        <custom-selection\r\n          [oldValue]=\"input.value\"\r\n          [formControlName]=\"input.key\"\r\n          name=\"test-dropdown\"\r\n          [(options)]=\"input.options\"\r\n        ></custom-selection>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div> -->\r\n    </div>\r\n    <!-- branding: false,\r\n    height: input.height,\r\n    plugins: input.plugins -->\r\n    <div *ngSwitchCase=\"'tinymce'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <editor\r\n            [formControlName]=\"input.key\"\r\n            [init]=\"\r\n              initTinyMce({\r\n                branding: false,\r\n                height: input.height,\r\n                plugins: input.plugins\r\n              })\r\n            \"\r\n          ></editor>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'checkbox'\" class=\"checkbox\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label checkbox-label\"\r\n            ><span [innerHtml]=\"input.label\"></span>\r\n            <input\r\n              [attr.disabled]=\"input.disabled\"\r\n              [formControlName]=\"input.key\"\r\n              [(ngModel)]=\"input.value\"\r\n              [id]=\"input.key\"\r\n              type=\"checkbox\"\r\n            />\r\n            <span class=\"checkmark\"></span>\r\n          </label>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'list-checkbox'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <mutiple-checkbox\r\n            [isClear]=\"isClear\"\r\n            [isDisabled]=\"input.disabled\"\r\n            [formControlName]=\"input.key\"\r\n            [(options)]=\"input.options\"\r\n          ></mutiple-checkbox>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'textbox-mask'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <mask-input\r\n            [isDisabled]=\"input.disabled\"\r\n            [isClear]=\"isClear\"\r\n            [formControlName]=\"input.key\"\r\n            [placeholder]=\"input.placeholder\"\r\n            [guide]=\"input.guide\"\r\n            [valueWithCharacter]=\"input.valueWithCharacter\"\r\n            [inputMaskText]=\"input.mask\"\r\n          ></mask-input>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'dropzone'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <custom-dropzone\r\n            [headers]=\"input.headers\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [paramName]=\"input.paramName\"\r\n            [url]=\"input.url\"\r\n            [formControlName]=\"input.key\"\r\n            [oldValue]=\"input.value\"\r\n            [showPreview]=\"input.showPreview\"\r\n            [maxFiles]=\"input.maxFiles\"\r\n            [maxFilesize]=\"input.maxFilesize\"\r\n            [acceptedFiles]=\"input.acceptedFiles\"\r\n            [message]=\"input.message\"\r\n            [upload_path]=\"input.upload_path\"\r\n          ></custom-dropzone>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'datetimepicker'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <custom-date-time-picker\r\n              [isClear]=\"isClear\"\r\n              [isDisabled]=\"input.disabled\"\r\n              [dateFormat]=\"input.dateFormat\"\r\n              [timeOnly]=\"input.timeOnly\"\r\n              [showTime]=\"input.showTime\"\r\n              [yearRange]=\"input.yearRange\"\r\n              [yearNavigator]=\"input.yearNavigator\"\r\n              [monthNavigator]=\"input.monthNavigator\"\r\n              [showIcon]=\"input.showIcon\"\r\n              [formControlName]=\"input.key\"\r\n              [minDate]=\"input.minDate\"\r\n              [maxDate]=\"input.maxDate\"\r\n            ></custom-date-time-picker>\r\n          </div>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'phonecode'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <app-phone-input [isDisabled]=\"input.disabled\" [formControlName]=\"input.key\"></app-phone-input>\r\n          </div>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'select2'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <app-custom-select2\r\n              [isDisabled]=\"input.disabled\"\r\n              [isSelectAll]=\"input.isSelectAll\"\r\n              [selectBtnText]=\"input.selectBtnText\"\r\n              [clearBtnText]=\"input.clearBtnText\"\r\n              [isClear]=\"isClear\"\r\n              [id]=\"input.id\"\r\n              [options]=\"input.options\"\r\n              [formControlName]=\"input.key\"\r\n              [placeholder]=\"input.placeholder\"\r\n              [tags]=\"input.tags\"\r\n              [dropdownParent]=\"input.dropdownParent\"\r\n            ></app-custom-select2>\r\n          </div>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- <div *ngSwitchCase=\"'custom_checkbox'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\">{{ input.label }}</label>\r\n        <div class=\"form-group\">\r\n          <custom-checkbox [formControlName]=\"input.key\" [onChange]=\"input.onChange\"></custom-checkbox>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n\r\n    <div *ngSwitchCase=\"'uploadfile'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <upload-images\r\n            [isClear]=\"isClear\"\r\n            [formControlName]=\"input.key\"\r\n            [id]=\"input.id\"\r\n            [oldValue]=\"input.value\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [paramName]=\"input.paramName\"\r\n            [uploadPath]=\"input.uploadPath\"\r\n            [multiple]=\"input.multiple\"\r\n            [headers]=\"input.headers\"\r\n            [apiUpload]=\"input.apiUpload\"\r\n            [accept]=\"input.accept\"\r\n            [allowMaxSize]=\"input.allowMaxSize\"\r\n            [zoom]=\"input.zoom\"\r\n          ></upload-images>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'province'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <province-city [formControlName]=\"input.key\"></province-city>\r\n          </div>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'selection-by-api'\">\r\n      <div class=\"form-primary\" *ngIf=\"input.multiple === false\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <selection-by-api\r\n              [id]=\"input.id\"\r\n              [isClear]=\"isClear\"\r\n              [formControlName]=\"input.key\"\r\n              [resultTransformer]=\"input.resultTransformer\"\r\n              [headers]=\"input.headers\"\r\n              [apiUpload]=\"input.apiUpload\"\r\n              [fieldName]=\"input.fieldName\"\r\n              [lengthToSearch]=\"input.lengthToSearch\"\r\n              [method]=\"input.method\"\r\n            ></selection-by-api>\r\n          </div>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-primary\" *ngIf=\"input.multiple === true\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div class=\"form-group\">\r\n          <multi-selection-by-api\r\n            [id]=\"input.id\"\r\n            [isClear]=\"isClear\"\r\n            [formControlName]=\"input.key\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [headers]=\"input.headers\"\r\n            [apiUpload]=\"input.apiUpload\"\r\n            [fieldName]=\"input.fieldName\"\r\n            [lengthToSearch]=\"input.lengthToSearch\"\r\n            [method]=\"input.method\"\r\n          ></multi-selection-by-api>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'captcha'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <captcha\r\n              [captchaCorrect]=\"captchaCorrect\"\r\n              [formControlName]=\"input.key\"\r\n              [type]=\"input.type\"\r\n              [numberOfChar]=\"input.numberOfChar\"\r\n              [message]=\"input.message\"\r\n            ></captcha>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'single-select2'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <single-select2\r\n              [isDisabled]=\"input.disabled\"\r\n              [isClear]=\"isClear\"\r\n              [id]=\"input.id\"\r\n              [options]=\"input.options\"\r\n              [formControlName]=\"input.key\"\r\n              [placeholder]=\"input.placeholder\"\r\n            ></single-select2>\r\n          </div>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'switch-input'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <custom-switch-input\r\n              [id]=\"input.id\"\r\n              [isDisabled]=\"input.disabled\"\r\n              [isClear]=\"isClear\"\r\n              [formControlName]=\"input.key\"\r\n            ></custom-switch-input>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'uploadfilev2'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <upload-file\r\n            [isClear]=\"isClear\"\r\n            [formControlName]=\"input.key\"\r\n            [id]=\"input.id\"\r\n            [oldValue]=\"input.value\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [dataFunction]=\"input.dataFunction\"\r\n            [paramName]=\"input.paramName\"\r\n            [uploadPath]=\"input.uploadPath\"\r\n            [multiple]=\"input.multiple\"\r\n            [headers]=\"input.headers\"\r\n            [apiUpload]=\"input.apiUpload\"\r\n            [accept]=\"input.accept\"\r\n            [allowMaxSize]=\"input.allowMaxSize\"\r\n            [width]=\"input.width\"\r\n            [maxWidth]=\"input.maxWidth\"\r\n            [height]=\"input.height\"\r\n            [maxHeight]=\"input.maxHeight\"\r\n            [title]=\"input.title\"\r\n            [uploadFromDB]=\"input.uploadFromDB\"\r\n          ></upload-file>\r\n        </div>\r\n\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'uploadfilev3'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <upload-file-v3\r\n            [isClear]=\"isClear\"\r\n            [resultKey]=\"input.resultKey\"\r\n            [formControlName]=\"input.key\"\r\n            [id]=\"input.id\"\r\n            [oldValue]=\"input.value\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [paramName]=\"input.paramName\"\r\n            [uploadPath]=\"input.uploadPath\"\r\n            [multiple]=\"input.multiple\"\r\n            [headers]=\"input.headers\"\r\n            [apiUpload]=\"input.apiUpload\"\r\n            [accept]=\"input.accept\"\r\n            [allowMaxSize]=\"input.allowMaxSize\"\r\n          ></upload-file-v3>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'type-ahead'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <typeahead\r\n            [isClear]=\"isClear\"\r\n            [id]=\"input.id\"\r\n            [formControlName]=\"input.key\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [apiUpload]=\"input.apiUpload\"\r\n            [method]=\"input.method\"\r\n            [keyName]=\"input.keyName\"\r\n            [fieldName]=\"input.fieldName\"\r\n            [searchBy]=\"input.searchBy\"\r\n          >\r\n          </typeahead>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'type-ahead-without-api'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <typeahead-without-api [isClear]=\"isClear\" [id]=\"input.id\" [formControlName]=\"input.key\" [options]=\"input.options\">\r\n          </typeahead-without-api>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'ranger-slider'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <ranger-silders\r\n            [oldValue]=\"input.value\"\r\n            [formControlName]=\"input.key\"\r\n            [step]=\"input.step\"\r\n            [min]=\"input.min\"\r\n            [max]=\"input.max\"\r\n            [miLabel]=\"input.miLabel\"\r\n            [unit]=\"input.unit\"\r\n          ></ranger-silders>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'gutenberg'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <gutenberg [formControlName]=\"input.key\" [oldValue]=\"input.value\"></gutenberg>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                    providers: [FileService],
                    styles: [":host .reactive-form-group label{font-size:12px;margin-bottom:0}:host #textarea{width:100%}:host .checkbox .float-label{display:block;position:relative;padding-left:35px;margin-bottom:12px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:27px}:host .checkbox .float-label input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}:host .checkbox .checkmark{position:absolute;top:0;left:0;height:25px;width:25px;background-color:#eee}:host .checkbox .float-label:hover input~.checkmark{background-color:#ccc}:host .checkbox .float-label input:checked~.checkmark{background-color:#2196f3}:host .checkbox .checkmark:after{content:'';position:absolute;display:none}:host .checkbox .float-label input:checked~.checkmark:after{display:block}:host .checkbox .float-label .checkmark:after{left:9px;top:5px;width:5px;height:10px;border:solid #fff;border-width:0 3px 3px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}:host .radio .radio-label{display:block;position:relative;padding-left:35px;margin-bottom:12px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:27px}:host .radio .radio-label input{position:absolute;opacity:0;cursor:pointer}:host .radio .checkmark{position:absolute;top:0;left:0;height:25px;width:25px;background-color:#eee;border-radius:50%}:host .radio .radio-label:hover input~.checkmark{background-color:#ccc}:host .radio .radio-label input:checked~.checkmark{background-color:#2196f3}:host .radio .checkmark:after{content:'';position:absolute;display:none}:host .radio .radio-label input:checked~.checkmark:after{display:block}:host .radio .radio-label .checkmark:after{top:9px;left:9px;width:8px;height:8px;border-radius:50%;background:#fff}"]
                }] }
    ];
    /** @nocollapse */
    DynamicInputComponent.ctorParameters = function () { return [
        { type: FileService },
        { type: Injector }
    ]; };
    DynamicInputComponent.propDecorators = {
        input: [{ type: Input }],
        form: [{ type: Input }],
        submitted: [{ type: Input }],
        isClear: [{ type: Input }],
        captchaCorrect: [{ type: Input }]
    };
    return DynamicInputComponent;
}());
export { DynamicInputComponent };
if (false) {
    /** @type {?} */
    DynamicInputComponent.prototype.input;
    /** @type {?} */
    DynamicInputComponent.prototype.form;
    /** @type {?} */
    DynamicInputComponent.prototype.submitted;
    /** @type {?} */
    DynamicInputComponent.prototype.isClear;
    /** @type {?} */
    DynamicInputComponent.prototype.captchaCorrect;
    /** @type {?} */
    DynamicInputComponent.prototype.validatorForm;
    /**
     * @type {?}
     * @private
     */
    DynamicInputComponent.prototype.api;
    /**
     * @type {?}
     * @private
     */
    DynamicInputComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Admljb2RlcnMvcmVhY3RpdmUtZm9ybS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2R5bmFtaWMtaW5wdXQvZHluYW1pYy1pbnB1dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBb0IsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDbkQsT0FBTyxLQUFLLENBQUMsTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBR2xFO0lBb0JFLCtCQUFvQixHQUFnQixFQUFVLFFBQWtCO1FBQTVDLFFBQUcsR0FBSCxHQUFHLENBQWE7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQUcsQ0FBQzs7Ozs7SUFFcEUsMkNBQVc7Ozs7SUFBWCxVQUFZLElBQUk7O1lBQ1IsS0FBSyxHQUFHLElBQUk7O1lBQ1osd0JBQXdCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUM7O1lBQ3hFLHdCQUF3QixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDOztZQUN4RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUM7UUFDMUQsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUU7WUFDeEIsb0JBQW9COzs7Ozs7WUFBRSxVQUFTLFFBQVEsRUFBRSxLQUFLLEVBQUUsSUFBSTs7OztvQkFHNUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxD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QUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRTs7Z0JBQ3ZDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEgsSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7U0FDdEI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7OztJQUVELHVDQUFPOzs7OztJQUFQLFVBQVEsQ0FBQyxFQUFFLENBQUM7UUFDViwrQkFBK0I7UUFDL0Isa0JBQWtCO0lBQ3BCLENBQUM7O2dCQXRHRixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSxlQUFlO29CQUN6QiwyaDBCQUE2QztvQkFFN0MsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDOztpQkFDekI7Ozs7Z0JBVFEsV0FBVztnQkFKeUIsUUFBUTs7O3dCQWVsRCxLQUFLO3VCQUVMLEtBQUs7NEJBRUwsS0FBSzswQkFFTCxLQUFLO2lDQUVMLEtBQUs7O0lBdUZSLDRCQUFDO0NBQUEsQUF2R0QsSUF1R0M7U0FoR1kscUJBQXFCOzs7SUFDaEMsc0NBQ3NCOztJQUN0QixxQ0FDZ0I7O0lBQ2hCLDBDQUNtQjs7SUFDbkIsd0NBQ2lCOztJQUNqQiwrQ0FDd0I7O0lBQ3hCLDhDQUFjOzs7OztJQUVGLG9DQUF3Qjs7Ozs7SUFBRSx5Q0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBBZnRlckNvbnRlbnRJbml0LCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IElucHV0QmFzZSB9IGZyb20gJy4uLy4uL21vZGVscy9JbnB1dEJhc2UnO1xyXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCB7IEZpbGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy91cGxvYWQtaW1hZ2VzL3Rlc3QnO1xyXG5kZWNsYXJlIHZhciAkOiBhbnk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdkeW5hbWljLWlucHV0JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZHluYW1pYy1pbnB1dC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vZHluYW1pYy1pbnB1dC5jb21wb25lbnQuc2NzcyddLFxyXG4gIHByb3ZpZGVyczogW0ZpbGVTZXJ2aWNlXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRHluYW1pY0lucHV0Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XHJcbiAgQElucHV0KClcclxuICBpbnB1dDogSW5wdXRCYXNlPGFueT47XHJcbiAgQElucHV0KClcclxuICBmb3JtOiBGb3JtR3JvdXA7XHJcbiAgQElucHV0KClcclxuICBzdWJtaXR0ZWQ6IEJvb2xlYW47XHJcbiAgQElucHV0KClcclxuICBpc0NsZWFyOiBCb29sZWFuO1xyXG4gIEBJbnB1dCgpXHJcbiAgY2FwdGNoYUNvcnJlY3Q6IEJvb2xlYW47XHJcbiAgdmFsaWRhdG9yRm9ybTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGk6IEZpbGVTZXJ2aWNlLCBwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge31cclxuXHJcbiAgaW5pdFRpbnlNY2UodGVzdCkge1xyXG4gICAgY29uc3QgJHRoaXMgPSB0aGlzO1xyXG4gICAgY29uc3QgVVBMT0FEX0RJUkVDVElWRV9IRUFERVJTID0gdGhpcy5pbmplY3Rvci5nZXQoJ1VQTE9BRF9ESVJFQ1RJVkVfSEVBREVSUycpO1xyXG4gICAgY29uc3QgVVBMT0FEX0RJUkVDVElWRV9BUElfVVJMID0gdGhpcy5pbmplY3Rvci5nZXQoJ1VQTE9BRF9ESVJFQ1RJVkVfQVBJX1VSTCcpO1xyXG4gICAgY29uc3QgVElOWU1DRV9DT05GSUcgPSB0aGlzLmluamVjdG9yLmdldCgnVElOWU1DRV9DT05GSUcnKTtcclxuICAgIHJldHVybiBfLmFzc2lnbih7fSwgdGVzdCwge1xyXG4gICAgICBmaWxlX3BpY2tlcl9jYWxsYmFjazogZnVuY3Rpb24oY2FsbGJhY2ssIHZhbHVlLCBtZXRhKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2xlYmFvdHJ1bmcnKTtcclxuICAgICAgICAvLyAkKCcjc2luZ2xlJykubW9kYWwoJ3Nob3cnKTtcclxuICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2ZpbGUnKTtcclxuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ2FjY2VwdCcsICdpbWFnZS8qJyk7XHJcbiAgICAgICAgaW5wdXQub25jaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIC8vIGNvbnN0IGZpbGUgPSAodGhpcyBhcyBhbnkpLmZpbGVzWzBdO1xyXG4gICAgICAgICAgLy8gY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgIC8vIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAvLyAgIGNhbGxiYWNrKChlLnRhcmdldCBhcyBhbnkpLnJlc3VsdCwge1xyXG4gICAgICAgICAgLy8gICAgIGFsdDogJydcclxuICAgICAgICAgIC8vICAgfSk7XHJcbiAgICAgICAgICAvLyB9O1xyXG4gICAgICAgICAgLy8gcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgICAgICBjb25zdCBmaWxlID0gKHRoaXMgYXMgYW55KS5maWxlc1swXTtcclxuICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHt9O1xyXG4gICAgICAgICAgcGFyYW1zW1RJTllNQ0VfQ09ORklHLnBhcmFtTmFtZV0gPSBmaWxlO1xyXG4gICAgICAgICAgaWYgKFRJTllNQ0VfQ09ORklHLnVwbG9hZFBhdGgpIHtcclxuICAgICAgICAgICAgcGFyYW1zWyd1cGxvYWRfcGF0aCddID0gVElOWU1DRV9DT05GSUcudXBsb2FkUGF0aDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gVVBMT0FEX0RJUkVDVElWRV9IRUFERVJTO1xyXG4gICAgICAgICAgY29uc3QgcmVxdWVzdEFwaVVybCA9IFVQTE9BRF9ESVJFQ1RJVkVfQVBJX1VSTCArIFRJTllNQ0VfQ09ORklHLmFwaVVwbG9hZDtcclxuICAgICAgICAgICR0aGlzLmFwaS51cGxvYWQocGFyYW1zLCByZXF1ZXN0QXBpVXJsLCByZXF1ZXN0SGVhZGVycykuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICByZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgY2FsbGJhY2soVElOWU1DRV9DT05GSUcucmVzdWx0VHJhbnNmb3JtZXIocmVzcG9uc2UpKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcicsIGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlucHV0LmNsaWNrKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge31cclxuXHJcbiAgZ2V0IGlzVmFsaWQoKSB7XHJcbiAgICBpZiAodGhpcy5mb3JtLmNvbnRyb2xzW3RoaXMuaW5wdXQua2V5XS5lcnJvcnMpIHtcclxuICAgICAgdGhpcy52YWxpZGF0b3JGb3JtID0gdGhpcy5mb3JtLmNvbnRyb2xzW3RoaXMuaW5wdXQua2V5XS5lcnJvcnM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5zdWJtaXR0ZWQgJiYgdGhpcy5mb3JtLmNvbnRyb2xzW3RoaXMuaW5wdXQua2V5XS52YWxpZDtcclxuICB9XHJcblxyXG4gIGdldEVycm9yKHZhbGlkYXRvcnMpIHtcclxuICAgIGNvbnN0ICR0aGlzID0gdGhpcztcclxuICAgIGxldCBtZXNzID0gJyc7XHJcbiAgICBfLmZvckVhY2godmFsaWRhdG9ycywgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgY29uc3QgZXJyb3JWYWxpZGF0b3IgPSB2YWx1ZS52YWxpZGF0b3IoJHRoaXMuZm9ybS5jb250cm9sc1skdGhpcy5pbnB1dC5rZXldKTtcclxuICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKGVycm9yVmFsaWRhdG9yKSAmJiAhXy5pc05pbChlcnJvclZhbGlkYXRvcikpIHtcclxuICAgICAgICBjb25zdCBlcnJvcktleSA9IE9iamVjdC5rZXlzKGVycm9yVmFsaWRhdG9yKVswXTtcclxuICAgICAgICBpZiAoJHRoaXMudmFsaWRhdG9yRm9ybS5oYXNPd25Qcm9wZXJ0eShlcnJvcktleSkpIHtcclxuICAgICAgICAgIG1lc3MgPSB2YWx1ZS5tZXNzYWdlO1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbWVzcztcclxuICB9XHJcblxyXG4gIGdldEFzeW5jRXJyb3JzKHZhbGlkYXRvcnMpIHtcclxuICAgIGxldCBtZXNzID0gJyc7XHJcbiAgICBpZiAodGhpcy5mb3JtLmNvbnRyb2xzW3RoaXMuaW5wdXQua2V5XS5lcnJvcnMpIHtcclxuICAgICAgY29uc3QgZXJyb3IgPSB0aGlzLmZvcm0uY29udHJvbHNbdGhpcy5pbnB1dC5rZXldLmVycm9yc1tPYmplY3Qua2V5cyh0aGlzLmZvcm0uY29udHJvbHNbdGhpcy5pbnB1dC5rZXldLmVycm9ycylbMF1dO1xyXG4gICAgICBtZXNzID0gZXJyb3IubWVzc2FnZTtcclxuICAgIH1cclxuICAgIHJldHVybiBtZXNzO1xyXG4gIH1cclxuXHJcbiAgb25LZXl1cChlLCBrKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhlLnRhcmdldC52YWx1ZSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhrKTtcclxuICB9XHJcbn1cclxuIl19