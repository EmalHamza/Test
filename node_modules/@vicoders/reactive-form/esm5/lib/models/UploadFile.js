/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/UploadFile.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { InputBase } from './InputBase';
var UploadFile = /** @class */ (function (_super) {
    tslib_1.__extends(UploadFile, _super);
    function UploadFile(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, options) || this;
        _this.controlType = 'uploadfile';
        _this.id = options['id'] || 1;
        _this.accept = options['accept'] || '';
        _this.allowMaxSize = options['allowMaxSize'] || 2;
        _this.apiUpload = options['apiUpload'] || '';
        _this.headers = options['headers'] || {};
        _this.uploadPath = options['uploadPath'] || '';
        _this.multiple = options['multiple'] || false;
        _this.paramName = options['paramName'] || 'files';
        _this.resultTransformer = options['resultTransformer'];
        _this.zoom = options['zoom'] || false;
        return _this;
    }
    return UploadFile;
}(InputBase));
export { UploadFile };
if (false) {
    /** @type {?} */
    UploadFile.prototype.controlType;
    /** @type {?} */
    UploadFile.prototype.id;
    /** @type {?} */
    UploadFile.prototype.accept;
    /** @type {?} */
    UploadFile.prototype.allowMaxSize;
    /** @type {?} */
    UploadFile.prototype.apiUpload;
    /** @type {?} */
    UploadFile.prototype.headers;
    /** @type {?} */
    UploadFile.prototype.uploadPath;
    /** @type {?} */
    UploadFile.prototype.multiple;
    /** @type {?} */
    UploadFile.prototype.paramName;
    /** @type {?} */
    UploadFile.prototype.zoom;
    /** @type {?} */
    UploadFile.prototype.resultTransformer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXBsb2FkRmlsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2aWNvZGVycy9yZWFjdGl2ZS1mb3JtLyIsInNvdXJjZXMiOlsibGliL21vZGVscy9VcGxvYWRGaWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFeEM7SUFBZ0Msc0NBQWlCO0lBYS9DLG9CQUFZLE9BQWdCO1FBQWhCLHdCQUFBLEVBQUEsWUFBZ0I7UUFBNUIsWUFDRSxrQkFBTSxPQUFPLENBQUMsU0FXZjtRQXhCRCxpQkFBVyxHQUFHLFlBQVksQ0FBQztRQWN6QixLQUFJLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsS0FBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RDLEtBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxLQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDNUMsS0FBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hDLEtBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM5QyxLQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLENBQUM7UUFDN0MsS0FBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksT0FBTyxDQUFDO1FBQ2pELEtBQUksQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN0RCxLQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUM7O0lBQ3ZDLENBQUM7SUFDSCxpQkFBQztBQUFELENBQUMsQUExQkQsQ0FBZ0MsU0FBUyxHQTBCeEM7Ozs7SUF6QkMsaUNBQTJCOztJQUMzQix3QkFBVzs7SUFDWCw0QkFBZTs7SUFDZixrQ0FBcUI7O0lBQ3JCLCtCQUFrQjs7SUFDbEIsNkJBQWdCOztJQUNoQixnQ0FBbUI7O0lBQ25CLDhCQUFrQjs7SUFDbEIsK0JBQWtCOztJQUNsQiwwQkFBYzs7SUFDZCx1Q0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dEJhc2UgfSBmcm9tICcuL0lucHV0QmFzZSc7XG5cbmV4cG9ydCBjbGFzcyBVcGxvYWRGaWxlIGV4dGVuZHMgSW5wdXRCYXNlPHN0cmluZz4ge1xuICBjb250cm9sVHlwZSA9ICd1cGxvYWRmaWxlJztcbiAgaWQ6IG51bWJlcjtcbiAgYWNjZXB0OiBzdHJpbmc7XG4gIGFsbG93TWF4U2l6ZTogbnVtYmVyO1xuICBhcGlVcGxvYWQ6IHN0cmluZztcbiAgaGVhZGVyczogb2JqZWN0O1xuICB1cGxvYWRQYXRoOiBzdHJpbmc7XG4gIG11bHRpcGxlOiBib29sZWFuO1xuICBwYXJhbU5hbWU6IHN0cmluZztcbiAgem9vbTogYm9vbGVhbjtcbiAgcmVzdWx0VHJhbnNmb3JtZXI6IEZ1bmN0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IHt9ID0ge30pIHtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLmlkID0gb3B0aW9uc1snaWQnXSB8fCAxO1xuICAgIHRoaXMuYWNjZXB0ID0gb3B0aW9uc1snYWNjZXB0J10gfHwgJyc7XG4gICAgdGhpcy5hbGxvd01heFNpemUgPSBvcHRpb25zWydhbGxvd01heFNpemUnXSB8fCAyO1xuICAgIHRoaXMuYXBpVXBsb2FkID0gb3B0aW9uc1snYXBpVXBsb2FkJ10gfHwgJyc7XG4gICAgdGhpcy5oZWFkZXJzID0gb3B0aW9uc1snaGVhZGVycyddIHx8IHt9O1xuICAgIHRoaXMudXBsb2FkUGF0aCA9IG9wdGlvbnNbJ3VwbG9hZFBhdGgnXSB8fCAnJztcbiAgICB0aGlzLm11bHRpcGxlID0gb3B0aW9uc1snbXVsdGlwbGUnXSB8fCBmYWxzZTtcbiAgICB0aGlzLnBhcmFtTmFtZSA9IG9wdGlvbnNbJ3BhcmFtTmFtZSddIHx8ICdmaWxlcyc7XG4gICAgdGhpcy5yZXN1bHRUcmFuc2Zvcm1lciA9IG9wdGlvbnNbJ3Jlc3VsdFRyYW5zZm9ybWVyJ107XG4gICAgdGhpcy56b29tID0gb3B0aW9uc1snem9vbSddIHx8IGZhbHNlO1xuICB9XG59XG4iXX0=