/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/selection-by-api/selection-by-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { catchError, map } from 'rxjs/operators';
var SelectionService = /** @class */ (function () {
    function SelectionService(http) {
        this.http = http;
        this.url = '/api/admin/users';
    }
    /**
     * @param {?} api
     * @param {?} headers
     * @param {?} method
     * @return {?}
     */
    SelectionService.prototype.getAll = /**
     * @param {?} api
     * @param {?} headers
     * @param {?} method
     * @return {?}
     */
    function (api, headers, method) {
        return this.http.request(method, api, { headers: headers }).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            return response;
        }), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            throw error;
        }))));
    };
    SelectionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SelectionService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return SelectionService;
}());
export { SelectionService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    SelectionService.prototype.url;
    /** @type {?} */
    SelectionService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLWJ5LWFwaS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2aWNvZGVycy9yZWFjdGl2ZS1mb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvc2VsZWN0aW9uLWJ5LWFwaS9zZWxlY3Rpb24tYnktYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBTyxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUl0RDtJQUlFLDBCQUFtQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBRnpCLFFBQUcsR0FBRyxrQkFBa0IsQ0FBQztJQUVHLENBQUM7Ozs7Ozs7SUFFdkMsaUNBQU07Ozs7OztJQUFOLFVBQU8sR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDOUQsR0FBRzs7OztRQUNELFVBQVMsUUFBUTtZQUNmLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsR0FDRCxVQUFVOzs7O1FBQUMsVUFBQSxLQUFLO1lBQ2QsTUFBTSxLQUFLLENBQUM7UUFDZCxDQUFDLEVBQUMsQ0FDSCxDQUNGLENBQUM7SUFDSixDQUFDOztnQkFqQkYsVUFBVTs7OztnQkFORixVQUFVOztJQXdCbkIsdUJBQUM7Q0FBQSxBQWxCRCxJQWtCQztTQWpCWSxnQkFBZ0I7Ozs7OztJQUMzQiwrQkFBbUM7O0lBRXZCLGdDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCB0YXAsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlbGVjdGlvblNlcnZpY2Uge1xuICBwcm90ZWN0ZWQgdXJsID0gJy9hcGkvYWRtaW4vdXNlcnMnO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBodHRwOiBIdHRwQ2xpZW50KSB7fVxuXG4gIGdldEFsbChhcGksIGhlYWRlcnMsIG1ldGhvZCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5yZXF1ZXN0KG1ldGhvZCwgYXBpLCB7IGhlYWRlcnM6IGhlYWRlcnMgfSkucGlwZShcbiAgICAgIG1hcChcbiAgICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT4ge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9KVxuICAgICAgKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==