/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ranger-silders/ranger-silders.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var RangerSildersComponent = /** @class */ (function () {
    function RangerSildersComponent() {
        this._value = {
            min: null,
            max: null
        };
        this.propagateChange = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
    }
    /**
     * @return {?}
     */
    RangerSildersComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.oldValue) {
                _this.value = _this.oldValue;
            }
            else {
                _this.value = {
                    min: _this.min,
                    max: _this.max
                };
            }
            /** @type {?} */
            var $this = _this;
            /**
             * @return {?}
             */
            function getVals() {
                // Get slider values
                /** @type {?} */
                var parent = this.parentNode;
                /** @type {?} */
                var slides = parent.getElementsByTagName('input');
                /** @type {?} */
                var slide1 = parseFloat(slides[0].value);
                /** @type {?} */
                var slide2 = parseFloat(slides[1].value);
                // Neither slider will clip the other, so make sure we determine which is larger
                if (slide1 > slide2) {
                    /** @type {?} */
                    var tmp = slide2;
                    slide2 = slide1;
                    slide1 = tmp;
                }
                /** @type {?} */
                var miLabel = $this.miLabel ? $this.miLabel + ': ' : '';
                /** @type {?} */
                var unit = $this.unit ? $this.unit : '';
                /** @type {?} */
                var displayElement = parent.getElementsByClassName('rangeValues')[0];
                displayElement.innerHTML = miLabel + slide1 + unit + ' - ' + slide2 + unit;
                $this.value = {
                    min: slide1,
                    max: slide2
                };
            }
            window.onload = (/**
             * @return {?}
             */
            function () {
                // Initialize Sliders
                /** @type {?} */
                var sliderSections = document.getElementsByClassName('range-slider');
                for (var x = 0; x < sliderSections.length; x++) {
                    /** @type {?} */
                    var sliders = sliderSections[x].getElementsByTagName('input');
                    for (var y = 0; y < sliders.length; y++) {
                        if (sliders[y].type === 'range') {
                            sliders[y].oninput = getVals;
                            // Manually trigger event first time to display values
                            sliders[y].oninput(null);
                        }
                    }
                }
            });
        }), 1000);
    };
    Object.defineProperty(RangerSildersComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this.propagateChange(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    RangerSildersComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== undefined) {
            this.value = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RangerSildersComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @return {?}
     */
    RangerSildersComponent.prototype.registerOnTouched = /**
     * @return {?}
     */
    function () { };
    RangerSildersComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'ranger-silders',
                    template: "<div class=\"rf-rangers\">\n  <section id=\"rf-range-slider-{{ id }}\" class=\"range-slider\">\n    <input value=\"{{ value.min }}\" min=\"{{ min }}\" max=\"{{ max }}\" step=\"{{ step }}\" type=\"range\" />\n    <input value=\"{{ value.max }}\" min=\"{{ min }}\" max=\"{{ max }}\" step=\"{{ step }}\" type=\"range\" />\n    <span class=\"rangeValues\"></span>\n  </section>\n</div>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return RangerSildersComponent; })),
                            multi: true
                        }
                    ],
                    styles: [".rangeValues{position:absolute;top:30px;left:0}section.range-slider{position:relative;float:left;width:100%;text-align:center}section.range-slider input[type=range]{pointer-events:none;position:absolute;-webkit-appearance:none;-webkit-tap-highlight-color:rgba(255,255,255,0);border:none;border-radius:14px;background:#f1efef;box-shadow:inset 0 1px 0 0 #cdc6c6,inset 0 -1px 0 0 #d9d4d4;-webkit-box-shadow:inset 0 1px 0 0 #cdc6c6,inset 0 -1px 0 0 #d9d4d4;overflow:hidden;left:0;top:0;outline:0;height:5px;margin:0;padding:0;width:100%}section.range-slider input[type=range]::-webkit-slider-thumb{cursor:pointer;pointer-events:all;position:relative;z-index:9999;outline:0;-webkit-appearance:none;width:10px;height:10px;border:none;border-radius:50%;background-color:#4cd964}section.range-slider input[type=range]::-moz-range-thumb{cursor:pointer;pointer-events:all;position:relative;z-index:9999;-moz-appearance:none;width:10px;height:10px;border:none;border-radius:50%;background-color:#4cd964}section.range-slider input[type=range]::-ms-thumb{cursor:pointer;pointer-events:all;position:relative;z-index:9999;-ms-appearance:none;width:10px;height:10px;border-radius:50%;border:0;background-color:#4cd964}section.range-slider input[type=range]::-moz-range-track{position:relative;z-index:-1;background-color:#000;border:0}section.range-slider input[type=range]:last-of-type::-moz-range-track{-moz-appearance:none;background:none;border:0}section.range-slider input[type=range]::-moz-focus-outer{border:0}"]
                }] }
    ];
    /** @nocollapse */
    RangerSildersComponent.ctorParameters = function () { return []; };
    RangerSildersComponent.propDecorators = {
        id: [{ type: Input }],
        min: [{ type: Input }],
        miLabel: [{ type: Input }],
        unit: [{ type: Input }],
        max: [{ type: Input }],
        step: [{ type: Input }],
        _value: [{ type: Input }],
        oldValue: [{ type: Input }]
    };
    return RangerSildersComponent;
}());
export { RangerSildersComponent };
if (false) {
    /** @type {?} */
    RangerSildersComponent.prototype.id;
    /** @type {?} */
    RangerSildersComponent.prototype.min;
    /** @type {?} */
    RangerSildersComponent.prototype.miLabel;
    /** @type {?} */
    RangerSildersComponent.prototype.unit;
    /** @type {?} */
    RangerSildersComponent.prototype.max;
    /** @type {?} */
    RangerSildersComponent.prototype.step;
    /** @type {?} */
    RangerSildersComponent.prototype._value;
    /** @type {?} */
    RangerSildersComponent.prototype.oldValue;
    /** @type {?} */
    RangerSildersComponent.prototype.propagateChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2VyLXNpbGRlcnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZpY29kZXJzL3JlYWN0aXZlLWZvcm0vIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9yYW5nZXItc2lsZGVycy9yYW5nZXItc2lsZGVycy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxVQUFVLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BGLE9BQU8sRUFBRSxpQkFBaUIsRUFBd0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6RTtJQTJCRTtRQVBTLFdBQU0sR0FBRztZQUNoQixHQUFHLEVBQUUsSUFBSTtZQUNULEdBQUcsRUFBRSxJQUFJO1NBQ1YsQ0FBQztRQUVGLG9CQUFlOzs7O1FBQUcsVUFBQyxHQUFRLElBQU0sQ0FBQyxFQUFDO0lBRXBCLENBQUM7Ozs7SUFFaEIsZ0RBQWU7OztJQUFmO1FBQUEsaUJBa0RDO1FBakRDLFVBQVU7OztRQUFDO1lBQ1QsSUFBSSxLQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUM7YUFDNUI7aUJBQU07Z0JBQ0wsS0FBSSxDQUFDLEtBQUssR0FBRztvQkFDWCxHQUFHLEVBQUUsS0FBSSxDQUFDLEdBQUc7b0JBQ2IsR0FBRyxFQUFFLEtBQUksQ0FBQyxHQUFHO2lCQUNkLENBQUM7YUFDSDs7Z0JBRUssS0FBSyxHQUFHLEtBQUk7Ozs7WUFDbEIsU0FBUyxPQUFPOzs7b0JBRVIsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVOztvQkFDeEIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUM7O29CQUMvQyxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7O29CQUNwQyxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0s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TCxLQUFLO3VCQUNMLEtBQUs7c0JBQ0wsS0FBSzt1QkFDTCxLQUFLO3lCQUNMLEtBQUs7MkJBSUwsS0FBSzs7SUE2RVIsNkJBQUM7Q0FBQSxBQXJHRCxJQXFHQztTQXhGWSxzQkFBc0I7OztJQUNqQyxvQ0FBWTs7SUFDWixxQ0FBYTs7SUFDYix5Q0FBaUI7O0lBQ2pCLHNDQUFjOztJQUNkLHFDQUFhOztJQUNiLHNDQUFjOztJQUNkLHdDQUdFOztJQUNGLDBDQUFrQjs7SUFDbEIsaURBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBmb3J3YXJkUmVmLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAncmFuZ2VyLXNpbGRlcnMnLFxuICB0ZW1wbGF0ZVVybDogJy4vcmFuZ2VyLXNpbGRlcnMuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9yYW5nZXItc2lsZGVycy5jb21wb25lbnQuY3NzJ10sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gUmFuZ2VyU2lsZGVyc0NvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBSYW5nZXJTaWxkZXJzQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEFmdGVyVmlld0luaXQge1xuICBASW5wdXQoKSBpZDtcbiAgQElucHV0KCkgbWluO1xuICBASW5wdXQoKSBtaUxhYmVsO1xuICBASW5wdXQoKSB1bml0O1xuICBASW5wdXQoKSBtYXg7XG4gIEBJbnB1dCgpIHN0ZXA7XG4gIEBJbnB1dCgpIF92YWx1ZSA9IHtcbiAgICBtaW46IG51bGwsXG4gICAgbWF4OiBudWxsXG4gIH07XG4gIEBJbnB1dCgpIG9sZFZhbHVlO1xuICBwcm9wYWdhdGVDaGFuZ2UgPSAodmFsOiBhbnkpID0+IHt9O1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5vbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5vbGRWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB7XG4gICAgICAgICAgbWluOiB0aGlzLm1pbixcbiAgICAgICAgICBtYXg6IHRoaXMubWF4XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0ICR0aGlzID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGdldFZhbHMoKSB7XG4gICAgICAgIC8vIEdldCBzbGlkZXIgdmFsdWVzXG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICAgICAgY29uc3Qgc2xpZGVzID0gcGFyZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbnB1dCcpO1xuICAgICAgICBsZXQgc2xpZGUxID0gcGFyc2VGbG9hdChzbGlkZXNbMF0udmFsdWUpO1xuICAgICAgICBsZXQgc2xpZGUyID0gcGFyc2VGbG9hdChzbGlkZXNbMV0udmFsdWUpO1xuICAgICAgICAvLyBOZWl0aGVyIHNsaWRlciB3aWxsIGNsaXAgdGhlIG90aGVyLCBzbyBtYWtlIHN1cmUgd2UgZGV0ZXJtaW5lIHdoaWNoIGlzIGxhcmdlclxuICAgICAgICBpZiAoc2xpZGUxID4gc2xpZGUyKSB7XG4gICAgICAgICAgY29uc3QgdG1wID0gc2xpZGUyO1xuICAgICAgICAgIHNsaWRlMiA9IHNsaWRlMTtcbiAgICAgICAgICBzbGlkZTEgPSB0bXA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWlMYWJlbCA9ICR0aGlzLm1pTGFiZWwgPyAkdGhpcy5taUxhYmVsICsgJzogJyA6ICcnO1xuICAgICAgICBjb25zdCB1bml0ID0gJHRoaXMudW5pdCA/ICR0aGlzLnVuaXQgOiAnJztcblxuICAgICAgICBjb25zdCBkaXNwbGF5RWxlbWVudCA9IHBhcmVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdyYW5nZVZhbHVlcycpWzBdO1xuICAgICAgICBkaXNwbGF5RWxlbWVudC5pbm5lckhUTUwgPSBtaUxhYmVsICsgc2xpZGUxICsgdW5pdCArICcgLSAnICsgc2xpZGUyICsgdW5pdDtcbiAgICAgICAgJHRoaXMudmFsdWUgPSB7XG4gICAgICAgICAgbWluOiBzbGlkZTEsXG4gICAgICAgICAgbWF4OiBzbGlkZTJcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBJbml0aWFsaXplIFNsaWRlcnNcbiAgICAgICAgY29uc3Qgc2xpZGVyU2VjdGlvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdyYW5nZS1zbGlkZXInKTtcbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBzbGlkZXJTZWN0aW9ucy5sZW5ndGg7IHgrKykge1xuICAgICAgICAgIGNvbnN0IHNsaWRlcnMgPSBzbGlkZXJTZWN0aW9uc1t4XS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKTtcbiAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHNsaWRlcnMubGVuZ3RoOyB5KyspIHtcbiAgICAgICAgICAgIGlmIChzbGlkZXJzW3ldLnR5cGUgPT09ICdyYW5nZScpIHtcbiAgICAgICAgICAgICAgc2xpZGVyc1t5XS5vbmlucHV0ID0gZ2V0VmFscztcbiAgICAgICAgICAgICAgLy8gTWFudWFsbHkgdHJpZ2dlciBldmVudCBmaXJzdCB0aW1lIHRvIGRpc3BsYXkgdmFsdWVzXG4gICAgICAgICAgICAgIHNsaWRlcnNbeV0ub25pbnB1dChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSwgMTAwMCk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbCkge1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsO1xuICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlKHRoaXMuX3ZhbHVlKTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbikge1xuICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZCgpIHt9XG59XG4iXX0=