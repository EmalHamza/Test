/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/upload-file/test.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { Injectable } from '@angular/core';
var FileService = /** @class */ (function () {
    function FileService(http) {
        this.url = '/api/v1/upload';
        this.http = http;
    }
    /**
     * @param {?} params
     * @param {?} apiUpload
     * @param {?} headers
     * @return {?}
     */
    FileService.prototype.upload = /**
     * @param {?} params
     * @param {?} apiUpload
     * @param {?} headers
     * @return {?}
     */
    function (params, apiUpload, headers) {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var formData = new FormData();
        // tslint:disable-next-line:forin
        for (var key in params) {
            formData.append(key, params[key]);
        }
        return this.http.post(apiUpload, formData, { headers: headers }).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return response; })));
    };
    /**
     * @param {?} params
     * @param {?} apiUpload
     * @return {?}
     */
    FileService.prototype.delete = /**
     * @param {?} params
     * @param {?} apiUpload
     * @return {?}
     */
    function (params, apiUpload) {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var formData = new FormData();
        // tslint:disable-next-line:forin
        for (var key in params) {
            formData.append(key, params[key]);
        }
        return this.http.post(apiUpload, formData).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return response; })));
    };
    FileService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FileService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return FileService;
}());
export { FileService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FileService.prototype.url;
    /** @type {?} */
    FileService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2aWNvZGVycy9yZWFjdGl2ZS1mb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvdXBsb2FkLWZpbGUvdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWMsTUFBTSxzQkFBc0IsQ0FBQztBQUs5RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQztJQUtFLHFCQUFZLElBQWdCO1FBSHBCLFFBQUcsR0FBRyxnQkFBZ0IsQ0FBQztRQUk3QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDOzs7Ozs7O0lBRUQsNEJBQU07Ozs7OztJQUFOLFVBQU8sTUFBTSxFQUFFLFNBQVMsRUFBRSxPQUFPOzs7WUFFM0IsUUFBUSxHQUFhLElBQUksUUFBUSxFQUFFO1FBQ3ZDLGlDQUFpQztRQUNqQyxLQUFLLElBQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTtZQUN4QixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNuQztRQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQyxRQUFrQixJQUFLLE9BQUEsUUFBUSxFQUFSLENBQVEsRUFBQyxDQUFDLENBQUM7SUFDL0csQ0FBQzs7Ozs7O0lBRUQsNEJBQU07Ozs7O0lBQU4sVUFBTyxNQUFNLEVBQUUsU0FBUzs7O1lBRWxCLFFBQVEsR0FBYSxJQUFJLFFBQVEsRUFBRTtRQUN2QyxpQ0FBaUM7UUFDakMsS0FBSyxJQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUU7WUFDeEIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDbkM7UUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRzs7OztRQUFDLFVBQUMsUUFBa0IsSUFBSyxPQUFBLFFBQVEsRUFBUixDQUFRLEVBQUMsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7O2dCQTVCRixVQUFVOzs7O2dCQVJGLFVBQVU7O0lBcUNuQixrQkFBQztDQUFBLEFBN0JELElBNkJDO1NBNUJZLFdBQVc7Ozs7OztJQUN0QiwwQkFBK0I7O0lBQy9CLDJCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgSHR0cCwgSGVhZGVycywgUmVzcG9uc2UsIFJlcXVlc3RPcHRpb25zIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGaWxlU2VydmljZSB7XG4gIHByaXZhdGUgdXJsID0gJy9hcGkvdjEvdXBsb2FkJztcbiAgaHR0cDogSHR0cENsaWVudDtcblxuICBjb25zdHJ1Y3RvcihodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgdGhpcy5odHRwID0gaHR0cDtcbiAgfVxuXG4gIHVwbG9hZChwYXJhbXMsIGFwaVVwbG9hZCwgaGVhZGVycyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnByZWZlci1jb25zdFxuICAgIGxldCBmb3JtRGF0YTogRm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Zm9yaW5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZChrZXksIHBhcmFtc1trZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KGFwaVVwbG9hZCwgZm9ybURhdGEsIHsgaGVhZGVyczogaGVhZGVycyB9KS5waXBlKG1hcCgocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiByZXNwb25zZSkpO1xuICB9XG5cbiAgZGVsZXRlKHBhcmFtcywgYXBpVXBsb2FkKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWNvbnN0XG4gICAgbGV0IGZvcm1EYXRhOiBGb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpmb3JpblxuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgZm9ybURhdGEuYXBwZW5kKGtleSwgcGFyYW1zW2tleV0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChhcGlVcGxvYWQsIGZvcm1EYXRhKS5waXBlKG1hcCgocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiByZXNwb25zZSkpO1xuICB9XG59XG4iXX0=