/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/typeahead/typeahead.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Injector, forwardRef, Input, ViewChild } from '@angular/core';
import { Subject, merge } from 'rxjs';
import { debounceTime, map, distinctUntilChanged, filter } from 'rxjs/operators';
import { SelectionService } from '../selection-by-api/selection-by-api';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NgbTypeahead } from '@ng-bootstrap/ng-bootstrap';
var TypeaheadComponent = /** @class */ (function () {
    function TypeaheadComponent(api, injector) {
        var _this = this;
        this.api = api;
        this.injector = injector;
        this.focus$ = new Subject();
        this.click$ = new Subject();
        this.statesWithFlags = [];
        this.UPLOAD_DIRECTIVE_HEADERS = this.injector.get('UPLOAD_DIRECTIVE_HEADERS');
        this.UPLOAD_DIRECTIVE_API_URL = this.injector.get('UPLOAD_DIRECTIVE_API_URL');
        this.url = (/**
         * @param {?} apiUrl
         * @param {?} search
         * @return {?}
         */
        function (apiUrl, search) {
            return apiUrl + _this.apiUpload + search;
            // tslint:disable-next-line:semicolon
        });
        // search = (text$: Observable<string>) =>
        //   text$.pipe(
        //     debounceTime(200),
        //     map(term =>
        //       term === '' ? [] : this.statesWithFlags.filter(v => v[this.searchBy].toLowerCase().indexOf(term.toLowerCase()) > -1).slice(0, 10)
        //     )
        //     // tslint:disable-next-line:semicolon
        //   );
        this.search = (/**
         * @param {?} text$
         * @return {?}
         */
        function (text$) {
            /** @type {?} */
            var debouncedText$ = text$.pipe(debounceTime(200), distinctUntilChanged());
            /** @type {?} */
            var clicksWithClosedPopup$ = _this.click$.pipe(filter((/**
             * @return {?}
             */
            function () { return !_this.instance.isPopupOpen(); })));
            /** @type {?} */
            var inputFocus$ = _this.focus$;
            return merge(debouncedText$, inputFocus$, clicksWithClosedPopup$).pipe(
            // tslint:disable-next-line:max-line-length
            // map(term =>
            //   term === '' ? [] : this.statesWithFlags.filter(v => v[this.searchBy].toLowerCase().indexOf(term.toLowerCase()) > -1).slice(0, 10)
            // )
            map((/**
             * @param {?} term
             * @return {?}
             */
            function (term) {
                // tslint:disable-next-line:max-line-length
                return term === ''
                    ? _this.statesWithFlags
                    : _this.statesWithFlags.filter((/**
                     * @param {?} v
                     * @return {?}
                     */
                    function (v) { return v[_this.searchBy].toLowerCase().indexOf(term.toLowerCase()) > -1; })).slice(0, 10);
            })));
            // tslint:disable-next-line:semicolon
        });
        this.propagateChange = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
    }
    /**
     * @return {?}
     */
    TypeaheadComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    TypeaheadComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.isClear) {
                _this.value = null;
                _this.model = _this.value;
            }
        }), 1);
    };
    /**
     * @return {?}
     */
    TypeaheadComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var apiT = _this.url(_this.UPLOAD_DIRECTIVE_API_URL, '');
            /** @type {?} */
            var requestHeaders = _this.UPLOAD_DIRECTIVE_HEADERS;
            _this.api.getAll(apiT, requestHeaders, _this.method).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.statesWithFlags = _this.resultTransformer(response);
            }));
            if (_this.value) {
                _this.model = _this.value;
            }
        }), 1);
    };
    /**
     * @param {?} val
     * @return {?}
     */
    TypeaheadComponent.prototype.filterData = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        var _this = this;
        if (typeof val !== 'object') {
            /** @type {?} */
            var api = this.url(this.UPLOAD_DIRECTIVE_API_URL, val);
            /** @type {?} */
            var requestHeaders = this.UPLOAD_DIRECTIVE_HEADERS;
            this.api.getAll(api, requestHeaders, this.method).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.statesWithFlags = _this.resultTransformer(response);
            }));
        }
        else {
            this.value = val;
        }
    };
    Object.defineProperty(TypeaheadComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this.propagateChange(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    TypeaheadComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== undefined) {
            this.value = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TypeaheadComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @return {?}
     */
    TypeaheadComponent.prototype.registerOnTouched = /**
     * @return {?}
     */
    function () { };
    TypeaheadComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'typeahead',
                    template: "<div>\n  <ng-template #rt let-r=\"result\" let-t=\"term\">\n    <ngb-highlight *ngFor=\"let i of keyName\" [result]=\"r[i]\" [term]=\"t\"></ngb-highlight>\n  </ng-template>\n  <input\n    id=\"rf-typeahead-template-{{ id }}\"\n    type=\"text\"\n    class=\"form-control\"\n    [(ngModel)]=\"model\"\n    [ngbTypeahead]=\"search\"\n    [resultTemplate]=\"rt\"\n    [inputFormatter]=\"fieldName\"\n    (ngModelChange)=\"filterData(model)\"\n    (focus)=\"focus$.next($event.target.value)\"\n    (click)=\"click$.next($event.target.value)\"\n    #instance=\"ngbTypeahead\"\n  />\n</div>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TypeaheadComponent; })),
                            multi: true
                        },
                        SelectionService
                    ],
                    styles: ["ngb-highlight{position:relative;margin-right:15px}ngb-highlight:after{position:absolute;content:'-';top:0;right:-10px}ngb-highlight:last-child:after{position:absolute;content:''}"]
                }] }
    ];
    /** @nocollapse */
    TypeaheadComponent.ctorParameters = function () { return [
        { type: SelectionService },
        { type: Injector }
    ]; };
    TypeaheadComponent.propDecorators = {
        _value: [{ type: Input }],
        id: [{ type: Input }],
        resultTransformer: [{ type: Input }],
        apiUpload: [{ type: Input }],
        keyName: [{ type: Input }],
        method: [{ type: Input }],
        fieldName: [{ type: Input }],
        searchBy: [{ type: Input }],
        isClear: [{ type: Input }],
        instance: [{ type: ViewChild, args: ['instance', {},] }]
    };
    return TypeaheadComponent;
}());
export { TypeaheadComponent };
if (false) {
    /** @type {?} */
    TypeaheadComponent.prototype._value;
    /** @type {?} */
    TypeaheadComponent.prototype.id;
    /** @type {?} */
    TypeaheadComponent.prototype.resultTransformer;
    /** @type {?} */
    TypeaheadComponent.prototype.apiUpload;
    /** @type {?} */
    TypeaheadComponent.prototype.keyName;
    /** @type {?} */
    TypeaheadComponent.prototype.method;
    /** @type {?} */
    TypeaheadComponent.prototype.fieldName;
    /** @type {?} */
    TypeaheadComponent.prototype.searchBy;
    /** @type {?} */
    TypeaheadComponent.prototype.isClear;
    /** @type {?} */
    TypeaheadComponent.prototype.instance;
    /** @type {?} */
    TypeaheadComponent.prototype.focus$;
    /** @type {?} */
    TypeaheadComponent.prototype.click$;
    /** @type {?} */
    TypeaheadComponent.prototype.statesWithFlags;
    /** @type {?} */
    TypeaheadComponent.prototype.model;
    /** @type {?} */
    TypeaheadComponent.prototype.UPLOAD_DIRECTIVE_HEADERS;
    /** @type {?} */
    TypeaheadComponent.prototype.UPLOAD_DIRECTIVE_API_URL;
    /** @type {?} */
    TypeaheadComponent.prototype.url;
    /** @type {?} */
    TypeaheadComponent.prototype.search;
    /** @type {?} */
    TypeaheadComponent.prototype.propagateChange;
    /**
     * @type {?}
     * @private
     */
    TypeaheadComponent.prototype.api;
    /**
     * @type {?}
     * @private
     */
    TypeaheadComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,