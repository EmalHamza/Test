/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/custom-selection/custom-selection.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as _ from 'lodash';
var CustomSelectionComponent = /** @class */ (function () {
    function CustomSelectionComponent(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.onChange = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
        this.disabled = false;
    }
    /**
     * @return {?}
     */
    CustomSelectionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    CustomSelectionComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.oldValue) {
                _this.selected = _.find(_this.options, (/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.value === _this.oldValue.value; }));
                _this._value = _this.oldValue;
                _this.onChange(_this._value);
            }
        }), 1);
    };
    /**
     * @return {?}
     */
    CustomSelectionComponent.prototype.triggerChanged = /**
     * @return {?}
     */
    function () {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var event = new CustomEvent('change', { bubbles: true });
        ((/** @type {?} */ (this.renderer))).invokeElementMethod(this.element.nativeElement, 'dispatchEvent', [event]);
    };
    /**
     * @param {?} val
     * @return {?}
     */
    CustomSelectionComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            this.value = val;
        }
    };
    Object.defineProperty(CustomSelectionComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.selected = _.find(this.options, (/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.value === val.value; }));
            this._value = val;
            this.onChange(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    CustomSelectionComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CustomSelectionComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    CustomSelectionComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @param {?} opt
     * @return {?}
     */
    CustomSelectionComponent.prototype.change = /**
     * @param {?} opt
     * @return {?}
     */
    function (opt) {
        this.value = opt;
        this.triggerChanged();
    };
    CustomSelectionComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'custom-selection',
                    template: "<div class=\"dropdown custom-selection\">\n  <button class=\"btn btn-default dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n    {{ selected === undefined ? '' : selected.label }}\n  </button>\n  <div class=\"dropdown-menu\">\n    <a class=\"dropdown-item\" *ngFor=\"let option of options\" (click)=\"change(option)\">{{ option.label }}</a>\n  </div>\n</div>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return CustomSelectionComponent; })),
                            multi: true
                        }
                    ],
                    styles: [".custom-selection .dropdown-menu .dropdown-item{cursor:pointer}"]
                }] }
    ];
    /** @nocollapse */
    CustomSelectionComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    CustomSelectionComponent.propDecorators = {
        _value: [{ type: Input }],
        options: [{ type: Input }],
        oldValue: [{ type: Input }]
    };
    return CustomSelectionComponent;
}());
export { CustomSelectionComponent };
if (false) {
    /** @type {?} */
    CustomSelectionComponent.prototype._value;
    /** @type {?} */
    CustomSelectionComponent.prototype.options;
    /** @type {?} */
    CustomSelectionComponent.prototype.oldValue;
    /** @type {?} */
    CustomSelectionComponent.prototype.selected;
    /**
     * @type {?}
     * @private
     */
    CustomSelectionComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    CustomSelectionComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    CustomSelectionComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    CustomSelectionComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    CustomSelectionComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXNlbGVjdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Admljb2RlcnMvcmVhY3RpdmUtZm9ybS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2N1c3RvbS1zZWxlY3Rpb24vY3VzdG9tLXNlbGVjdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDM0csT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sS0FBSyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBRTVCO0lBc0JFLGtDQUFvQixPQUFtQixFQUFVLFFBQW1CO1FBQWhELFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ2xFLElBQUksQ0FBQyxRQUFROzs7O1FBQUcsVUFBQyxHQUFRLElBQU0sQ0FBQyxDQUFBLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVM7OztRQUFHLGNBQU8sQ0FBQyxDQUFBLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQzs7OztJQUVELDJDQUFROzs7SUFBUixjQUFZLENBQUM7Ozs7SUFFYixrREFBZTs7O0lBQWY7UUFBQSxpQkFRQztRQVBDLFVBQVU7OztRQUFDO1lBQ1QsSUFBSSxLQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixLQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLE9BQU87Ozs7Z0JBQUUsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFsQyxDQUFrQyxFQUFDLENBQUM7Z0JBQ2pGLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFFBQVEsQ0FBQztnQkFDNUIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDNUI7UUFDSCxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7SUFDUixDQUFDOzs7O0lBRU0saURBQWM7OztJQUFyQjs7O1lBRU0sS0FBSyxHQUFHLElBQUksV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUN4RCxDQUFDLG1CQUFBLElBQUksQ0FBQyxRQUFRLEVBQU8sQ0FBQyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLGVBQWUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkcsQ0FBQzs7Ozs7SUFFRCw2Q0FBVTs7OztJQUFWLFVBQVcsR0FBUTtRQUNqQixJQUFJLEdBQUcsRUFBRTtZQUNQLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVELHNCQUFJLDJDQUFLOzs7O1FBQVQ7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQzs7Ozs7UUFFRCxVQUFVLEdBQUc7WUFDWCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87Ozs7WUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxLQUFLLEtBQUssR0FBRyxDQUFDLEtBQUssRUFBeEIsQ0FBd0IsRUFBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLENBQUM7OztPQU5BOzs7OztJQVFELG1EQUFnQjs7OztJQUFoQixVQUFpQixFQUFPO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBRUQsb0RBQWlCOzs7O0lBQWpCLFVBQWtCLEVBQU87UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7Ozs7SUFFRCxtREFBZ0I7Ozs7SUFBaEIsVUFBaUIsVUFBbUI7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFRCx5Q0FBTTs7OztJQUFOLFVBQU8sR0FBRztRQUNSLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDOztnQkE3RUYsU0FBUyxTQUFDOztvQkFFVCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixnYkFBZ0Q7b0JBRWhELFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSx3QkFBd0IsRUFBeEIsQ0FBd0IsRUFBQzs0QkFDdkQsS0FBSyxFQUFFLElBQUk7eUJBQ1o7cUJBQ0Y7O2lCQUNGOzs7O2dCQWhCOEMsVUFBVTtnQkFBRSxTQUFTOzs7eUJBa0JqRSxLQUFLOzBCQUNMLEtBQUs7MkJBQ0wsS0FBSzs7SUE4RFIsK0JBQUM7Q0FBQSxBQTlFRCxJQThFQztTQWpFWSx3QkFBd0I7OztJQUNuQywwQ0FBZ0I7O0lBQ2hCLDJDQUF3Qjs7SUFDeEIsNENBQWtCOztJQUNsQiw0Q0FBZ0I7Ozs7O0lBQ2hCLDRDQUEwQjs7Ozs7SUFDMUIsNENBQTJCOzs7OztJQUMzQiw2Q0FBNEI7Ozs7O0lBRWhCLDJDQUEyQjs7Ozs7SUFBRSw0Q0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIGZvcndhcmRSZWYsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ2N1c3RvbS1zZWxlY3Rpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vY3VzdG9tLXNlbGVjdGlvbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2N1c3RvbS1zZWxlY3Rpb24uY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBDdXN0b21TZWxlY3Rpb25Db21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQ3VzdG9tU2VsZWN0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIEBJbnB1dCgpIF92YWx1ZTtcbiAgQElucHV0KCkgb3B0aW9uczogYW55W107XG4gIEBJbnB1dCgpIG9sZFZhbHVlO1xuICBwdWJsaWMgc2VsZWN0ZWQ7XG4gIHByaXZhdGUgZGlzYWJsZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgb25DaGFuZ2U6IEZ1bmN0aW9uO1xuICBwcml2YXRlIG9uVG91Y2hlZDogRnVuY3Rpb247XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gKHZhbDogYW55KSA9PiB7fTtcbiAgICB0aGlzLm9uVG91Y2hlZCA9ICgpID0+IHt9O1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5vbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkID0gXy5maW5kKHRoaXMub3B0aW9ucywgaXRlbSA9PiBpdGVtLnZhbHVlID09PSB0aGlzLm9sZFZhbHVlLnZhbHVlKTtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLm9sZFZhbHVlO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9LCAxKTtcbiAgfVxuXG4gIHB1YmxpYyB0cmlnZ2VyQ2hhbmdlZCgpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWNvbnN0XG4gICAgbGV0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdjaGFuZ2UnLCB7IGJ1YmJsZXM6IHRydWUgfSk7XG4gICAgKHRoaXMucmVuZGVyZXIgYXMgYW55KS5pbnZva2VFbGVtZW50TWV0aG9kKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LCAnZGlzcGF0Y2hFdmVudCcsIFtldmVudF0pO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWw6IGFueSk6IHZvaWQge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2YWwpIHtcbiAgICB0aGlzLnNlbGVjdGVkID0gXy5maW5kKHRoaXMub3B0aW9ucywgaXRlbSA9PiBpdGVtLnZhbHVlID09PSB2YWwudmFsdWUpO1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsO1xuICAgIHRoaXMub25DaGFuZ2UodGhpcy5fdmFsdWUpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgfVxuXG4gIGNoYW5nZShvcHQpIHtcbiAgICB0aGlzLnZhbHVlID0gb3B0O1xuICAgIHRoaXMudHJpZ2dlckNoYW5nZWQoKTtcbiAgfVxufVxuIl19