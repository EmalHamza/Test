/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/captcha/captcha.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var CaptchaComponent = /** @class */ (function () {
    function CaptchaComponent() {
        this._captchaData = {
            value: '',
            code: ''
        };
        this.propagateChange = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
    }
    /**
     * @return {?}
     */
    CaptchaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    CaptchaComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.captchaData = tslib_1.__assign({}, _this.captchaData, { code: _this.random() });
        }), 1);
    };
    Object.defineProperty(CaptchaComponent.prototype, "captchaData", {
        get: /**
         * @return {?}
         */
        function () {
            return this._captchaData;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._captchaData = val;
            this.propagateChange(this._captchaData);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    CaptchaComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== undefined) {
            this.captchaData = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CaptchaComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @return {?}
     */
    CaptchaComponent.prototype.registerOnTouched = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    CaptchaComponent.prototype.randIntWithZero = /**
     * @return {?}
     */
    function () {
        return Math.floor(Math.random() * 10);
    };
    /**
     * @return {?}
     */
    CaptchaComponent.prototype.random = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var code = '';
        /** @type {?} */
        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        if (this.type === 'number') {
            characters = '0123456789';
            // for (let i = 0; i < this.numberOfChar; i++) {
            //   code += this.randIntWithZero();
            // }
        }
        else if (this.type === 'alphabet') {
            characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        }
        /** @type {?} */
        var charactersLength = characters.length;
        for (var i = 0; i < this.numberOfChar; i++) {
            code += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return code;
    };
    /**
     * @return {?}
     */
    CaptchaComponent.prototype.randomCode = /**
     * @return {?}
     */
    function () {
        this.captchaData = tslib_1.__assign({}, this.captchaData, { code: this.random() });
    };
    CaptchaComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'captcha',
                    template: "<div class=\"captch--rform\">\n  <input class=\"form-control captch--controll\" maxlength=\"{{ numberOfChar }}\" type=\"text\" [(ngModel)]=\"captchaData.value\" />\n  <span *ngIf=\"captchaData.code\">{{ captchaData.code }}</span>\n  <button type=\"button\" (click)=\"randomCode()\"><i class=\"fa fa-refresh\" aria-hidden=\"true\"></i></button>\n  <p class=\"rf__captcha--error\" *ngIf=\"!captchaCorrect\">{{ message }}</p>\n</div>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return CaptchaComponent; })),
                            multi: true
                        }
                    ],
                    styles: [".captch--rform span{font-family:lato;font-weight:700;letter-spacing:2px;font-style:italic;margin:0 15px}.captch--rform button{cursor:pointer}.captch--rform .captch--controll{display:inline-block;width:200px}.captch--rform .rf__captcha--error{margin-top:15px;color:#e74c3c;font-size:15px}"]
                }] }
    ];
    /** @nocollapse */
    CaptchaComponent.ctorParameters = function () { return []; };
    CaptchaComponent.propDecorators = {
        _captchaData: [{ type: Input }],
        numberOfChar: [{ type: Input }],
        type: [{ type: Input }],
        captchaCorrect: [{ type: Input }],
        message: [{ type: Input }]
    };
    return CaptchaComponent;
}());
export { CaptchaComponent };
if (false) {
    /** @type {?} */
    CaptchaComponent.prototype._captchaData;
    /** @type {?} */
    CaptchaComponent.prototype.numberOfChar;
    /** @type {?} */
    CaptchaComponent.prototype.type;
    /** @type {?} */
    CaptchaComponent.prototype.captchaCorrect;
    /** @type {?} */
    CaptchaComponent.prototype.message;
    /** @type {?} */
    CaptchaComponent.prototype.propagateChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwdGNoYS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Admljb2RlcnMvcmVhY3RpdmUtZm9ybS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2NhcHRjaGEvY2FwdGNoYS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxVQUFVLEVBQUUsS0FBSyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRixPQUFPLEVBQUUsaUJBQWlCLEVBQXdCLE1BQU0sZ0JBQWdCLENBQUM7QUFFekU7SUF1QkU7UUFUUyxpQkFBWSxHQUFHO1lBQ3RCLEtBQUssRUFBRSxFQUFFO1lBQ1QsSUFBSSxFQUFFLEVBQUU7U0FDVCxDQUFDO1FBY0Ysb0JBQWU7Ozs7UUFBRyxVQUFDLEdBQVEsSUFBTSxDQUFDLEVBQUM7SUFScEIsQ0FBQzs7OztJQUVoQixtQ0FBUTs7O0lBQVIsY0FBWSxDQUFDOzs7O0lBQ2IsMENBQWU7OztJQUFmO1FBQUEsaUJBSUM7UUFIQyxVQUFVOzs7UUFBQztZQUNULEtBQUksQ0FBQyxXQUFXLHdCQUFRLEtBQUksQ0FBQyxXQUFXLElBQUUsSUFBSSxFQUFFLEtBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRSxDQUFDO1FBQ2xFLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7SUFHRCxzQkFBSSx5Q0FBVzs7OztRQUFmO1lBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzNCLENBQUM7Ozs7O1FBRUQsVUFBZ0IsR0FBRztZQUNqQixJQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQztZQUN4QixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMxQyxDQUFDOzs7T0FMQTs7Ozs7SUFPRCxxQ0FBVTs7OztJQUFWLFVBQVcsS0FBVTtRQUNuQixJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7U0FDMUI7SUFDSCxDQUFDOzs7OztJQUVELDJDQUFnQjs7OztJQUFoQixVQUFpQixFQUFFO1FBQ2pCLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCw0Q0FBaUI7OztJQUFqQixjQUFxQixDQUFDOzs7O0lBRXRCLDBDQUFlOzs7SUFBZjtRQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7OztJQUVELGlDQUFNOzs7SUFBTjs7WUFDTSxJQUFJLEdBQUcsRUFBRTs7WUFDVCxVQUFVLEdBQUcsZ0VBQWdFO1FBQ2pGLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDMUIsVUFBVSxHQUFHLFlBQVksQ0FBQztZQUMxQixnREFBZ0Q7WUFDaEQsb0NBQW9DO1lBQ3BDLElBQUk7U0FDTDthQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7WUFDbkMsVUFBVSxHQUFHLHNEQUFzRCxDQUFDO1NBQ3JFOztZQUNLLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxNQUFNO1FBQzFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFDLElBQUksSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQztTQUN6RTtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7OztJQUVELHFDQUFVOzs7SUFBVjtRQUNFLElBQUksQ0FBQyxXQUFXLHdCQUFRLElBQUksQ0FBQyxXQUFXLElBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRSxDQUFDO0lBQ2xFLENBQUM7O2dCQTlFRixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSxTQUFTO29CQUNuQiw0YkFBdUM7b0JBRXZDLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSxnQkFBZ0IsRUFBaEIsQ0FBZ0IsRUFBQzs0QkFDL0MsS0FBSyxFQUFFLElBQUk7eUJBQ1o7cUJBQ0Y7O2lCQUNGOzs7OzsrQkFFRSxLQUFLOytCQUlMLEtBQUs7dUJBQ0wsS0FBSztpQ0FDTCxLQUFLOzBCQUNMLEtBQUs7O0lBMERSLHVCQUFDO0NBQUEsQUEvRUQsSUErRUM7U0FsRVksZ0JBQWdCOzs7SUFDM0Isd0NBR0U7O0lBQ0Ysd0NBQThCOztJQUM5QixnQ0FBc0I7O0lBQ3RCLDBDQUFpQzs7SUFDakMsbUNBQXlCOztJQVV6QiwyQ0FBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgZm9yd2FyZFJlZiwgSW5wdXQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdjYXB0Y2hhJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NhcHRjaGEuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9jYXB0Y2hhLmNvbXBvbmVudC5jc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBDYXB0Y2hhQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIENhcHRjaGFDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgQElucHV0KCkgX2NhcHRjaGFEYXRhID0ge1xuICAgIHZhbHVlOiAnJyxcbiAgICBjb2RlOiAnJ1xuICB9O1xuICBASW5wdXQoKSBudW1iZXJPZkNoYXI6IE51bWJlcjtcbiAgQElucHV0KCkgdHlwZTogU3RyaW5nO1xuICBASW5wdXQoKSBjYXB0Y2hhQ29ycmVjdDogQm9vbGVhbjtcbiAgQElucHV0KCkgbWVzc2FnZTogU3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ09uSW5pdCgpIHt9XG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuY2FwdGNoYURhdGEgPSB7IC4uLnRoaXMuY2FwdGNoYURhdGEsIGNvZGU6IHRoaXMucmFuZG9tKCkgfTtcbiAgICB9LCAxKTtcbiAgfVxuICBwcm9wYWdhdGVDaGFuZ2UgPSAodmFsOiBhbnkpID0+IHt9O1xuXG4gIGdldCBjYXB0Y2hhRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FwdGNoYURhdGE7XG4gIH1cblxuICBzZXQgY2FwdGNoYURhdGEodmFsKSB7XG4gICAgdGhpcy5fY2FwdGNoYURhdGEgPSB2YWw7XG4gICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UodGhpcy5fY2FwdGNoYURhdGEpO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuY2FwdGNoYURhdGEgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuKSB7XG4gICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKCkge31cblxuICByYW5kSW50V2l0aFplcm8oKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgfVxuXG4gIHJhbmRvbSgpIHtcbiAgICBsZXQgY29kZSA9ICcnO1xuICAgIGxldCBjaGFyYWN0ZXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcbiAgICBpZiAodGhpcy50eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgY2hhcmFjdGVycyA9ICcwMTIzNDU2Nzg5JztcbiAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5udW1iZXJPZkNoYXI7IGkrKykge1xuICAgICAgLy8gICBjb2RlICs9IHRoaXMucmFuZEludFdpdGhaZXJvKCk7XG4gICAgICAvLyB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT09ICdhbHBoYWJldCcpIHtcbiAgICAgIGNoYXJhY3RlcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eic7XG4gICAgfVxuICAgIGNvbnN0IGNoYXJhY3RlcnNMZW5ndGggPSBjaGFyYWN0ZXJzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtYmVyT2ZDaGFyOyBpKyspIHtcbiAgICAgIGNvZGUgKz0gY2hhcmFjdGVycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVyc0xlbmd0aCkpO1xuICAgIH1cbiAgICByZXR1cm4gY29kZTtcbiAgfVxuXG4gIHJhbmRvbUNvZGUoKSB7XG4gICAgdGhpcy5jYXB0Y2hhRGF0YSA9IHsgLi4udGhpcy5jYXB0Y2hhRGF0YSwgY29kZTogdGhpcy5yYW5kb20oKSB9O1xuICB9XG59XG4iXX0=