/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/typeahead-without-api/typeahead.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input, ViewChild } from '@angular/core';
import { SelectionService } from '../selection-by-api/selection-by-api';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NgbTypeahead } from '@ng-bootstrap/ng-bootstrap';
import { Subject, merge } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map } from 'rxjs/operators';
var TypeaheadWithoutApiComponent = /** @class */ (function () {
    function TypeaheadWithoutApiComponent() {
        var _this = this;
        this.states = [];
        this.focus$ = new Subject();
        this.click$ = new Subject();
        this.formatter = (/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.label; });
        this.search = (/**
         * @param {?} text$
         * @return {?}
         */
        function (text$) {
            /** @type {?} */
            var debouncedText$ = text$.pipe(debounceTime(200), distinctUntilChanged());
            /** @type {?} */
            var clicksWithClosedPopup$ = _this.click$.pipe(filter((/**
             * @return {?}
             */
            function () { return !_this.instance.isPopupOpen(); })));
            /** @type {?} */
            var inputFocus$ = _this.focus$;
            return merge(debouncedText$, inputFocus$, clicksWithClosedPopup$).pipe(
            // tslint:disable-next-line:max-line-length
            map((/**
             * @param {?} term
             * @return {?}
             */
            function (term) {
                return (term === '' ? _this.states : _this.states.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return v.label.toLowerCase().indexOf(term.toLowerCase()) > -1; }))).slice(0, 10);
            })));
            // tslint:disable-next-line:semicolon
        });
        this.propagateChange = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
    }
    /**
     * @return {?}
     */
    TypeaheadWithoutApiComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    TypeaheadWithoutApiComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.isClear) {
                _this.value = null;
                _this.model = _this.value;
            }
        }), 1);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    TypeaheadWithoutApiComponent.prototype.filterData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (typeof data === 'object') {
            this.value = data;
        }
    };
    /**
     * @return {?}
     */
    TypeaheadWithoutApiComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.states = _this.options;
            if (_this.value) {
                _this.model = _this.value;
            }
        }), 1);
    };
    Object.defineProperty(TypeaheadWithoutApiComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this.propagateChange(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    TypeaheadWithoutApiComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== undefined) {
            this.value = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TypeaheadWithoutApiComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @return {?}
     */
    TypeaheadWithoutApiComponent.prototype.registerOnTouched = /**
     * @return {?}
     */
    function () { };
    TypeaheadWithoutApiComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'typeahead-without-api',
                    template: "<div>\n  <ng-template #rt let-r=\"result\" let-t=\"term\">\n    <ngb-highlight [result]=\"r.label\" [term]=\"t\"></ngb-highlight>\n  </ng-template>\n  <input\n    [resultTemplate]=\"rt\"\n    [inputFormatter]=\"formatter\"\n    id=\"typeahead-focus-{{ id }}\"\n    type=\"text\"\n    class=\"form-control\"\n    [(ngModel)]=\"model\"\n    [ngbTypeahead]=\"search\"\n    (focus)=\"focus$.next($event.target.value)\"\n    (click)=\"click$.next($event.target.value)\"\n    #instance=\"ngbTypeahead\"\n    (ngModelChange)=\"filterData(model)\"\n  />\n</div>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TypeaheadWithoutApiComponent; })),
                            multi: true
                        },
                        SelectionService
                    ],
                    styles: ["ngb-highlight{position:relative;margin-right:15px}ngb-highlight:after{position:absolute;content:'-';top:0;right:-10px}ngb-highlight:last-child:after{position:absolute;content:''}"]
                }] }
    ];
    /** @nocollapse */
    TypeaheadWithoutApiComponent.ctorParameters = function () { return []; };
    TypeaheadWithoutApiComponent.propDecorators = {
        _value: [{ type: Input }],
        id: [{ type: Input }],
        options: [{ type: Input }],
        isClear: [{ type: Input }],
        instance: [{ type: ViewChild, args: ['instance', {},] }]
    };
    return TypeaheadWithoutApiComponent;
}());
export { TypeaheadWithoutApiComponent };
if (false) {
    /** @type {?} */
    TypeaheadWithoutApiComponent.prototype._value;
    /** @type {?} */
    TypeaheadWithoutApiComponent.prototype.id;
    /** @type {?} */
    TypeaheadWithoutApiComponent.prototype.options;
    /** @type {?} */
    TypeaheadWithoutApiComponent.prototype.isClear;
    /** @type {?} */
    TypeaheadWithoutApiComponent.prototype.states;
    /** @type {?} */
    TypeaheadWithoutApiComponent.prototype.model;
    /** @type {?} */
    TypeaheadWithoutApiComponent.prototype.instance;
    /** @type {?} */
    TypeaheadWithoutApiComponent.prototype.focus$;
    /** @type {?} */
    TypeaheadWithoutApiComponent.prototype.click$;
    /** @type {?} */
    TypeaheadWithoutApiComponent.prototype.formatter;
    /** @type {?} */
    TypeaheadWithoutApiComponent.prototype.search;
    /** @type {?} */
    TypeaheadWithoutApiComponent.prototype.propagateChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWFoZWFkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2aWNvZGVycy9yZWFjdGl2ZS1mb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvdHlwZWFoZWFkLXdpdGhvdXQtYXBpL3R5cGVhaGVhZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFVBQVUsRUFBRSxLQUFLLEVBQWlCLFNBQVMsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUMxRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN4RSxPQUFPLEVBQUUsaUJBQWlCLEVBQXdCLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzFELE9BQU8sRUFBRSxPQUFPLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWpGO0lBK0NFO1FBQUEsaUJBQWdCO1FBMUJoQixXQUFNLEdBQVEsRUFBRSxDQUFDO1FBS2pCLFdBQU0sR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO1FBQy9CLFdBQU0sR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO1FBQy9CLGNBQVM7Ozs7UUFBRyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxLQUFLLEVBQVAsQ0FBTyxFQUFDO1FBRXpCLFdBQU07Ozs7UUFBRyxVQUFDLEtBQXlCOztnQkFDM0IsY0FBYyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQy9CLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDakIsb0JBQW9CLEVBQUUsQ0FDdkI7O2dCQUNLLHNCQUFzQixHQUFHLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07OztZQUFDLGNBQU0sT0FBQSxD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Ozs7O3lCQUVFLEtBQUs7cUJBQ0wsS0FBSzswQkFDTCxLQUFLOzBCQUNMLEtBQUs7MkJBT0wsU0FBUyxTQUFDLFVBQVUsRUFBRSxFQUFFOztJQXdFM0IsbUNBQUM7Q0FBQSxBQWpHRCxJQWlHQztTQW5GWSw0QkFBNEI7OztJQUN2Qyw4Q0FBZ0I7O0lBQ2hCLDBDQUFZOztJQUNaLCtDQUFpQjs7SUFDakIsK0NBQ2lCOztJQUVqQiw4Q0FBaUI7O0lBRWpCLDZDQUFXOztJQUVYLGdEQUFrRDs7SUFDbEQsOENBQStCOztJQUMvQiw4Q0FBK0I7O0lBQy9CLGlEQUF5Qjs7SUFFekIsOENBZUU7O0lBR0YsdURBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIGZvcndhcmRSZWYsIElucHV0LCBBZnRlclZpZXdJbml0LCBWaWV3Q2hpbGQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2VsZWN0aW9uU2VydmljZSB9IGZyb20gJy4uL3NlbGVjdGlvbi1ieS1hcGkvc2VsZWN0aW9uLWJ5LWFwaSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBOZ2JUeXBlYWhlYWQgfSBmcm9tICdAbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcCc7XG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlLCBtZXJnZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAndHlwZWFoZWFkLXdpdGhvdXQtYXBpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3R5cGVhaGVhZC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3R5cGVhaGVhZC5jb21wb25lbnQuY3NzJ10sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVHlwZWFoZWFkV2l0aG91dEFwaUNvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH0sXG4gICAgU2VsZWN0aW9uU2VydmljZVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFR5cGVhaGVhZFdpdGhvdXRBcGlDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBfdmFsdWU7XG4gIEBJbnB1dCgpIGlkO1xuICBASW5wdXQoKSBvcHRpb25zO1xuICBASW5wdXQoKVxuICBpc0NsZWFyOiBCb29sZWFuO1xuXG4gIHN0YXRlczogYW55ID0gW107XG5cbiAgbW9kZWw6IGFueTtcblxuICBAVmlld0NoaWxkKCdpbnN0YW5jZScsIHt9KSBpbnN0YW5jZTogTmdiVHlwZWFoZWFkO1xuICBmb2N1cyQgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XG4gIGNsaWNrJCA9IG5ldyBTdWJqZWN0PHN0cmluZz4oKTtcbiAgZm9ybWF0dGVyID0geCA9PiB4LmxhYmVsO1xuXG4gIHNlYXJjaCA9ICh0ZXh0JDogT2JzZXJ2YWJsZTxzdHJpbmc+KSA9PiB7XG4gICAgY29uc3QgZGVib3VuY2VkVGV4dCQgPSB0ZXh0JC5waXBlKFxuICAgICAgZGVib3VuY2VUaW1lKDIwMCksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICAgKTtcbiAgICBjb25zdCBjbGlja3NXaXRoQ2xvc2VkUG9wdXAkID0gdGhpcy5jbGljayQucGlwZShmaWx0ZXIoKCkgPT4gIXRoaXMuaW5zdGFuY2UuaXNQb3B1cE9wZW4oKSkpO1xuICAgIGNvbnN0IGlucHV0Rm9jdXMkID0gdGhpcy5mb2N1cyQ7XG5cbiAgICByZXR1cm4gbWVyZ2UoZGVib3VuY2VkVGV4dCQsIGlucHV0Rm9jdXMkLCBjbGlja3NXaXRoQ2xvc2VkUG9wdXAkKS5waXBlKFxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgICAgbWFwKHRlcm0gPT5cbiAgICAgICAgKHRlcm0gPT09ICcnID8gdGhpcy5zdGF0ZXMgOiB0aGlzLnN0YXRlcy5maWx0ZXIodiA9PiB2LmxhYmVsLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0ZXJtLnRvTG93ZXJDYXNlKCkpID4gLTEpKS5zbGljZSgwLCAxMClcbiAgICAgIClcbiAgICApO1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzZW1pY29sb25cbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG4gIHByb3BhZ2F0ZUNoYW5nZSA9ICh2YWw6IGFueSkgPT4ge307XG5cbiAgbmdPbkluaXQoKSB7fVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNDbGVhcikge1xuICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgICAgdGhpcy5tb2RlbCA9IHRoaXMudmFsdWU7XG4gICAgICB9XG4gICAgfSwgMSk7XG4gIH1cblxuXG4gIGZpbHRlckRhdGEoZGF0YSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuc3RhdGVzID0gdGhpcy5vcHRpb25zO1xuICAgICAgaWYgKHRoaXMudmFsdWUpIHtcbiAgICAgICAgdGhpcy5tb2RlbCA9IHRoaXMudmFsdWU7XG4gICAgICB9XG4gICAgfSwgMSk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbCkge1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsO1xuICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlKHRoaXMuX3ZhbHVlKTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbikge1xuICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZCgpIHt9XG59XG5cbi8vIGh0dHBzOi8vbmctYm9vdHN0cmFwLmdpdGh1Yi5pby8jL2NvbXBvbmVudHMvdHlwZWFoZWFkL2V4YW1wbGVzXG4iXX0=