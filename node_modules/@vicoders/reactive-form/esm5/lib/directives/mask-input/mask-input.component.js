/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/mask-input/mask-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var MaskInputComponent = /** @class */ (function () {
    function MaskInputComponent(element) {
        this.element = element;
        this.myModel = '';
        this.onChange = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    MaskInputComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            this.value = val;
        }
    };
    Object.defineProperty(MaskInputComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this.onChange(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    MaskInputComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MaskInputComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    MaskInputComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @return {?}
     */
    MaskInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    MaskInputComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isClear === true) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.value) {
                    _this.value = null;
                    _this.myModel = _this.value;
                }
            }), 1);
        }
    };
    /**
     * @return {?}
     */
    MaskInputComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.value) {
                _this.myModel = _this.value;
            }
        }), 1);
    };
    /**
     * @return {?}
     */
    MaskInputComponent.prototype.change = /**
     * @return {?}
     */
    function () {
        if (this.valueWithCharacter === true) {
            // tslint:disable-next-line:semicolon
            this.value = this.myModel;
        }
        else {
            this.value = this.myModel.replace(/\D+/g, '');
        }
    };
    MaskInputComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'mask-input',
                    template: "<input [attr.disabled]=\"isDisabled\" class=\"form-control\" placeholder=\"{{placeholder}}\" [textMask]=\"{mask: inputMaskText, guide: guide}\" (change)=\"change()\" [(ngModel)]=\"myModel\" type=\"text\"/>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return MaskInputComponent; })),
                            multi: true
                        }
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MaskInputComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MaskInputComponent.propDecorators = {
        inputMaskText: [{ type: Input }],
        guide: [{ type: Input }],
        _value: [{ type: Input }],
        valueWithCharacter: [{ type: Input }],
        placeholder: [{ type: Input }],
        isClear: [{ type: Input }],
        isDisabled: [{ type: Input }]
    };
    return MaskInputComponent;
}());
export { MaskInputComponent };
if (false) {
    /** @type {?} */
    MaskInputComponent.prototype.inputMaskText;
    /** @type {?} */
    MaskInputComponent.prototype.guide;
    /** @type {?} */
    MaskInputComponent.prototype._value;
    /** @type {?} */
    MaskInputComponent.prototype.valueWithCharacter;
    /** @type {?} */
    MaskInputComponent.prototype.placeholder;
    /** @type {?} */
    MaskInputComponent.prototype.isClear;
    /** @type {?} */
    MaskInputComponent.prototype.isDisabled;
    /** @type {?} */
    MaskInputComponent.prototype.myModel;
    /** @type {?} */
    MaskInputComponent.prototype.selected;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    MaskInputComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Admljb2RlcnMvcmVhY3RpdmUtZm9ybS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL21hc2staW5wdXQvbWFzay1pbnB1dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUMzRyxPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHekU7SUEyQkUsNEJBQW9CLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFMaEMsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQU1sQixJQUFJLENBQUMsUUFBUTs7OztRQUFHLFVBQUMsR0FBUSxJQUFNLENBQUMsQ0FBQSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxTQUFTOzs7UUFBRyxjQUFPLENBQUMsQ0FBQSxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBRUQsdUNBQVU7Ozs7SUFBVixVQUFXLEdBQVE7UUFDakIsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztTQUNsQjtJQUNILENBQUM7SUFFRCxzQkFBSSxxQ0FBSzs7OztRQUFUO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7Ozs7O1FBRUQsVUFBVSxHQUFHO1lBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7WUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0IsQ0FBQzs7O09BTEE7Ozs7O0lBTUQsNkNBQWdCOzs7O0lBQWhCLFVBQWlCLEVBQU87UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCw4Q0FBaUI7Ozs7SUFBakIsVUFBa0IsRUFBTztRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs7OztJQUVELDZDQUFnQjs7OztJQUFoQixVQUFpQixVQUFtQjtRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztJQUM3QixDQUFDOzs7O0lBRUQscUNBQVE7OztJQUFSLGNBQVksQ0FBQzs7OztJQUViLHdDQUFXOzs7SUFBWDtRQUFBLGlCQVNDO1FBUkMsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtZQUN6QixVQUFVOzs7WUFBQztnQkFDVCxJQUFJLEtBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ2QsS0FBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7b0JBQ2xCLEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSSxDQUFDLEtBQUssQ0FBQztpQkFDM0I7WUFDSCxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7U0FDUDtJQUNILENBQUM7Ozs7SUFFRCw0Q0FBZTs7O0lBQWY7UUFBQSxpQkFNQztRQUxDLFVBQVU7OztRQUFDO1lBQ1QsSUFBSSxLQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNkLEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSSxDQUFDLEtBQUssQ0FBQzthQUMzQjtRQUNILENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7Ozs7SUFDRCxtQ0FBTTs7O0lBQU47UUFDRSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsS0FBSyxJQUFJLEVBQUU7WUFDcEMscUNBQXFDO1lBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUMzQjthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDL0M7SUFDSCxDQUFDOztnQkF0RkYsU0FBUyxTQUFDOztvQkFFVCxRQUFRLEVBQUUsWUFBWTtvQkFDdEIsMk5BQTBDO29CQUUxQyxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEsa0JBQWtCLEVBQWxCLENBQWtCLEVBQUM7NEJBQ2pELEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUNGOztpQkFDRjs7OztnQkFoQjhDLFVBQVU7OztnQ0FtQnRELEtBQUs7d0JBQ0wsS0FBSzt5QkFDTCxLQUFLO3FDQUNMLEtBQUs7OEJBQ0wsS0FBSzswQkFDTCxLQUFLOzZCQUNMLEtBQUs7O0lBb0VSLHlCQUFDO0NBQUEsQUF6RkQsSUF5RkM7U0E1RVksa0JBQWtCOzs7SUFFN0IsMkNBQXVCOztJQUN2QixtQ0FBd0I7O0lBQ3hCLG9DQUF3Qjs7SUFDeEIsZ0RBQXFDOztJQUNyQyx5Q0FBNkI7O0lBQzdCLHFDQUEwQjs7SUFDMUIsd0NBQTZCOztJQUM3QixxQ0FBb0I7O0lBQ3BCLHNDQUFnQjs7Ozs7SUFDaEIsc0NBQTBCOzs7OztJQUMxQixzQ0FBMkI7Ozs7O0lBQzNCLHVDQUE0Qjs7Ozs7SUFDaEIscUNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBmb3J3YXJkUmVmLCBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdtYXNrLWlucHV0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL21hc2staW5wdXQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9tYXNrLWlucHV0LmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTWFza0lucHV0Q29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE1hc2tJbnB1dENvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XG4gIC8vIEBJbnB1dCgpIGlucHV0TWFza1RleHQ6IFtdO1xuICBASW5wdXQoKSBpbnB1dE1hc2tUZXh0O1xuICBASW5wdXQoKSBndWlkZTogYm9vbGVhbjtcbiAgQElucHV0KCkgX3ZhbHVlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHZhbHVlV2l0aENoYXJhY3RlcjogYm9vbGVhbjtcbiAgQElucHV0KCkgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgQElucHV0KCkgaXNDbGVhcjogQm9vbGVhbjtcbiAgQElucHV0KCkgaXNEaXNhYmxlZDogQm9vbGVhbjtcbiAgcHVibGljIG15TW9kZWwgPSAnJztcbiAgcHVibGljIHNlbGVjdGVkO1xuICBwcml2YXRlIGRpc2FibGVkOiBib29sZWFuO1xuICBwcml2YXRlIG9uQ2hhbmdlOiBGdW5jdGlvbjtcbiAgcHJpdmF0ZSBvblRvdWNoZWQ6IEZ1bmN0aW9uO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gKHZhbDogYW55KSA9PiB7fTtcbiAgICB0aGlzLm9uVG91Y2hlZCA9ICgpID0+IHt9O1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsKSB7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWw7XG4gICAgdGhpcy5vbkNoYW5nZSh0aGlzLl92YWx1ZSk7XG4gIH1cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge31cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICBpZiAodGhpcy5pc0NsZWFyID09PSB0cnVlKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgICAgICB0aGlzLm15TW9kZWwgPSB0aGlzLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LCAxKTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy52YWx1ZSkge1xuICAgICAgICB0aGlzLm15TW9kZWwgPSB0aGlzLnZhbHVlO1xuICAgICAgfVxuICAgIH0sIDEpO1xuICB9XG4gIGNoYW5nZSgpIHtcbiAgICBpZiAodGhpcy52YWx1ZVdpdGhDaGFyYWN0ZXIgPT09IHRydWUpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzZW1pY29sb25cbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm15TW9kZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm15TW9kZWwucmVwbGFjZSgvXFxEKy9nLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RleHQtbWFzay90ZXh0LW1hc2svYmxvYi9tYXN0ZXIvY29tcG9uZW50RG9jdW1lbnRhdGlvbi5tZCNyZWFkbWVcbn1cbiJdfQ==