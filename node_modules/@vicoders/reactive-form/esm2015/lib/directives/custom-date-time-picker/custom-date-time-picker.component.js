/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/custom-date-time-picker/custom-date-time-picker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class CustomDateTimePickerComponent {
    /**
     * @param {?} cdRef
     * @param {?} element
     */
    constructor(cdRef, element) {
        this.cdRef = cdRef;
        this.element = element;
        this.onChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            this.value = val;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.onChange(this._value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.isClear === true) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.value = null;
            }), 1);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.en = {
            firstDayOfWeek: 0,
            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
            // tslint:disable-next-line:max-line-length
            monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            today: 'Today',
            clear: 'Clear'
        };
        this.tr = {
            firstDayOfWeek: 1
        };
        /** @type {?} */
        const today = new Date();
        /** @type {?} */
        const month = today.getMonth();
        /** @type {?} */
        const year = today.getFullYear();
        /** @type {?} */
        const prevMonth = month === 0 ? 11 : month - 1;
        /** @type {?} */
        const prevYear = prevMonth === 11 ? year - 1 : year;
        /** @type {?} */
        const nextMonth = month === 11 ? 0 : month + 1;
        /** @type {?} */
        const nextYear = nextMonth === 0 ? year + 1 : year;
        // this.minDate = new Date('11/05/2018');
        // this.minDate.setMonth(prevMonth);
        // this.minDate.setFullYear(prevYear);
        // this.maxDate = new Date('11/10/2018');
        // this.maxDate.setMonth(nextMonth);
        // this.maxDate.setFullYear(nextYear);
        /** @type {?} */
        const invalidDate = new Date();
        invalidDate.setDate(today.getDate() - 1);
        this.invalidDates = [today, invalidDate];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    change(value) {
        this.value = value;
    }
}
CustomDateTimePickerComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'custom-date-time-picker',
                template: "<p-calendar\n  [(ngModel)]=\"value\"\n  [showIcon]=\"showIcon\"\n  [monthNavigator]=\"monthNavigator\"\n  [yearNavigator]=\"yearNavigator\"\n  yearRange=\"{{yearRange}}\"\n  [showTime]=\"showTime\"\n  [timeOnly]=\"timeOnly\"\n  dateFormat=\"{{dateFormat}}\"\n  (onSelect)=\"change(value)\"\n  [disabled]=\"isDisabled\"\n  showButtonBar=\"true\"\n  [minDate]=\"minDate\"\n  [maxDate]=\"maxDate\"\n>\n</p-calendar>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => CustomDateTimePickerComponent)),
                        multi: true
                    }
                ],
                styles: [".reset-button{border-radius:3px;color:#fff;font-size:12px;padding:5px 10px;background-color:brown;display:inline;border:none;cursor:pointer}.reset-button:hover{background-color:#7c2020}"]
            }] }
];
/** @nocollapse */
CustomDateTimePickerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
CustomDateTimePickerComponent.propDecorators = {
    _value: [{ type: Input }],
    showIcon: [{ type: Input }],
    monthNavigator: [{ type: Input }],
    yearNavigator: [{ type: Input }],
    yearRange: [{ type: Input }],
    showTime: [{ type: Input }],
    timeOnly: [{ type: Input }],
    dateFormat: [{ type: Input }],
    isDisabled: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    isClear: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CustomDateTimePickerComponent.prototype._value;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.showIcon;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.monthNavigator;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.yearNavigator;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.yearRange;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.showTime;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.timeOnly;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.dateFormat;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.isDisabled;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.minDate;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.maxDate;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.isClear;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.dates;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.rangeDates;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.en;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.tr;
    /** @type {?} */
    CustomDateTimePickerComponent.prototype.invalidDates;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    CustomDateTimePickerComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,