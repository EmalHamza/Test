/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/single-select2/single-select2.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as _ from 'lodash';
export class SingleSelect2Component {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        this.defaultValue = null;
        this.onChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            this.value = val;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.onChange(this._value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.defaultValue = this.value;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.actionRender();
        }), 1);
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.isClear === true) {
            this.defaultValue = undefined;
            setTimeout((/**
             * @return {?}
             */
            () => {
                $('#single-select2-reactive-form-' + this.id)
                    .select2()
                    .select2('val', 'ok');
            }), 1);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    formatValues(data) {
        return data;
    }
    /**
     * @return {?}
     */
    actionRender() {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        let $this = this;
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        let options = {
            formatResult: this.formatValues,
            formatSelection: this.formatValues
        };
        if (this.placeholder !== undefined && this.placeholder != null) {
            options.placeholder = this.placeholder;
        }
        if (this.isDisabled !== undefined && this.isDisabled != null && this.isDisabled === true) {
            options.disabled = true;
        }
        if (!_.isNil(this.dropdownParent) && this.dropdownParent !== '') {
            options.dropdownParent = $(this.dropdownParent);
        }
        $('#single-select2-reactive-form-' + this.id).select2(options);
        if (_.isUndefined(this.defaultValue)) {
            /** @type {?} */
            const a = $('#single-select2-reactive-form-' + this.id)
                .select2()
                .select2('val');
            this.value = _.find($this.options, (/**
             * @param {?} o
             * @return {?}
             */
            function (o) {
                return o.value === +a;
            }));
        }
        if (!_.isUndefined(this.defaultValue)) {
            $('#single-select2-reactive-form-' + this.id)
                .select2()
                .val(this.value.value)
                .trigger('change');
        }
        $('#single-select2-reactive-form-' + this.id).change((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            const value = $(this).val();
            $this.value = _.find($this.options, (/**
             * @param {?} o
             * @return {?}
             */
            function (o) {
                return o.value === value;
            }));
        }));
    }
}
SingleSelect2Component.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'single-select2',
                template: "<select id=\"single-select2-reactive-form-{{ id }}\" class=\"form-control\" select2>\n  <option *ngFor=\"let opt of options\" value=\"{{ opt.value }}\" selected=\"{{ opt.selected }}\">{{ opt.label }}</option>\n</select>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SingleSelect2Component)),
                        multi: true
                    }
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
SingleSelect2Component.ctorParameters = () => [
    { type: ElementRef }
];
SingleSelect2Component.propDecorators = {
    placeholder: [{ type: Input }],
    options: [{ type: Input }],
    id: [{ type: Input }],
    _value: [{ type: Input }],
    isClear: [{ type: Input }],
    isDisabled: [{ type: Input }],
    dropdownParent: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SingleSelect2Component.prototype.placeholder;
    /** @type {?} */
    SingleSelect2Component.prototype.options;
    /** @type {?} */
    SingleSelect2Component.prototype.id;
    /** @type {?} */
    SingleSelect2Component.prototype._value;
    /** @type {?} */
    SingleSelect2Component.prototype.isClear;
    /** @type {?} */
    SingleSelect2Component.prototype.isDisabled;
    /** @type {?} */
    SingleSelect2Component.prototype.dropdownParent;
    /** @type {?} */
    SingleSelect2Component.prototype.defaultValue;
    /**
     * @type {?}
     * @private
     */
    SingleSelect2Component.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    SingleSelect2Component.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    SingleSelect2Component.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    SingleSelect2Component.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,