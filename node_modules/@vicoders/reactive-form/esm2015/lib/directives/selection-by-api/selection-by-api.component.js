/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/selection-by-api/selection-by-api.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, Injector } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { SelectionService } from './selection-by-api';
import * as _ from 'lodash';
export class SelectionByApiComponent {
    /**
     * @param {?} api
     * @param {?} injector
     */
    constructor(api, injector) {
        this.api = api;
        this.injector = injector;
        this.isShow = false;
        this.isSearching = false;
        this.UPLOAD_DIRECTIVE_HEADERS = this.injector.get('UPLOAD_DIRECTIVE_HEADERS');
        this.UPLOAD_DIRECTIVE_API_URL = this.injector.get('UPLOAD_DIRECTIVE_API_URL');
        this.KEY_CODE = {
            UP_ARROW: 38,
            DOWN_ARROW: 40
        };
        this.url = (/**
         * @param {?} apiUrl
         * @param {?} search
         * @return {?}
         */
        (apiUrl, search) => {
            return apiUrl + this.apiUpload + search;
            // tslint:disable-next-line:semicolon
        });
        this.propagateChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const $this = this;
        setTimeout((/**
         * @return {?}
         */
        () => {
            $('body').click((/**
             * @return {?}
             */
            function () {
                if (event.target !== document.getElementById('search-single-selection-reative-form-' + this.id)) {
                    $this.isShow = false;
                }
            }));
            if (this.value) {
                this.text = this.fieldName(this.value);
                /** @type {?} */
                const api = this.url(this.UPLOAD_DIRECTIVE_API_URL, this.fieldName(this.value));
                /** @type {?} */
                const requestHeaders = this.UPLOAD_DIRECTIVE_HEADERS;
                this.api.getAll(api, requestHeaders, this.method).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                response => {
                    this.options = this.resultTransformer(response);
                    this.addSelected();
                }));
            }
        }), 1);
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.isClear === true) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.value = null;
                this.text = null;
            }), 1);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    filterData(event) {
        document.getElementById('search-single-selection-reative-form-' + this.id).setAttribute('disabled', 'true');
        this.options = [];
        if (event.length <= 0) {
            this.value = null;
            this.options = [];
            document.getElementById('search-single-selection-reative-form-' + this.id).removeAttribute('disabled');
            document.getElementById('search-single-selection-reative-form-' + this.id).focus();
        }
        if (event.length >= this.lengthToSearch) {
            this.isSearching = true;
            this.isShow = true;
            this.value = null;
            /** @type {?} */
            const api = this.url(this.UPLOAD_DIRECTIVE_API_URL, event);
            /** @type {?} */
            const requestHeaders = this.UPLOAD_DIRECTIVE_HEADERS;
            this.api.getAll(api, requestHeaders, this.method).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                this.options = this.resultTransformer(response);
                this.isSearching = false;
                document.getElementById('search-single-selection-reative-form-' + this.id).removeAttribute('disabled');
                document.getElementById('search-single-selection-reative-form-' + this.id).focus();
            }));
        }
    }
    /**
     * @return {?}
     */
    addSelected() {
        /** @type {?} */
        const $this = this;
        _.map(this.options, (/**
         * @param {?} item
         * @param {?} key
         * @return {?}
         */
        (item, key) => {
            delete item.selected;
            if (_.isEqual(item, $this.value)) {
                _.assign(item, { selected: true });
            }
        }));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    detailClick(item) {
        this.setValue(item);
        this.isShow = false;
    }
    /**
     * @return {?}
     */
    changeStatusOptions() {
        this.isShow === false ? (this.isShow = true) : (this.isShow = false);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeydown(event) {
        if (event.keyCode === this.KEY_CODE.DOWN_ARROW && this.isShow) {
            _.forEach(this.options, (/**
             * @param {?} i
             * @return {?}
             */
            i => delete i.selected));
            if (this.value) {
                /** @type {?} */
                const current_item = _.find(this.options, (/**
                 * @param {?} i
                 * @return {?}
                 */
                i => this.fieldName(i) === this.fieldName(this.value)));
                if (current_item) {
                    /** @type {?} */
                    const index_current_item = this.options.indexOf(current_item);
                    /** @type {?} */
                    const last_item = this.options.slice(-1).pop();
                    /** @type {?} */
                    const index_last_item = this.options.indexOf(last_item);
                    if (index_current_item === index_last_item) {
                        this.value = this.options[0];
                    }
                    else {
                        this.value = this.options[index_current_item + 1];
                    }
                }
                else {
                    this.value = this.options[0];
                }
            }
            else {
                this.value = this.options[0];
            }
            this.setValue(this.value);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyup(event) {
        if (event.keyCode === this.KEY_CODE.UP_ARROW && this.isShow) {
            _.forEach(this.options, (/**
             * @param {?} i
             * @return {?}
             */
            i => delete i.selected));
            if (this.value) {
                /** @type {?} */
                const current_item = _.find(this.options, (/**
                 * @param {?} i
                 * @return {?}
                 */
                i => this.fieldName(i) === this.fieldName(this.value)));
                if (current_item) {
                    /** @type {?} */
                    const index_current_item = this.options.indexOf(current_item);
                    /** @type {?} */
                    const head_item = this.options[0];
                    /** @type {?} */
                    const index_head_item = this.options.indexOf(head_item);
                    if (index_current_item === index_head_item) {
                        this.value = this.options.slice(-1).pop();
                    }
                    else {
                        this.value = this.options[index_current_item - 1];
                    }
                }
                else {
                    this.value = this.options.slice(-1).pop();
                }
            }
            else {
                this.value = this.options.slice(-1).pop();
            }
            this.setValue(this.value);
        }
    }
    /**
     * @param {?} array
     * @return {?}
     */
    _isEmpty(array) {
        return _.isEmpty(array) ? true : false;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    setValue(item) {
        this.text = this.fieldName(item);
        this.value = item;
        this.addSelected();
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.propagateChange(this._value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined) {
            this.value = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @return {?}
     */
    registerOnTouched() { }
}
SelectionByApiComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'selection-by-api',
                template: "<div class=\"form-group selection-group\">\n  <input\n    autocomplete=\"off\"\n    id=\"search-single-selection-reative-form-{{ id }}\"\n    class=\"form-control search-text\"\n    (click)=\"changeStatusOptions()\"\n    type=\"text\"\n    name=\"search\"\n    #search\n    [(ngModel)]=\"text\"\n    (ngModelChange)=\"filterData(search.value)\"\n    (keydown)=\"onKeydown($event)\"\n    (keyup)=\"onKeyup($event)\"\n  />\n\n  <div *ngIf=\"!_isEmpty(options) && isShow\" class=\"scrollbar\" id=\"style-default\">\n    <div class=\"force-overflow\">\n      <p\n        class=\"rAtF_sBA_options__item\"\n        *ngFor=\"let item of options\"\n        [ngClass]=\"{ 'selection-by-api__selected': item.selected }\"\n        (click)=\"detailClick(item)\"\n      >\n        {{ fieldName(item) }}\n      </p>\n    </div>\n  </div>\n  <div *ngIf=\"_isEmpty(options) && isShow && !isSearching\" class=\"options-group\">\n    <p>Resource not found</p>\n  </div>\n  <div *ngIf=\"isShow && isSearching\" class=\"options-group\">\n    <p>Searching...</p>\n  </div>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SelectionByApiComponent)),
                        multi: true
                    },
                    SelectionService
                ],
                styles: [".selection-group{position:relative}.options-group{position:absolute;border:1px solid #d3d3d3;border-radius:5px;width:100%;z-index:9;background-color:#fff;border-top:none}.options-group p,.scrollbar p{cursor:pointer;padding:.375rem .75rem;margin:0}.options-group p:focus,.options-group p:hover,.rAtF_sBA_options__item:focus,.scrollbar p:focus,.scrollbar p:hover,.selection-by-api__selected{background-color:#6495ed;color:#fff}.scrollbar{position:absolute;max-height:200px;background:#fff;overflow-y:scroll;border:1px solid #d3d3d3;border-radius:5px;width:100%;z-index:9;border-top:none}.force-overflow{max-height:200px}"]
            }] }
];
/** @nocollapse */
SelectionByApiComponent.ctorParameters = () => [
    { type: SelectionService },
    { type: Injector }
];
SelectionByApiComponent.propDecorators = {
    _value: [{ type: Input }],
    resultTransformer: [{ type: Input }],
    apiUpload: [{ type: Input }],
    headers: [{ type: Input }],
    fieldName: [{ type: Input }],
    lengthToSearch: [{ type: Input }],
    isClear: [{ type: Input }],
    method: [{ type: Input }],
    id: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SelectionByApiComponent.prototype._value;
    /** @type {?} */
    SelectionByApiComponent.prototype.resultTransformer;
    /** @type {?} */
    SelectionByApiComponent.prototype.apiUpload;
    /** @type {?} */
    SelectionByApiComponent.prototype.headers;
    /** @type {?} */
    SelectionByApiComponent.prototype.fieldName;
    /** @type {?} */
    SelectionByApiComponent.prototype.lengthToSearch;
    /** @type {?} */
    SelectionByApiComponent.prototype.isClear;
    /** @type {?} */
    SelectionByApiComponent.prototype.method;
    /** @type {?} */
    SelectionByApiComponent.prototype.id;
    /** @type {?} */
    SelectionByApiComponent.prototype.text;
    /** @type {?} */
    SelectionByApiComponent.prototype.options;
    /** @type {?} */
    SelectionByApiComponent.prototype.isShow;
    /** @type {?} */
    SelectionByApiComponent.prototype.isSearching;
    /** @type {?} */
    SelectionByApiComponent.prototype.UPLOAD_DIRECTIVE_HEADERS;
    /** @type {?} */
    SelectionByApiComponent.prototype.UPLOAD_DIRECTIVE_API_URL;
    /** @type {?} */
    SelectionByApiComponent.prototype.KEY_CODE;
    /** @type {?} */
    SelectionByApiComponent.prototype.url;
    /** @type {?} */
    SelectionByApiComponent.prototype.propagateChange;
    /**
     * @type {?}
     * @private
     */
    SelectionByApiComponent.prototype.api;
    /**
     * @type {?}
     * @private
     */
    SelectionByApiComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,