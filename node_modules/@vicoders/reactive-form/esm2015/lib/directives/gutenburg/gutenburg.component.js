/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/gutenburg/gutenburg.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef, Input } from '@angular/core';
// import { IBlock, BlockEditorProviderComponent } from '@vicoders/vc-gutenberg';
// import { serialize, parse } from '@wordpress/blocks';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class GutenburgComponent {
    constructor() {
        this.propagateChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
        // this.blocks = [];
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.oldValue) {
                // this.blocks = parse(this.oldValue);
                this.value = this.oldValue;
            }
        }), 1000);
    }
    // onBlocksChanged(item: IBlock[]) {
    //   const html = serialize(item);
    //   this.value = html;
    //   console.log('value', this.value);
    // }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.propagateChange(this._value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined) {
            this.value = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @return {?}
     */
    registerOnTouched() { }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
GutenburgComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'gutenberg',
                template: "<!-- <div class=\"form-group\">\n  <block-editor-provider\n    #editor\n    *ngIf=\"blocks\"\n    [blocks]=\"blocks\"\n    (blocksChange)=\"onBlocksChanged($event)\"\n    contentClass=\"gutenberg__editor\"\n  ></block-editor-provider>\n</div> -->\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => GutenburgComponent)),
                        multi: true
                    }
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
GutenburgComponent.ctorParameters = () => [];
GutenburgComponent.propDecorators = {
    _value: [{ type: Input }],
    oldValue: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    GutenburgComponent.prototype._value;
    /** @type {?} */
    GutenburgComponent.prototype.oldValue;
    /** @type {?} */
    GutenburgComponent.prototype.propagateChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3V0ZW5idXJnLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2aWNvZGVycy9yZWFjdGl2ZS1mb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZ3V0ZW5idXJnL2d1dGVuYnVyZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFxQixVQUFVLEVBQUUsS0FBSyxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7O0FBRy9GLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBZW5ELE1BQU0sT0FBTyxrQkFBa0I7SUFPN0I7UUFEQSxvQkFBZTs7OztRQUFHLENBQUMsR0FBUSxFQUFFLEVBQUUsR0FBRSxDQUFDLEVBQUM7UUFFakMsb0JBQW9CO0lBQ3RCLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ2IsVUFBVTs7O1FBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixzQ0FBc0M7Z0JBQ3RDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUM1QjtRQUNILENBQUMsR0FBRSxJQUFJLENBQUMsQ0FBQztJQUNYLENBQUM7Ozs7Ozs7OztJQU9ELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDOzs7OztJQUVELElBQUksS0FBSyxDQUFDLEdBQUc7UUFDWCxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUNsQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxLQUFVO1FBQ25CLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUNwQjtJQUNILENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsRUFBRTtRQUNqQixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsaUJBQWlCLEtBQUksQ0FBQzs7OztJQUN0QixRQUFRLEtBQUksQ0FBQzs7O1lBMURkLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLG9RQUF5QztnQkFFekMsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsa0JBQWtCLEVBQUM7d0JBQ2pELEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGOzthQUNGOzs7OztxQkFLRSxLQUFLO3VCQUNMLEtBQUs7Ozs7SUFETixvQ0FBZ0I7O0lBQ2hCLHNDQUFrQjs7SUFDbEIsNkNBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFZpZXdDaGlsZCwgZm9yd2FyZFJlZiwgSW5wdXQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8vIGltcG9ydCB7IElCbG9jaywgQmxvY2tFZGl0b3JQcm92aWRlckNvbXBvbmVudCB9IGZyb20gJ0B2aWNvZGVycy92Yy1ndXRlbmJlcmcnO1xuLy8gaW1wb3J0IHsgc2VyaWFsaXplLCBwYXJzZSB9IGZyb20gJ0B3b3JkcHJlc3MvYmxvY2tzJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ2d1dGVuYmVyZycsXG4gIHRlbXBsYXRlVXJsOiAnLi9ndXRlbmJ1cmcuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9ndXRlbmJ1cmcuY29tcG9uZW50LmNzcyddLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEd1dGVuYnVyZ0NvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBHdXRlbmJ1cmdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuICAvLyBibG9ja3M6IElCbG9ja1tdO1xuICAvLyBAVmlld0NoaWxkKCdlZGl0b3InKVxuICAvLyBwcm90ZWN0ZWQgZWRpdG9yOiBCbG9ja0VkaXRvclByb3ZpZGVyQ29tcG9uZW50O1xuICBASW5wdXQoKSBfdmFsdWU7XG4gIEBJbnB1dCgpIG9sZFZhbHVlO1xuICBwcm9wYWdhdGVDaGFuZ2UgPSAodmFsOiBhbnkpID0+IHt9O1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyB0aGlzLmJsb2NrcyA9IFtdO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMub2xkVmFsdWUpIHtcbiAgICAgICAgLy8gdGhpcy5ibG9ja3MgPSBwYXJzZSh0aGlzLm9sZFZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMub2xkVmFsdWU7XG4gICAgICB9XG4gICAgfSwgMTAwMCk7XG4gIH1cblxuICAvLyBvbkJsb2Nrc0NoYW5nZWQoaXRlbTogSUJsb2NrW10pIHtcbiAgLy8gICBjb25zdCBodG1sID0gc2VyaWFsaXplKGl0ZW0pO1xuICAvLyAgIHRoaXMudmFsdWUgPSBodG1sO1xuICAvLyAgIGNvbnNvbGUubG9nKCd2YWx1ZScsIHRoaXMudmFsdWUpO1xuICAvLyB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsKSB7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWw7XG4gICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UodGhpcy5fdmFsdWUpO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuKSB7XG4gICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKCkge31cbiAgbmdPbkluaXQoKSB7fVxufVxuIl19