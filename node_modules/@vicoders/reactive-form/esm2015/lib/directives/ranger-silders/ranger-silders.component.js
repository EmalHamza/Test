/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ranger-silders/ranger-silders.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class RangerSildersComponent {
    constructor() {
        this._value = {
            min: null,
            max: null
        };
        this.propagateChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.oldValue) {
                this.value = this.oldValue;
            }
            else {
                this.value = {
                    min: this.min,
                    max: this.max
                };
            }
            /** @type {?} */
            const $this = this;
            /**
             * @return {?}
             */
            function getVals() {
                // Get slider values
                /** @type {?} */
                const parent = this.parentNode;
                /** @type {?} */
                const slides = parent.getElementsByTagName('input');
                /** @type {?} */
                let slide1 = parseFloat(slides[0].value);
                /** @type {?} */
                let slide2 = parseFloat(slides[1].value);
                // Neither slider will clip the other, so make sure we determine which is larger
                if (slide1 > slide2) {
                    /** @type {?} */
                    const tmp = slide2;
                    slide2 = slide1;
                    slide1 = tmp;
                }
                /** @type {?} */
                const miLabel = $this.miLabel ? $this.miLabel + ': ' : '';
                /** @type {?} */
                const unit = $this.unit ? $this.unit : '';
                /** @type {?} */
                const displayElement = parent.getElementsByClassName('rangeValues')[0];
                displayElement.innerHTML = miLabel + slide1 + unit + ' - ' + slide2 + unit;
                $this.value = {
                    min: slide1,
                    max: slide2
                };
            }
            window.onload = (/**
             * @return {?}
             */
            function () {
                // Initialize Sliders
                /** @type {?} */
                const sliderSections = document.getElementsByClassName('range-slider');
                for (let x = 0; x < sliderSections.length; x++) {
                    /** @type {?} */
                    const sliders = sliderSections[x].getElementsByTagName('input');
                    for (let y = 0; y < sliders.length; y++) {
                        if (sliders[y].type === 'range') {
                            sliders[y].oninput = getVals;
                            // Manually trigger event first time to display values
                            sliders[y].oninput(null);
                        }
                    }
                }
            });
        }), 1000);
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.propagateChange(this._value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined) {
            this.value = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @return {?}
     */
    registerOnTouched() { }
}
RangerSildersComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'ranger-silders',
                template: "<div class=\"rf-rangers\">\n  <section id=\"rf-range-slider-{{ id }}\" class=\"range-slider\">\n    <input value=\"{{ value.min }}\" min=\"{{ min }}\" max=\"{{ max }}\" step=\"{{ step }}\" type=\"range\" />\n    <input value=\"{{ value.max }}\" min=\"{{ min }}\" max=\"{{ max }}\" step=\"{{ step }}\" type=\"range\" />\n    <span class=\"rangeValues\"></span>\n  </section>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => RangerSildersComponent)),
                        multi: true
                    }
                ],
                styles: [".rangeValues{position:absolute;top:30px;left:0}section.range-slider{position:relative;float:left;width:100%;text-align:center}section.range-slider input[type=range]{pointer-events:none;position:absolute;-webkit-appearance:none;-webkit-tap-highlight-color:rgba(255,255,255,0);border:none;border-radius:14px;background:#f1efef;box-shadow:inset 0 1px 0 0 #cdc6c6,inset 0 -1px 0 0 #d9d4d4;-webkit-box-shadow:inset 0 1px 0 0 #cdc6c6,inset 0 -1px 0 0 #d9d4d4;overflow:hidden;left:0;top:0;outline:0;height:5px;margin:0;padding:0;width:100%}section.range-slider input[type=range]::-webkit-slider-thumb{cursor:pointer;pointer-events:all;position:relative;z-index:9999;outline:0;-webkit-appearance:none;width:10px;height:10px;border:none;border-radius:50%;background-color:#4cd964}section.range-slider input[type=range]::-moz-range-thumb{cursor:pointer;pointer-events:all;position:relative;z-index:9999;-moz-appearance:none;width:10px;height:10px;border:none;border-radius:50%;background-color:#4cd964}section.range-slider input[type=range]::-ms-thumb{cursor:pointer;pointer-events:all;position:relative;z-index:9999;-ms-appearance:none;width:10px;height:10px;border-radius:50%;border:0;background-color:#4cd964}section.range-slider input[type=range]::-moz-range-track{position:relative;z-index:-1;background-color:#000;border:0}section.range-slider input[type=range]:last-of-type::-moz-range-track{-moz-appearance:none;background:none;border:0}section.range-slider input[type=range]::-moz-focus-outer{border:0}"]
            }] }
];
/** @nocollapse */
RangerSildersComponent.ctorParameters = () => [];
RangerSildersComponent.propDecorators = {
    id: [{ type: Input }],
    min: [{ type: Input }],
    miLabel: [{ type: Input }],
    unit: [{ type: Input }],
    max: [{ type: Input }],
    step: [{ type: Input }],
    _value: [{ type: Input }],
    oldValue: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RangerSildersComponent.prototype.id;
    /** @type {?} */
    RangerSildersComponent.prototype.min;
    /** @type {?} */
    RangerSildersComponent.prototype.miLabel;
    /** @type {?} */
    RangerSildersComponent.prototype.unit;
    /** @type {?} */
    RangerSildersComponent.prototype.max;
    /** @type {?} */
    RangerSildersComponent.prototype.step;
    /** @type {?} */
    RangerSildersComponent.prototype._value;
    /** @type {?} */
    RangerSildersComponent.prototype.oldValue;
    /** @type {?} */
    RangerSildersComponent.prototype.propagateChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2VyLXNpbGRlcnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZpY29kZXJzL3JlYWN0aXZlLWZvcm0vIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9yYW5nZXItc2lsZGVycy9yYW5nZXItc2lsZGVycy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxVQUFVLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BGLE9BQU8sRUFBRSxpQkFBaUIsRUFBd0IsTUFBTSxnQkFBZ0IsQ0FBQztBQWV6RSxNQUFNLE9BQU8sc0JBQXNCO0lBY2pDO1FBUFMsV0FBTSxHQUFHO1lBQ2hCLEdBQUcsRUFBRSxJQUFJO1lBQ1QsR0FBRyxFQUFFLElBQUk7U0FDVixDQUFDO1FBRUYsb0JBQWU7Ozs7UUFBRyxDQUFDLEdBQVEsRUFBRSxFQUFFLEdBQUUsQ0FBQyxFQUFDO0lBRXBCLENBQUM7Ozs7SUFFaEIsZUFBZTtRQUNiLFVBQVU7OztRQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO2FBQzVCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxLQUFLLEdBQUc7b0JBQ1gsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO29CQUNiLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztpQkFDZCxDQUFDO2FBQ0g7O2tCQUVLLEtBQUssR0FBRyxJQUFJOzs7O1lBQ2xCLFNBQVMsT0FBTzs7O3NCQUVSLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVTs7c0JBQ3hCLE1BQU0sR0FBRyxNQUFNLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDOztvQkFDL0MsTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDOztvQkFDcEMsTUFBTSxHQUFH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S0FBSzttQkFDTCxLQUFLO3FCQUNMLEtBQUs7dUJBSUwsS0FBSzs7OztJQVZOLG9DQUFZOztJQUNaLHFDQUFhOztJQUNiLHlDQUFpQjs7SUFDakIsc0NBQWM7O0lBQ2QscUNBQWE7O0lBQ2Isc0NBQWM7O0lBQ2Qsd0NBR0U7O0lBQ0YsMENBQWtCOztJQUNsQixpREFBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIGZvcndhcmRSZWYsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdyYW5nZXItc2lsZGVycycsXG4gIHRlbXBsYXRlVXJsOiAnLi9yYW5nZXItc2lsZGVycy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3Jhbmdlci1zaWxkZXJzLmNvbXBvbmVudC5jc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBSYW5nZXJTaWxkZXJzQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFJhbmdlclNpbGRlcnNDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgQWZ0ZXJWaWV3SW5pdCB7XG4gIEBJbnB1dCgpIGlkO1xuICBASW5wdXQoKSBtaW47XG4gIEBJbnB1dCgpIG1pTGFiZWw7XG4gIEBJbnB1dCgpIHVuaXQ7XG4gIEBJbnB1dCgpIG1heDtcbiAgQElucHV0KCkgc3RlcDtcbiAgQElucHV0KCkgX3ZhbHVlID0ge1xuICAgIG1pbjogbnVsbCxcbiAgICBtYXg6IG51bGxcbiAgfTtcbiAgQElucHV0KCkgb2xkVmFsdWU7XG4gIHByb3BhZ2F0ZUNoYW5nZSA9ICh2YWw6IGFueSkgPT4ge307XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLm9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm9sZFZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHtcbiAgICAgICAgICBtaW46IHRoaXMubWluLFxuICAgICAgICAgIG1heDogdGhpcy5tYXhcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgJHRoaXMgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gZ2V0VmFscygpIHtcbiAgICAgICAgLy8gR2V0IHNsaWRlciB2YWx1ZXNcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgICAgICBjb25zdCBzbGlkZXMgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0Jyk7XG4gICAgICAgIGxldCBzbGlkZTEgPSBwYXJzZUZsb2F0KHNsaWRlc1swXS52YWx1ZSk7XG4gICAgICAgIGxldCBzbGlkZTIgPSBwYXJzZUZsb2F0KHNsaWRlc1sxXS52YWx1ZSk7XG4gICAgICAgIC8vIE5laXRoZXIgc2xpZGVyIHdpbGwgY2xpcCB0aGUgb3RoZXIsIHNvIG1ha2Ugc3VyZSB3ZSBkZXRlcm1pbmUgd2hpY2ggaXMgbGFyZ2VyXG4gICAgICAgIGlmIChzbGlkZTEgPiBzbGlkZTIpIHtcbiAgICAgICAgICBjb25zdCB0bXAgPSBzbGlkZTI7XG4gICAgICAgICAgc2xpZGUyID0gc2xpZGUxO1xuICAgICAgICAgIHNsaWRlMSA9IHRtcDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtaUxhYmVsID0gJHRoaXMubWlMYWJlbCA/ICR0aGlzLm1pTGFiZWwgKyAnOiAnIDogJyc7XG4gICAgICAgIGNvbnN0IHVuaXQgPSAkdGhpcy51bml0ID8gJHRoaXMudW5pdCA6ICcnO1xuXG4gICAgICAgIGNvbnN0IGRpc3BsYXlFbGVtZW50ID0gcGFyZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3JhbmdlVmFsdWVzJylbMF07XG4gICAgICAgIGRpc3BsYXlFbGVtZW50LmlubmVySFRNTCA9IG1pTGFiZWwgKyBzbGlkZTEgKyB1bml0ICsgJyAtICcgKyBzbGlkZTIgKyB1bml0O1xuICAgICAgICAkdGhpcy52YWx1ZSA9IHtcbiAgICAgICAgICBtaW46IHNsaWRlMSxcbiAgICAgICAgICBtYXg6IHNsaWRlMlxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEluaXRpYWxpemUgU2xpZGVyc1xuICAgICAgICBjb25zdCBzbGlkZXJTZWN0aW9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3JhbmdlLXNsaWRlcicpO1xuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHNsaWRlclNlY3Rpb25zLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVycyA9IHNsaWRlclNlY3Rpb25zW3hdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbnB1dCcpO1xuICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgc2xpZGVycy5sZW5ndGg7IHkrKykge1xuICAgICAgICAgICAgaWYgKHNsaWRlcnNbeV0udHlwZSA9PT0gJ3JhbmdlJykge1xuICAgICAgICAgICAgICBzbGlkZXJzW3ldLm9uaW5wdXQgPSBnZXRWYWxzO1xuICAgICAgICAgICAgICAvLyBNYW51YWxseSB0cmlnZ2VyIGV2ZW50IGZpcnN0IHRpbWUgdG8gZGlzcGxheSB2YWx1ZXNcbiAgICAgICAgICAgICAgc2xpZGVyc1t5XS5vbmlucHV0KG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LCAxMDAwKTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsKSB7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWw7XG4gICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UodGhpcy5fdmFsdWUpO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuKSB7XG4gICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKCkge31cbn1cbiJdfQ==