/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/upload-images/test.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { Injectable } from '@angular/core';
export class FileService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.url = '/api/v1/upload';
        this.http = http;
    }
    /**
     * @param {?} params
     * @param {?} apiUpload
     * @param {?} headers
     * @return {?}
     */
    upload(params, apiUpload, headers) {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        let formData = new FormData();
        // tslint:disable-next-line:forin
        for (const key in params) {
            formData.append(key, params[key]);
        }
        return this.http.post(apiUpload, formData, { headers: headers }).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => response)));
    }
    /**
     * @param {?} params
     * @param {?} apiUpload
     * @return {?}
     */
    delete(params, apiUpload) {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        let formData = new FormData();
        // tslint:disable-next-line:forin
        for (const key in params) {
            formData.append(key, params[key]);
        }
        return this.http.post(apiUpload, formData).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => response)));
    }
}
FileService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FileService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FileService.prototype.url;
    /** @type {?} */
    FileService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2aWNvZGVycy9yZWFjdGl2ZS1mb3JtLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvdXBsb2FkLWltYWdlcy90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYyxNQUFNLHNCQUFzQixDQUFDO0FBSzlELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE1BQU0sT0FBTyxXQUFXOzs7O0lBSXRCLFlBQVksSUFBZ0I7UUFIcEIsUUFBRyxHQUFHLGdCQUFnQixDQUFDO1FBSTdCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ25CLENBQUM7Ozs7Ozs7SUFFRCxNQUFNLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxPQUFPOzs7WUFFM0IsUUFBUSxHQUFhLElBQUksUUFBUSxFQUFFO1FBQ3ZDLGlDQUFpQztRQUNqQyxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTtZQUN4QixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNuQztRQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsQ0FBQyxRQUFrQixFQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDO0lBQy9HLENBQUM7Ozs7OztJQUVELE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUzs7O1lBRWxCLFFBQVEsR0FBYSxJQUFJLFFBQVEsRUFBRTtRQUN2QyxpQ0FBaUM7UUFDakMsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUU7WUFDeEIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDbkM7UUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRzs7OztRQUFDLENBQUMsUUFBa0IsRUFBRSxFQUFFLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQztJQUN6RixDQUFDOzs7WUE1QkYsVUFBVTs7OztZQVJGLFVBQVU7Ozs7Ozs7SUFVakIsMEJBQStCOztJQUMvQiwyQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEh0dHAsIEhlYWRlcnMsIFJlc3BvbnNlLCBSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRmlsZVNlcnZpY2Uge1xuICBwcml2YXRlIHVybCA9ICcvYXBpL3YxL3VwbG9hZCc7XG4gIGh0dHA6IEh0dHBDbGllbnQ7XG5cbiAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCkge1xuICAgIHRoaXMuaHR0cCA9IGh0dHA7XG4gIH1cblxuICB1cGxvYWQocGFyYW1zLCBhcGlVcGxvYWQsIGhlYWRlcnMpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItY29uc3RcbiAgICBsZXQgZm9ybURhdGE6IEZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmZvcmluXG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCBwYXJhbXNba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChhcGlVcGxvYWQsIGZvcm1EYXRhLCB7IGhlYWRlcnM6IGhlYWRlcnMgfSkucGlwZShtYXAoKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gcmVzcG9uc2UpKTtcbiAgfVxuXG4gIGRlbGV0ZShwYXJhbXMsIGFwaVVwbG9hZCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnByZWZlci1jb25zdFxuICAgIGxldCBmb3JtRGF0YTogRm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Zm9yaW5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZChrZXksIHBhcmFtc1trZXldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QoYXBpVXBsb2FkLCBmb3JtRGF0YSkucGlwZShtYXAoKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gcmVzcG9uc2UpKTtcbiAgfVxufVxuIl19