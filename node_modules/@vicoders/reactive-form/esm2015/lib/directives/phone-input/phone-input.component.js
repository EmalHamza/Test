/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/phone-input/phone-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Countries } from './countries';
export class PhoneInputComponent {
    constructor() {
        this._value = {
            code: '',
            value: '',
            alpha2Code: ''
        };
        this.COUNTRIES = Countries;
        this.propagateChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.propagateChange(this._value);
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.value) {
            $('#rf-phone-code')
                .select2()
                .val(this.value.code + '-' + this.value.alpha2Code)
                .trigger('change.select2');
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const $this = this;
        setTimeout((/**
         * @return {?}
         */
        () => {
            $('#rf-phone-code').select2();
            if (this.value) {
                $('#rf-phone-code')
                    .select2()
                    .val(this.value.code + '-' + this.value.alpha2Code)
                    .trigger('change.select2');
            }
            $('#rf-phone-code').change((/**
             * @return {?}
             */
            function () {
                // tslint:disable-next-line:prefer-const
                /** @type {?} */
                const val = $(this)
                    .val()
                    .split('-');
                $this.value = Object.assign({}, $this.value, { code: val[0], alpha2Code: val[1] });
            }));
        }), 1000);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    selectCountry(val) {
        val = val.split('-');
        this.value = Object.assign({}, this.value, { code: val[0], alpha2Code: val[1] });
    }
    /**
     * @param {?} val
     * @return {?}
     */
    enterPhone(val) {
        this.value = Object.assign({}, this.value, { value: val });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined) {
            this.value = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @return {?}
     */
    registerOnTouched() { }
}
PhoneInputComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-phone-input',
                template: "<div class=\"phone-box form-group\" id=\"rf-phone-code-group\">\n  <select\n    id=\"rf-phone-code\"\n    [attr.disabled]=\"isDisabled\"\n    #country\n    (change)=\"selectCountry(country.value)\"\n    class=\"phone-code\"\n    [(ngModel)]=\"value.code + '-' + value.alpha2Code\"\n    select2\n  >\n    <option value=\"{{ country.callingCodes[0] }}-{{ country.alpha2Code }}\" *ngFor=\"let country of COUNTRIES\">\n      <span>{{ country.name }}</span>\n    </option>\n  </select>\n  <div class=\"phone-number-box\" [ngClass]=\"{ disabled: isDisabled }\">\n    <span class=\"plus-code\" *ngIf=\"value.code\">(+{{ value.code }}) </span>\n    <input\n      [attr.disabled]=\"isDisabled\"\n      type=\"text\"\n      #phone\n      (change)=\"enterPhone(phone.value)\"\n      class=\"phone-value\"\n      [(ngModel)]=\"value.value\"\n    />\n  </div>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => PhoneInputComponent)),
                        multi: true
                    }
                ],
                styles: [".phone-box{position:relative;clear:both;border:1px solid #ccc;height:31px}.phone-box .phone-code{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:0;background-color:#333;color:#fff;border-radius:0;float:left;padding:5px;margin-right:10px;width:120px}.phone-box .phone-number-box{line-height:27px}.phone-box .phone-number-box .phone-value{border:0;background-color:transparent;width:125px}.phone-box .disabled{background-color:#e9ecef}::ng-deep #rf-phone-code-group .select2-container{float:left}::ng-deep #rf-phone-code-group .plus-code{margin-left:12px}::ng-deep .select2-container .select2-selection--single{height:29px;border-radius:0;border:none;border-right:1px solid #ccc}"]
            }] }
];
PhoneInputComponent.propDecorators = {
    isDisabled: [{ type: Input }],
    _value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PhoneInputComponent.prototype.isDisabled;
    /** @type {?} */
    PhoneInputComponent.prototype._value;
    /** @type {?} */
    PhoneInputComponent.prototype.COUNTRIES;
    /** @type {?} */
    PhoneInputComponent.prototype.propagateChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGhvbmUtaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZpY29kZXJzL3JlYWN0aXZlLWZvcm0vIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9waG9uZS1pbnB1dC9waG9uZS1pbnB1dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBaUJ4QyxNQUFNLE9BQU8sbUJBQW1CO0lBYmhDO1FBZVcsV0FBTSxHQUFHO1lBQ2hCLElBQUksRUFBRSxFQUFFO1lBQ1IsS0FBSyxFQUFFLEVBQUU7WUFDVCxVQUFVLEVBQUUsRUFBRTtTQUNmLENBQUM7UUFDSyxjQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzdCLG9CQUFlOzs7O1FBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRSxHQUFFLENBQUMsRUFBQztJQTREckMsQ0FBQzs7OztJQTFEQyxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCxJQUFJLEtBQUssQ0FBQyxHQUFHO1FBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFDbEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxDQUFDLENBQUMsZ0JBQWdCLENBQUM7aUJBQ2hCLE9BQU8sRUFBRTtpQkFDVCxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO2lCQUNsRCxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7Ozs7SUFFRCxlQUFlOztjQUNQLEtBQUssR0FBRyxJQUFJO1FBQ2xCLFVBQVU7OztRQUFDLEdBQUcsRUFBRTtZQUNkLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzlCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDZCxDQUFDLENBQUMsZ0JBQWdCLENBQUM7cUJBQ2hCLE9BQU8sRUFBRTtxQkFDVCxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO3FCQUNsRCxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzthQUM5QjtZQUNELENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQU07OztZQUFDOzs7c0JBRW5CLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO3FCQUNoQixHQUFHLEVBQUU7cUJBQ0wsS0FBSyxDQUFDLEdBQUcsQ0FBQztnQkFDYixLQUFLLENBQUMsS0FBSyxxQkFBUSxLQUFLLENBQUMsS0FBSyxJQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRSxDQUFDO1lBQ3JFLENBQUMsRUFBQyxDQUFDO1FBQ0wsQ0FBQyxHQUFFLElBQUksQ0FBQyxDQUFDO0lBQ1gsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsR0FBRztRQUNmLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLHFCQUFRLElBQUksQ0FBQyxLQUFLLElBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUM7SUFDbkUsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsR0FBRztRQUNaLElBQUksQ0FBQyxLQUFLLHFCQUFRLElBQUksQ0FBQyxLQUFLLElBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRSxDQUFDO0lBQzdDLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLEtBQVU7UUFDbkIsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxFQUFFO1FBQ2pCLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCxpQkFBaUIsS0FBSSxDQUFDOzs7WUFoRnZCLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsbzJCQUEyQztnQkFFM0MsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUM7d0JBQ2xELEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGOzthQUNGOzs7eUJBRUUsS0FBSztxQkFDTCxLQUFLOzs7O0lBRE4seUNBQTZCOztJQUM3QixxQ0FJRTs7SUFDRix3Q0FBNkI7O0lBQzdCLDhDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIGZvcndhcmRSZWYsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ291bnRyaWVzIH0gZnJvbSAnLi9jb3VudHJpZXMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuZGVjbGFyZSBjb25zdCAkOiBhbnk7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnYXBwLXBob25lLWlucHV0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Bob25lLWlucHV0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vcGhvbmUtaW5wdXQuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBQaG9uZUlucHV0Q29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFBob25lSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgaXNEaXNhYmxlZDogQm9vbGVhbjtcbiAgQElucHV0KCkgX3ZhbHVlID0ge1xuICAgIGNvZGU6ICcnLFxuICAgIHZhbHVlOiAnJyxcbiAgICBhbHBoYTJDb2RlOiAnJ1xuICB9O1xuICBwdWJsaWMgQ09VTlRSSUVTID0gQ291bnRyaWVzO1xuICBwcm9wYWdhdGVDaGFuZ2UgPSAodmFsOiBhbnkpID0+IHt9O1xuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsKSB7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWw7XG4gICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UodGhpcy5fdmFsdWUpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudmFsdWUpIHtcbiAgICAgICQoJyNyZi1waG9uZS1jb2RlJylcbiAgICAgICAgLnNlbGVjdDIoKVxuICAgICAgICAudmFsKHRoaXMudmFsdWUuY29kZSArICctJyArIHRoaXMudmFsdWUuYWxwaGEyQ29kZSlcbiAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZS5zZWxlY3QyJyk7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGNvbnN0ICR0aGlzID0gdGhpcztcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICQoJyNyZi1waG9uZS1jb2RlJykuc2VsZWN0MigpO1xuICAgICAgaWYgKHRoaXMudmFsdWUpIHtcbiAgICAgICAgJCgnI3JmLXBob25lLWNvZGUnKVxuICAgICAgICAgIC5zZWxlY3QyKClcbiAgICAgICAgICAudmFsKHRoaXMudmFsdWUuY29kZSArICctJyArIHRoaXMudmFsdWUuYWxwaGEyQ29kZSlcbiAgICAgICAgICAudHJpZ2dlcignY2hhbmdlLnNlbGVjdDInKTtcbiAgICAgIH1cbiAgICAgICQoJyNyZi1waG9uZS1jb2RlJykuY2hhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWNvbnN0XG4gICAgICAgIGNvbnN0IHZhbCA9ICQodGhpcylcbiAgICAgICAgICAudmFsKClcbiAgICAgICAgICAuc3BsaXQoJy0nKTtcbiAgICAgICAgJHRoaXMudmFsdWUgPSB7IC4uLiR0aGlzLnZhbHVlLCBjb2RlOiB2YWxbMF0sIGFscGhhMkNvZGU6IHZhbFsxXSB9O1xuICAgICAgfSk7XG4gICAgfSwgMTAwMCk7XG4gIH1cblxuICBzZWxlY3RDb3VudHJ5KHZhbCkge1xuICAgIHZhbCA9IHZhbC5zcGxpdCgnLScpO1xuICAgIHRoaXMudmFsdWUgPSB7IC4uLnRoaXMudmFsdWUsIGNvZGU6IHZhbFswXSwgYWxwaGEyQ29kZTogdmFsWzFdIH07XG4gIH1cblxuICBlbnRlclBob25lKHZhbCkge1xuICAgIHRoaXMudmFsdWUgPSB7IC4uLnRoaXMudmFsdWUsIHZhbHVlOiB2YWwgfTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbikge1xuICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZCgpIHt9XG59XG4iXX0=