/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/typeahead/typeahead.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Injector, forwardRef, Input, ViewChild } from '@angular/core';
import { Subject, merge } from 'rxjs';
import { debounceTime, map, distinctUntilChanged, filter } from 'rxjs/operators';
import { SelectionService } from '../selection-by-api/selection-by-api';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NgbTypeahead } from '@ng-bootstrap/ng-bootstrap';
export class TypeaheadComponent {
    /**
     * @param {?} api
     * @param {?} injector
     */
    constructor(api, injector) {
        this.api = api;
        this.injector = injector;
        this.focus$ = new Subject();
        this.click$ = new Subject();
        this.statesWithFlags = [];
        this.UPLOAD_DIRECTIVE_HEADERS = this.injector.get('UPLOAD_DIRECTIVE_HEADERS');
        this.UPLOAD_DIRECTIVE_API_URL = this.injector.get('UPLOAD_DIRECTIVE_API_URL');
        this.url = (/**
         * @param {?} apiUrl
         * @param {?} search
         * @return {?}
         */
        (apiUrl, search) => {
            return apiUrl + this.apiUpload + search;
            // tslint:disable-next-line:semicolon
        });
        // search = (text$: Observable<string>) =>
        //   text$.pipe(
        //     debounceTime(200),
        //     map(term =>
        //       term === '' ? [] : this.statesWithFlags.filter(v => v[this.searchBy].toLowerCase().indexOf(term.toLowerCase()) > -1).slice(0, 10)
        //     )
        //     // tslint:disable-next-line:semicolon
        //   );
        this.search = (/**
         * @param {?} text$
         * @return {?}
         */
        (text$) => {
            /** @type {?} */
            const debouncedText$ = text$.pipe(debounceTime(200), distinctUntilChanged());
            /** @type {?} */
            const clicksWithClosedPopup$ = this.click$.pipe(filter((/**
             * @return {?}
             */
            () => !this.instance.isPopupOpen())));
            /** @type {?} */
            const inputFocus$ = this.focus$;
            return merge(debouncedText$, inputFocus$, clicksWithClosedPopup$).pipe(
            // tslint:disable-next-line:max-line-length
            // map(term =>
            //   term === '' ? [] : this.statesWithFlags.filter(v => v[this.searchBy].toLowerCase().indexOf(term.toLowerCase()) > -1).slice(0, 10)
            // )
            map((/**
             * @param {?} term
             * @return {?}
             */
            term => 
            // tslint:disable-next-line:max-line-length
            term === ''
                ? this.statesWithFlags
                : this.statesWithFlags.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => v[this.searchBy].toLowerCase().indexOf(term.toLowerCase()) > -1)).slice(0, 10))));
            // tslint:disable-next-line:semicolon
        });
        this.propagateChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngOnChanges() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.isClear) {
                this.value = null;
                this.model = this.value;
            }
        }), 1);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const apiT = this.url(this.UPLOAD_DIRECTIVE_API_URL, '');
            /** @type {?} */
            const requestHeaders = this.UPLOAD_DIRECTIVE_HEADERS;
            this.api.getAll(apiT, requestHeaders, this.method).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                this.statesWithFlags = this.resultTransformer(response);
            }));
            if (this.value) {
                this.model = this.value;
            }
        }), 1);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    filterData(val) {
        if (typeof val !== 'object') {
            /** @type {?} */
            const api = this.url(this.UPLOAD_DIRECTIVE_API_URL, val);
            /** @type {?} */
            const requestHeaders = this.UPLOAD_DIRECTIVE_HEADERS;
            this.api.getAll(api, requestHeaders, this.method).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                this.statesWithFlags = this.resultTransformer(response);
            }));
        }
        else {
            this.value = val;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.propagateChange(this._value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined) {
            this.value = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @return {?}
     */
    registerOnTouched() { }
}
TypeaheadComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'typeahead',
                template: "<div>\n  <ng-template #rt let-r=\"result\" let-t=\"term\">\n    <ngb-highlight *ngFor=\"let i of keyName\" [result]=\"r[i]\" [term]=\"t\"></ngb-highlight>\n  </ng-template>\n  <input\n    id=\"rf-typeahead-template-{{ id }}\"\n    type=\"text\"\n    class=\"form-control\"\n    [(ngModel)]=\"model\"\n    [ngbTypeahead]=\"search\"\n    [resultTemplate]=\"rt\"\n    [inputFormatter]=\"fieldName\"\n    (ngModelChange)=\"filterData(model)\"\n    (focus)=\"focus$.next($event.target.value)\"\n    (click)=\"click$.next($event.target.value)\"\n    #instance=\"ngbTypeahead\"\n  />\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TypeaheadComponent)),
                        multi: true
                    },
                    SelectionService
                ],
                styles: ["ngb-highlight{position:relative;margin-right:15px}ngb-highlight:after{position:absolute;content:'-';top:0;right:-10px}ngb-highlight:last-child:after{position:absolute;content:''}"]
            }] }
];
/** @nocollapse */
TypeaheadComponent.ctorParameters = () => [
    { type: SelectionService },
    { type: Injector }
];
TypeaheadComponent.propDecorators = {
    _value: [{ type: Input }],
    id: [{ type: Input }],
    resultTransformer: [{ type: Input }],
    apiUpload: [{ type: Input }],
    keyName: [{ type: Input }],
    method: [{ type: Input }],
    fieldName: [{ type: Input }],
    searchBy: [{ type: Input }],
    isClear: [{ type: Input }],
    instance: [{ type: ViewChild, args: ['instance', {},] }]
};
if (false) {
    /** @type {?} */
    TypeaheadComponent.prototype._value;
    /** @type {?} */
    TypeaheadComponent.prototype.id;
    /** @type {?} */
    TypeaheadComponent.prototype.resultTransformer;
    /** @type {?} */
    TypeaheadComponent.prototype.apiUpload;
    /** @type {?} */
    TypeaheadComponent.prototype.keyName;
    /** @type {?} */
    TypeaheadComponent.prototype.method;
    /** @type {?} */
    TypeaheadComponent.prototype.fieldName;
    /** @type {?} */
    TypeaheadComponent.prototype.searchBy;
    /** @type {?} */
    TypeaheadComponent.prototype.isClear;
    /** @type {?} */
    TypeaheadComponent.prototype.instance;
    /** @type {?} */
    TypeaheadComponent.prototype.focus$;
    /** @type {?} */
    TypeaheadComponent.prototype.click$;
    /** @type {?} */
    TypeaheadComponent.prototype.statesWithFlags;
    /** @type {?} */
    TypeaheadComponent.prototype.model;
    /** @type {?} */
    TypeaheadComponent.prototype.UPLOAD_DIRECTIVE_HEADERS;
    /** @type {?} */
    TypeaheadComponent.prototype.UPLOAD_DIRECTIVE_API_URL;
    /** @type {?} */
    TypeaheadComponent.prototype.url;
    /** @type {?} */
    TypeaheadComponent.prototype.search;
    /** @type {?} */
    TypeaheadComponent.prototype.propagateChange;
    /**
     * @type {?}
     * @private
     */
    TypeaheadComponent.prototype.api;
    /**
     * @type {?}
     * @private
     */
    TypeaheadComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,