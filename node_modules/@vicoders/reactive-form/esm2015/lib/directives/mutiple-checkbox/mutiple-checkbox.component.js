/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/mutiple-checkbox/mutiple-checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as _ from 'lodash';
export class MutipleCheckboxComponent {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        this.checkedList = [];
        this.onChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            this.value = val;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this.selected = _.find(this.options, (/**
         * @param {?} item
         * @return {?}
         */
        item => item.value === val));
        this._value = val;
        this.onChange(this._value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngOnChanges() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.isClear === true) {
                if (!_.isUndefined(this.options) && !_.isEmpty(this.options)) {
                    _.map(this.options, (/**
                     * @param {?} i
                     * @return {?}
                     */
                    i => {
                        i.checked = undefined;
                    }));
                    this.checkedList = [];
                    this.value = this.checkedList;
                }
            }
        }), 2);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.options !== null && this.options !== undefined && !_.isEmpty(this.options)) {
                /** @type {?} */
                const $this = this;
                _.forEach(this.options, (/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (value.checked === true) {
                        $this.checkedList.push(value.value);
                    }
                }));
                this.value = this.checkedList;
            }
            this.value = this.checkedList;
        }), 1);
    }
    /**
     * @param {?} option
     * @param {?} event
     * @return {?}
     */
    onCheckboxChange(option, event) {
        if (event.target.checked) {
            this.checkedList.push(option.value);
        }
        else {
            for (let i = 0; i < this.options.length; i++) {
                if (this.checkedList[i] === option.value) {
                    this.checkedList.splice(i, 1);
                }
            }
        }
        this.value = this.checkedList;
    }
}
MutipleCheckboxComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'mutiple-checkbox',
                template: "<div class=\"checkbox\" *ngFor=\"let list of options\">\n  <!-- <label *ngIf=\"isDisabled\">\n    <input\n      disabled\n      type=\"checkbox\"\n      value=\"{{ list.value }}\"\n      [attr.checked]=\"list.checked === true ? 'checked' : null\"\n      (change)=\"onCheckboxChange(list, $event)\"\n    />{{ list.label }}</label\n  >\n  <label *ngIf=\"!isDisabled\">\n    <input\n      type=\"checkbox\"\n      value=\"{{ list.value }}\"\n      [attr.checked]=\"list.checked === true ? 'checked' : null\"\n      (change)=\"onCheckboxChange(list, $event)\"\n    />{{ list.label }}</label\n  > -->\n  <label class=\"float-label\" *ngIf=\"isDisabled\"\n    >{{ list.label }}\n    <input\n      disabled\n      type=\"checkbox\"\n      value=\"{{ list.value }}\"\n      [attr.checked]=\"list.checked === true ? 'checked' : null\"\n      (change)=\"onCheckboxChange(list, $event)\"\n    />\n    <span class=\"checkmark\"></span>\n  </label>\n  <label class=\"float-label\" *ngIf=\"!isDisabled\"\n    >{{ list.label }}\n    <input\n      type=\"checkbox\"\n      value=\"{{ list.value }}\"\n      [attr.checked]=\"list.checked === true ? 'checked' : null\"\n      (change)=\"onCheckboxChange(list, $event)\"\n    />\n    <span class=\"checkmark\"></span>\n  </label>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => MutipleCheckboxComponent)),
                        multi: true
                    }
                ],
                styles: [".checkbox .float-label{display:block;position:relative;padding-left:35px;margin-bottom:12px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:27px}.checkbox .float-label input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}.checkbox .checkmark{position:absolute;top:0;left:0;height:25px;width:25px;background-color:#eee}.checkbox .float-label:hover input~.checkmark{background-color:#ccc}.checkbox .float-label input:checked~.checkmark{background-color:#2196f3}.checkbox .checkmark:after{content:'';position:absolute;display:none}.checkbox .float-label input:checked~.checkmark:after{display:block}.checkbox .float-label .checkmark:after{left:9px;top:5px;width:5px;height:10px;border:solid #fff;border-width:0 3px 3px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}"]
            }] }
];
/** @nocollapse */
MutipleCheckboxComponent.ctorParameters = () => [
    { type: ElementRef }
];
MutipleCheckboxComponent.propDecorators = {
    options: [{ type: Input }],
    _value: [{ type: Input }],
    isDisabled: [{ type: Input }],
    isClear: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MutipleCheckboxComponent.prototype.options;
    /** @type {?} */
    MutipleCheckboxComponent.prototype._value;
    /** @type {?} */
    MutipleCheckboxComponent.prototype.isDisabled;
    /** @type {?} */
    MutipleCheckboxComponent.prototype.isClear;
    /** @type {?} */
    MutipleCheckboxComponent.prototype.checkedList;
    /** @type {?} */
    MutipleCheckboxComponent.prototype.selected;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    MutipleCheckboxComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXV0aXBsZS1jaGVja2JveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Admljb2RlcnMvcmVhY3RpdmUtZm9ybS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL211dGlwbGUtY2hlY2tib3gvbXV0aXBsZS1jaGVja2JveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUMzRyxPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxLQUFLLENBQUMsTUFBTSxRQUFRLENBQUM7QUFlNUIsTUFBTSxPQUFPLHdCQUF3Qjs7OztJQWdCbkMsWUFBb0IsT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQVBoQyxnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQVF0QixJQUFJLENBQUMsUUFBUTs7OztRQUFHLENBQUMsR0FBUSxFQUFFLEVBQUUsR0FBRSxDQUFDLENBQUEsQ0FBQztRQUNqQyxJQUFJLENBQUMsU0FBUzs7O1FBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFBLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsR0FBUTtRQUNqQixJQUFJLEdBQUcsRUFBRTtZQUNQLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQzs7OztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDOzs7OztJQUVELElBQUksS0FBSyxDQUFDLEdBQUc7UUFDWCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87Ozs7UUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElB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OztnQkFFVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1Qixrd0NBQWdEO2dCQUVoRCxTQUFTLEVBQUU7b0JBQ1Q7d0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjt3QkFDMUIsV0FBVyxFQUFFLFVBQVU7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyx3QkFBd0IsRUFBQzt3QkFDdkQsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7O2FBQ0Y7Ozs7WUFoQjhDLFVBQVU7OztzQkFrQnRELEtBQUs7cUJBRUwsS0FBSzt5QkFFTCxLQUFLO3NCQUVMLEtBQUs7Ozs7SUFOTiwyQ0FDZTs7SUFDZiwwQ0FDYzs7SUFDZCw4Q0FDb0I7O0lBQ3BCLDJDQUNpQjs7SUFDakIsK0NBQXdCOztJQUV4Qiw0Q0FBZ0I7Ozs7O0lBQ2hCLDRDQUEwQjs7Ozs7SUFDMUIsNENBQTJCOzs7OztJQUMzQiw2Q0FBNEI7Ozs7O0lBRWhCLDJDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgZm9yd2FyZFJlZiwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnbXV0aXBsZS1jaGVja2JveCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9tdXRpcGxlLWNoZWNrYm94LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbXV0aXBsZS1jaGVja2JveC5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE11dGlwbGVDaGVja2JveENvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBNdXRpcGxlQ2hlY2tib3hDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KClcbiAgb3B0aW9uczogYW55W107XG4gIEBJbnB1dCgpXG4gIF92YWx1ZTogYW55W107XG4gIEBJbnB1dCgpXG4gIGlzRGlzYWJsZWQ6IEJvb2xlYW47XG4gIEBJbnB1dCgpXG4gIGlzQ2xlYXI6IEJvb2xlYW47XG4gIHB1YmxpYyBjaGVja2VkTGlzdCA9IFtdO1xuXG4gIHB1YmxpYyBzZWxlY3RlZDtcbiAgcHJpdmF0ZSBkaXNhYmxlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBvbkNoYW5nZTogRnVuY3Rpb247XG4gIHByaXZhdGUgb25Ub3VjaGVkOiBGdW5jdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gKHZhbDogYW55KSA9PiB7fTtcbiAgICB0aGlzLm9uVG91Y2hlZCA9ICgpID0+IHt9O1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsKSB7XG4gICAgdGhpcy5zZWxlY3RlZCA9IF8uZmluZCh0aGlzLm9wdGlvbnMsIGl0ZW0gPT4gaXRlbS52YWx1ZSA9PT0gdmFsKTtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbDtcbiAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuX3ZhbHVlKTtcbiAgfVxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnVzZS1saWZlLWN5Y2xlLWludGVyZmFjZVxuICBuZ09uSW5pdCgpIHt9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5pc0NsZWFyID09PSB0cnVlKSB7XG4gICAgICAgIGlmICghXy5pc1VuZGVmaW5lZCh0aGlzLm9wdGlvbnMpICYmICFfLmlzRW1wdHkodGhpcy5vcHRpb25zKSkge1xuICAgICAgICAgIF8ubWFwKHRoaXMub3B0aW9ucywgaSA9PiB7XG4gICAgICAgICAgICBpLmNoZWNrZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5jaGVja2VkTGlzdCA9IFtdO1xuICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmNoZWNrZWRMaXN0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgMik7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zICE9PSBudWxsICYmIHRoaXMub3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmICFfLmlzRW1wdHkodGhpcy5vcHRpb25zKSkge1xuICAgICAgICBjb25zdCAkdGhpcyA9IHRoaXM7XG4gICAgICAgIF8uZm9yRWFjaCh0aGlzLm9wdGlvbnMsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlLmNoZWNrZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICR0aGlzLmNoZWNrZWRMaXN0LnB1c2godmFsdWUudmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmNoZWNrZWRMaXN0O1xuICAgICAgfVxuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuY2hlY2tlZExpc3Q7XG4gICAgfSwgMSk7XG4gIH1cblxuICBvbkNoZWNrYm94Q2hhbmdlKG9wdGlvbiwgZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpIHtcbiAgICAgIHRoaXMuY2hlY2tlZExpc3QucHVzaChvcHRpb24udmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5jaGVja2VkTGlzdFtpXSA9PT0gb3B0aW9uLnZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5jaGVja2VkTGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnZhbHVlID0gdGhpcy5jaGVja2VkTGlzdDtcbiAgfVxufVxuIl19