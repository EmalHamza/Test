/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/dropzone/dropzone.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, ElementRef, ViewChild, Injector } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as _ from 'lodash';
import { DropzoneComponent, DropzoneDirective } from 'ngx-dropzone-wrapper';
export class CustomDropzoneComponent {
    /**
     * @param {?} element
     * @param {?} injector
     */
    constructor(element, injector) {
        this.element = element;
        this.injector = injector;
        this.fileList = [];
        this.config = {
            addRemoveLinks: true
        };
        this.onChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
        this.disabled = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            this.value = val;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.onChange(this._value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const UPLOAD_DIRECTIVE_HEADERS = this.injector.get('UPLOAD_DIRECTIVE_HEADERS');
        /** @type {?} */
        const UPLOAD_DIRECTIVE_API_URL = this.injector.get('UPLOAD_DIRECTIVE_API_URL');
        /** @type {?} */
        const $this = this;
        if (this.maxFiles !== 1 && !_.isEmpty($this.oldValue)) {
            _.forEach(this.oldValue, (/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                $this.fileList.push(value);
                $this.value = $this.fileList;
            }));
        }
        if (this.maxFiles === 1 && !_.isEmpty($this.oldValue)) {
            $this.value = $this.oldValue;
        }
        this.config.params = {
            upload_path: this.upload_path
        };
        this.config.url = UPLOAD_DIRECTIVE_API_URL + this.url;
        this.config.headers = UPLOAD_DIRECTIVE_HEADERS;
        this.config.acceptedFiles = this.acceptedFiles;
        this.config.maxFilesize = this.maxFilesize;
        this.config.maxFiles = this.maxFiles;
        this.config.paramName = this.paramName;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onUploadError($event) {
        // AppInjector.get(NotificationService).show('warning', $event[1], 5000);
        console.log('warning', $event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onUploadSuccess($event) {
        if (this.maxFiles !== 1) {
            this.fileList.push(this.resultTransformer($event[1]));
            this.value = this.fileList;
        }
        else {
            this.value = this.resultTransformer($event[1]);
        }
    }
    /**
     * @return {?}
     */
    onReset() {
        if (this.componentRef && this.componentRef.directiveRef) {
            this.componentRef.directiveRef.reset();
            this.fileList = [];
            this.value = this.fileList;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFileRemoved($event) {
        /** @type {?} */
        const obj = JSON.parse($event.xhr.response);
        if (this.maxFiles !== 1) {
            this.fileList.splice(this.fileList.indexOf(this.resultTransformer(obj), 1));
            this.value = this.fileList;
        }
        else {
            this.value = null;
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    deleteItem(item) {
        this.fileList.splice(this.fileList.indexOf(item), 1);
        this.value = this.fileList;
    }
}
CustomDropzoneComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'custom-dropzone',
                template: "<dropzone (removedFile)=\"onFileRemoved($event)\" [config]=\"config\" [message]=\"message\" (error)=\"onUploadError($event)\" (success)=\"onUploadSuccess($event)\"></dropzone>\n\n<div class=\"preview-frame\" *ngIf=\"showPreview\">\n    <p>Descriptive images of the product</p>\n    <div *ngIf=\"maxFiles !== 1\">\n        <span class=\"group-item\" *ngFor=\"let item of value\">\n            <img class=\"singleImg\" width=\"120\" height=\"120\" [src]=\"item\" alt=\"\">\n            <span (click)=\"deleteItem(item)\">Remove File</span>\n        </span>\n    </div>\n    <div *ngIf=\"maxFiles == 1\">\n        <img class=\"singleImg\" width=\"120\" height=\"120\" [src]=\"value\" alt=\"\">\n    </div>\n</div>\n\n<div class=\"btn-reset\">\n    <a class=\"btn btn-primary\" (click)=onReset()>Reset</a>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => CustomDropzoneComponent)),
                        multi: true
                    }
                ],
                styles: [".singleImg{border:1px solid #000;padding:3px;margin-right:5px}.preview-frame{padding:8px}.preview-frame .group-item{position:relative}.preview-frame .group-item span{position:absolute;top:73px;left:18px;cursor:pointer}p{padding:8px 16px;text-align:center;border:2px dashed;color:#666;font-size:14px;letter-spacing:1px;background:#dcdcdc}.btn-reset{text-align:right}.btn-reset a{margin:8px;color:#fff}"]
            }] }
];
/** @nocollapse */
CustomDropzoneComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector }
];
CustomDropzoneComponent.propDecorators = {
    message: [{ type: Input }],
    upload_path: [{ type: Input }],
    acceptedFiles: [{ type: Input }],
    maxFilesize: [{ type: Input }],
    maxFiles: [{ type: Input }],
    showPreview: [{ type: Input }],
    oldValue: [{ type: Input }],
    url: [{ type: Input }],
    headers: [{ type: Input }],
    paramName: [{ type: Input }],
    _value: [{ type: Input }],
    resultTransformer: [{ type: Input }],
    componentRef: [{ type: ViewChild, args: [DropzoneComponent,] }],
    directiveRef: [{ type: ViewChild, args: [DropzoneDirective,] }]
};
if (false) {
    /** @type {?} */
    CustomDropzoneComponent.prototype.message;
    /** @type {?} */
    CustomDropzoneComponent.prototype.upload_path;
    /** @type {?} */
    CustomDropzoneComponent.prototype.acceptedFiles;
    /** @type {?} */
    CustomDropzoneComponent.prototype.maxFilesize;
    /** @type {?} */
    CustomDropzoneComponent.prototype.maxFiles;
    /** @type {?} */
    CustomDropzoneComponent.prototype.showPreview;
    /** @type {?} */
    CustomDropzoneComponent.prototype.oldValue;
    /** @type {?} */
    CustomDropzoneComponent.prototype.url;
    /** @type {?} */
    CustomDropzoneComponent.prototype.headers;
    /** @type {?} */
    CustomDropzoneComponent.prototype.paramName;
    /** @type {?} */
    CustomDropzoneComponent.prototype._value;
    /** @type {?} */
    CustomDropzoneComponent.prototype.resultTransformer;
    /** @type {?} */
    CustomDropzoneComponent.prototype.fileList;
    /** @type {?} */
    CustomDropzoneComponent.prototype.config;
    /**
     * @type {?}
     * @private
     */
    CustomDropzoneComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    CustomDropzoneComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    CustomDropzoneComponent.prototype.onTouched;
    /** @type {?} */
    CustomDropzoneComponent.prototype.componentRef;
    /** @type {?} */
    CustomDropzoneComponent.prototype.directiveRef;
    /**
     * @type {?}
     * @private
     */
    CustomDropzoneComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    CustomDropzoneComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,