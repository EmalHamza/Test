/**
 * @fileoverview added by tsickle
 * Generated from: lib/app-injector.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Allows for retrieving singletons using `AppInjector.get(MyService)` (whereas
 * `ReflectiveInjector.resolveAndCreate(MyService)` would create a new instance
 * of the service).
 * @type {?}
 */
export let AppInjector;
/**
 * Helper to set the exported {\@link AppInjector}, needed as ES6 modules export
 * immutable bindings (see http://2ality.com/2015/07/es6-module-exports.html) for
 * which trying to make changes after using `import {AppInjector}` would throw:
 * "TS2539: Cannot assign to 'AppInjector' because it is not a variable".
 * @param {?} injector
 * @return {?}
 */
export function setAppInjector(injector) {
    if (AppInjector) {
        // Should not happen
        // console.error('Programming error: AppInjector was already set');
    }
    else {
        AppInjector = injector;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWluamVjdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZpY29kZXJzL3JlYWN0aXZlLWZvcm0vIiwic291cmNlcyI6WyJsaWIvYXBwLWluamVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBT0EsTUFBTSxLQUFLLFdBQXFCOzs7Ozs7Ozs7QUFRaEMsTUFBTSxVQUFVLGNBQWMsQ0FBQyxRQUFrQjtJQUMvQyxJQUFJLFdBQVcsRUFBRTtRQUNmLG9CQUFvQjtRQUNwQixtRUFBbUU7S0FDcEU7U0FBTTtRQUNMLFdBQVcsR0FBRyxRQUFRLENBQUM7S0FDeEI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBBbGxvd3MgZm9yIHJldHJpZXZpbmcgc2luZ2xldG9ucyB1c2luZyBgQXBwSW5qZWN0b3IuZ2V0KE15U2VydmljZSlgICh3aGVyZWFzXG4gKiBgUmVmbGVjdGl2ZUluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoTXlTZXJ2aWNlKWAgd291bGQgY3JlYXRlIGEgbmV3IGluc3RhbmNlXG4gKiBvZiB0aGUgc2VydmljZSkuXG4gKi9cbmV4cG9ydCBsZXQgQXBwSW5qZWN0b3I6IEluamVjdG9yO1xuXG4vKipcbiAqIEhlbHBlciB0byBzZXQgdGhlIGV4cG9ydGVkIHtAbGluayBBcHBJbmplY3Rvcn0sIG5lZWRlZCBhcyBFUzYgbW9kdWxlcyBleHBvcnRcbiAqIGltbXV0YWJsZSBiaW5kaW5ncyAoc2VlIGh0dHA6Ly8yYWxpdHkuY29tLzIwMTUvMDcvZXM2LW1vZHVsZS1leHBvcnRzLmh0bWwpIGZvclxuICogd2hpY2ggdHJ5aW5nIHRvIG1ha2UgY2hhbmdlcyBhZnRlciB1c2luZyBgaW1wb3J0IHtBcHBJbmplY3Rvcn1gIHdvdWxkIHRocm93OlxuICogXCJUUzI1Mzk6IENhbm5vdCBhc3NpZ24gdG8gJ0FwcEluamVjdG9yJyBiZWNhdXNlIGl0IGlzIG5vdCBhIHZhcmlhYmxlXCIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRBcHBJbmplY3RvcihpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgaWYgKEFwcEluamVjdG9yKSB7XG4gICAgLy8gU2hvdWxkIG5vdCBoYXBwZW5cbiAgICAvLyBjb25zb2xlLmVycm9yKCdQcm9ncmFtbWluZyBlcnJvcjogQXBwSW5qZWN0b3Igd2FzIGFscmVhZHkgc2V0Jyk7XG4gIH0gZWxzZSB7XG4gICAgQXBwSW5qZWN0b3IgPSBpbmplY3RvcjtcbiAgfVxufVxuIl19