/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/default.validator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { catchError, tap } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { AppInjector } from '../app-injector';
class ValidatorService {
    constructor() {
        this.http = AppInjector.get(HttpClient);
    }
    /**
     * @param {?} api
     * @param {?} headers
     * @return {?}
     */
    apiService(api, headers) {
        return this.http.get(api, { headers: headers }).pipe(tap((/**
         * @param {?} result
         * @return {?}
         */
        result => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            throw error;
        })));
    }
}
ValidatorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ValidatorService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    ValidatorService.prototype.http;
}
class Validators {
    constructor() { }
    /**
     * @param {?} matchValue
     * @return {?}
     */
    isEqualValidator(matchValue) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const value = control.value;
            if (value) {
                /** @type {?} */
                const compareValue = control.root.get(matchValue).value;
                if (value !== compareValue) {
                    return { notEqual: { valid: false, value: control.value } };
                }
            }
            return null;
        });
    }
    /**
     * @param {?} matchValue
     * @return {?}
     */
    isDifferentValidator(matchValue) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const value = control.value;
            if (value) {
                /** @type {?} */
                const compareValue = control.root.get(matchValue).value;
                if (value === compareValue) {
                    return { notDifferent: { valid: false, value: control.value } };
                }
            }
            return null;
        });
    }
    /**
     * @param {?} url
     * @param {?} message
     * @return {?}
     */
    isExistValidator(url, message) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const api = new ValidatorService();
            /** @type {?} */
            const value = control.value;
            /** @type {?} */
            const UPLOAD_DIRECTIVE_API_URL = AppInjector.get('UPLOAD_DIRECTIVE_API_URL');
            /** @type {?} */
            const UPLOAD_DIRECTIVE_HEADERS = AppInjector.get('UPLOAD_DIRECTIVE_HEADERS');
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            (resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (value) {
                    /** @type {?} */
                    const result = yield api.apiService(UPLOAD_DIRECTIVE_API_URL + url + value, UPLOAD_DIRECTIVE_HEADERS).toPromise();
                    if (result.exist === true) {
                        resolve({ isExist: { valid: false, value: control.value, message: message } });
                    }
                    resolve(null);
                }
                resolve(null);
            })));
        });
    }
}
Validators.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
Validators.ctorParameters = () => [];
/** @type {?} */
export const DefaultValidators = new Validators();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC52YWxpZGF0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Admljb2RlcnMvcmVhY3RpdmUtZm9ybS8iLCJzb3VyY2VzIjpbImxpYi92YWxpZGF0b3JzL2RlZmF1bHQudmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFPLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3RELE9BQU8sRUFBRSxVQUFVLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRzlDLE1BQ00sZ0JBQWdCO0lBRXBCO1FBREEsU0FBSSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDcEIsQ0FBQzs7Ozs7O0lBRWhCLFVBQVUsQ0FBQyxHQUFHLEVBQUUsT0FBTztRQUNyQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDbEQsR0FBRzs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUUsQ0FBQyxFQUFDLEVBQ2pCLFVBQVU7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUNqQixNQUFNLEtBQUssQ0FBQztRQUNkLENBQUMsRUFBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7WUFaRixVQUFVOzs7Ozs7SUFFVCxnQ0FBbUM7O0FBYXJDLE1BR00sVUFBVTtJQUNkLGdCQUFlLENBQUM7Ozs7O0lBRWhCLGdCQUFnQixDQUFDLFVBQWU7UUFDOUI7Ozs7UUFBTyxDQUFDLE9BQXdCLEVBQTJCLEVBQUU7O2tCQUNyRCxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUs7WUFDM0IsSUFBSSxLQUFLLEVBQUU7O3NCQUNILFlBQVksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLO2dCQUN2RCxJQUFJLEtBQUssS0FBSyxZQUFZLEVBQUU7b0JBQzFCLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztpQkFDN0Q7YUFDRjtZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxFQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFRCxvQkFBb0IsQ0FBQyxVQUFlO1FBQ2xDOzs7O1FBQU8sQ0FBQyxPQUF3QixFQUEyQixFQUFFOztrQkFDckQsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLO1lBQzNCLElBQUksS0FBSyxFQUFFOztzQkFDSCxZQUFZLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSztnQkFDdkQsSUFBSSxLQUFLLEtBQUssWUFBWSxFQUFFO29CQUMxQixPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7aUJBQ2pFO2FBQ0Y7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsRUFBQztJQUNKLENBQUM7Ozs7OztJQUVELGdCQUFnQixDQUFDLEdBQUcsRUFBRSxPQUFPO1FBQzNCOzs7O1FBQU8sQ0FBQyxPQUF3QixFQUEwRSxFQUFFOztrQkFDcEcsR0FBRyxHQUFHLElBQUksZ0JBQWdCLEVBQUU7O2tCQUM1QixLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUs7O2tCQUNyQix3QkFBd0IsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDOztrQkFDdEUsd0JBQXdCLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQztZQUU1RSxPQUFPLElBQUksT0FBTzs7Ozs7WUFBQyxDQUFPLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDM0MsSUFBSSxLQUFLLEVBQUU7OzBCQUNILE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxVQUFVLENBQUMsd0JBQXdCLEdBQUcsR0FBRyxHQUFHLEtBQUssRUFBRSx3QkFBd0IsQ0FBQyxDQUFDLFNBQVMsRUFBRTtvQkFDakgsSUFBSSxNQUFNLENBQUMsS0FBSyxLQUFLLElBQUksRUFBRTt3QkFDekIsT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO3FCQUNoRjtvQkFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ2Y7Z0JBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hCLENBQUMsQ0FBQSxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUM7SUFDSixDQUFDOzs7WUFsREYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7OztBQW9ERCxNQUFNLE9BQU8saUJBQWlCLEdBQUcsSUFBSSxVQUFVLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRpb25FcnJvcnMsIEFzeW5jVmFsaWRhdG9yRm4gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwSW5qZWN0b3IgfSBmcm9tICcuLi9hcHAtaW5qZWN0b3InO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5jbGFzcyBWYWxpZGF0b3JTZXJ2aWNlIHtcbiAgaHR0cCA9IEFwcEluamVjdG9yLmdldChIdHRwQ2xpZW50KTtcbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIGFwaVNlcnZpY2UoYXBpLCBoZWFkZXJzKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChhcGksIHsgaGVhZGVyczogaGVhZGVycyB9KS5waXBlKFxuICAgICAgdGFwKHJlc3VsdCA9PiB7fSksXG4gICAgICBjYXRjaEVycm9yKGVycm9yID0+IHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5jbGFzcyBWYWxpZGF0b3JzIHtcbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIGlzRXF1YWxWYWxpZGF0b3IobWF0Y2hWYWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGNvbnRyb2wudmFsdWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgY29uc3QgY29tcGFyZVZhbHVlID0gY29udHJvbC5yb290LmdldChtYXRjaFZhbHVlKS52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBjb21wYXJlVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4geyBub3RFcXVhbDogeyB2YWxpZDogZmFsc2UsIHZhbHVlOiBjb250cm9sLnZhbHVlIH0gfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGlzRGlmZmVyZW50VmFsaWRhdG9yKG1hdGNoVmFsdWU6IGFueSkge1xuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBjb250cm9sLnZhbHVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNvbXBhcmVWYWx1ZSA9IGNvbnRyb2wucm9vdC5nZXQobWF0Y2hWYWx1ZSkudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gY29tcGFyZVZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHsgbm90RGlmZmVyZW50OiB7IHZhbGlkOiBmYWxzZSwgdmFsdWU6IGNvbnRyb2wudmFsdWUgfSB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgaXNFeGlzdFZhbGlkYXRvcih1cmwsIG1lc3NhZ2UpOiBBc3luY1ZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFByb21pc2U8VmFsaWRhdGlvbkVycm9ycyB8IG51bGw+IHwgT2JzZXJ2YWJsZTxWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbD4gPT4ge1xuICAgICAgY29uc3QgYXBpID0gbmV3IFZhbGlkYXRvclNlcnZpY2UoKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gY29udHJvbC52YWx1ZTtcbiAgICAgIGNvbnN0IFVQTE9BRF9ESVJFQ1RJVkVfQVBJX1VSTCA9IEFwcEluamVjdG9yLmdldCgnVVBMT0FEX0RJUkVDVElWRV9BUElfVVJMJyk7XG4gICAgICBjb25zdCBVUExPQURfRElSRUNUSVZFX0hFQURFUlMgPSBBcHBJbmplY3Rvci5nZXQoJ1VQTE9BRF9ESVJFQ1RJVkVfSEVBREVSUycpO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcGkuYXBpU2VydmljZShVUExPQURfRElSRUNUSVZFX0FQSV9VUkwgKyB1cmwgKyB2YWx1ZSwgVVBMT0FEX0RJUkVDVElWRV9IRUFERVJTKS50b1Byb21pc2UoKTtcbiAgICAgICAgICBpZiAocmVzdWx0LmV4aXN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXNvbHZlKHsgaXNFeGlzdDogeyB2YWxpZDogZmFsc2UsIHZhbHVlOiBjb250cm9sLnZhbHVlLCBtZXNzYWdlOiBtZXNzYWdlIH0gfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbn1cblxuXG5leHBvcnQgY29uc3QgRGVmYXVsdFZhbGlkYXRvcnMgPSBuZXcgVmFsaWRhdG9ycygpO1xuIl19