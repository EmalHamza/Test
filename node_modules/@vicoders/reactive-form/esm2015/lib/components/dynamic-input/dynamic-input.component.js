/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/dynamic-input/dynamic-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Injector } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { InputBase } from '../../models/InputBase';
import * as _ from 'lodash';
import { FileService } from '../../directives/upload-images/test';
export class DynamicInputComponent {
    /**
     * @param {?} api
     * @param {?} injector
     */
    constructor(api, injector) {
        this.api = api;
        this.injector = injector;
    }
    /**
     * @param {?} test
     * @return {?}
     */
    initTinyMce(test) {
        /** @type {?} */
        const $this = this;
        /** @type {?} */
        const UPLOAD_DIRECTIVE_HEADERS = this.injector.get('UPLOAD_DIRECTIVE_HEADERS');
        /** @type {?} */
        const UPLOAD_DIRECTIVE_API_URL = this.injector.get('UPLOAD_DIRECTIVE_API_URL');
        /** @type {?} */
        const TINYMCE_CONFIG = this.injector.get('TINYMCE_CONFIG');
        return _.assign({}, test, {
            file_picker_callback: (/**
             * @param {?} callback
             * @param {?} value
             * @param {?} meta
             * @return {?}
             */
            function (callback, value, meta) {
                // console.log('lebaotrung');
                // $('#single').modal('show');
                /** @type {?} */
                const input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');
                input.onchange = (/**
                 * @return {?}
                 */
                function () {
                    // const file = (this as any).files[0];
                    // const reader = new FileReader();
                    // reader.onload = function(e) {
                    //   callback((e.target as any).result, {
                    //     alt: ''
                    //   });
                    // };
                    // reader.readAsDataURL(file);
                    /** @type {?} */
                    const file = ((/** @type {?} */ (this))).files[0];
                    /** @type {?} */
                    const params = {};
                    params[TINYMCE_CONFIG.paramName] = file;
                    if (TINYMCE_CONFIG.uploadPath) {
                        params['upload_path'] = TINYMCE_CONFIG.uploadPath;
                    }
                    /** @type {?} */
                    const requestHeaders = UPLOAD_DIRECTIVE_HEADERS;
                    /** @type {?} */
                    const requestApiUrl = UPLOAD_DIRECTIVE_API_URL + TINYMCE_CONFIG.apiUpload;
                    $this.api.upload(params, requestApiUrl, requestHeaders).subscribe((/**
                     * @param {?} response
                     * @return {?}
                     */
                    response => {
                        callback(TINYMCE_CONFIG.resultTransformer(response));
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    error => {
                        console.log('error', error);
                    }));
                });
                input.click();
            })
        });
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() { }
    /**
     * @return {?}
     */
    get isValid() {
        if (this.form.controls[this.input.key].errors) {
            this.validatorForm = this.form.controls[this.input.key].errors;
        }
        return this.submitted && this.form.controls[this.input.key].valid;
    }
    /**
     * @param {?} validators
     * @return {?}
     */
    getError(validators) {
        /** @type {?} */
        const $this = this;
        /** @type {?} */
        let mess = '';
        _.forEach(validators, (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            const errorValidator = value.validator($this.form.controls[$this.input.key]);
            if (!_.isUndefined(errorValidator) && !_.isNil(errorValidator)) {
                /** @type {?} */
                const errorKey = Object.keys(errorValidator)[0];
                if ($this.validatorForm.hasOwnProperty(errorKey)) {
                    mess = value.message;
                    return false;
                }
            }
        }));
        return mess;
    }
    /**
     * @param {?} validators
     * @return {?}
     */
    getAsyncErrors(validators) {
        /** @type {?} */
        let mess = '';
        if (this.form.controls[this.input.key].errors) {
            /** @type {?} */
            const error = this.form.controls[this.input.key].errors[Object.keys(this.form.controls[this.input.key].errors)[0]];
            mess = error.message;
        }
        return mess;
    }
    /**
     * @param {?} e
     * @param {?} k
     * @return {?}
     */
    onKeyup(e, k) {
        // console.log(e.target.value);
        // console.log(k);
    }
}
DynamicInputComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'dynamic-input',
                template: "<div [formGroup]=\"form\">\r\n  <div [ngSwitch]=\"input.controlType\">\r\n    <div *ngSwitchCase=\"'block'\">\r\n      <div class=\"form-primary\"><div [innerHtml]=\"input.content\"></div></div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'textbox'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <input\r\n            [attr.disabled]=\"input.disabled\"\r\n            [placeholder]=\"input.placeholder\"\r\n            class=\"form-control\"\r\n            [formControlName]=\"input.key\"\r\n            [type]=\"input.type\"\r\n            [min]=\"input.min\"\r\n            [max]=\"input.max\"\r\n            (keyup)=\"onKeyup($event, input.key)\"\r\n            autocomplete=\"false\"\r\n          />\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'textarea'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <textarea\r\n            [placeholder]=\"input.placeholder\"\r\n            [attr.disabled]=\"input.disabled\"\r\n            [rows]=\"input.rows\"\r\n            id=\"textarea\"\r\n            [formControlName]=\"input.key\"\r\n          ></textarea>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"flex-row\" *ngSwitchCase=\"'dropdown'\">\r\n      <div class=\"reactive-form-group\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <select id=\"dropdown-reactive-form\" [attr.disabled]=\"input.disabled\" [formControlName]=\"input.key\" class=\"form-control\">\r\n            <option *ngFor=\"let opt of input.options\" [attr.disabled]=\"opt.disabled\" [ngValue]=\"opt\">{{ opt.label }}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'radio'\" class=\"radio\">\r\n      <div class=\"input-content\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div class=\"form-primary\">\r\n          <div class=\"form-radio\">\r\n            <div class=\"group-add-on\">\r\n              <div class=\"radio radiofill\" *ngFor=\"let opt of input.options\">\r\n                <label class=\"radio-label\"\r\n                  >{{ opt.label }} <input [attr.disabled]=\"input.disabled\" type=\"radio\" [formControlName]=\"input.key\" [value]=\"opt.value\" />\r\n                  <span class=\"checkmark\"></span>\r\n                </label>\r\n                <div [innerHtml]=\"opt.content\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n        <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n        <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'custom_dropdown'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <custom-selection\r\n            id=\"custom-selection-reactive-form\"\r\n            [oldValue]=\"input.value\"\r\n            [formControlName]=\"input.key\"\r\n            name=\"test-dropdown\"\r\n            [(options)]=\"input.options\"\r\n          ></custom-selection>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n      <!-- <div class=\"form-primary\">\r\n        <label class=\"float-label\">{{ input.label }}</label>\r\n        <custom-selection\r\n          [oldValue]=\"input.value\"\r\n          [formControlName]=\"input.key\"\r\n          name=\"test-dropdown\"\r\n          [(options)]=\"input.options\"\r\n        ></custom-selection>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div> -->\r\n    </div>\r\n    <!-- branding: false,\r\n    height: input.height,\r\n    plugins: input.plugins -->\r\n    <div *ngSwitchCase=\"'tinymce'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <editor\r\n            [formControlName]=\"input.key\"\r\n            [init]=\"\r\n              initTinyMce({\r\n                branding: false,\r\n                height: input.height,\r\n                plugins: input.plugins\r\n              })\r\n            \"\r\n          ></editor>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'checkbox'\" class=\"checkbox\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label checkbox-label\"\r\n            ><span [innerHtml]=\"input.label\"></span>\r\n            <input\r\n              [attr.disabled]=\"input.disabled\"\r\n              [formControlName]=\"input.key\"\r\n              [(ngModel)]=\"input.value\"\r\n              [id]=\"input.key\"\r\n              type=\"checkbox\"\r\n            />\r\n            <span class=\"checkmark\"></span>\r\n          </label>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'list-checkbox'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <mutiple-checkbox\r\n            [isClear]=\"isClear\"\r\n            [isDisabled]=\"input.disabled\"\r\n            [formControlName]=\"input.key\"\r\n            [(options)]=\"input.options\"\r\n          ></mutiple-checkbox>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'textbox-mask'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <mask-input\r\n            [isDisabled]=\"input.disabled\"\r\n            [isClear]=\"isClear\"\r\n            [formControlName]=\"input.key\"\r\n            [placeholder]=\"input.placeholder\"\r\n            [guide]=\"input.guide\"\r\n            [valueWithCharacter]=\"input.valueWithCharacter\"\r\n            [inputMaskText]=\"input.mask\"\r\n          ></mask-input>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'dropzone'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <custom-dropzone\r\n            [headers]=\"input.headers\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [paramName]=\"input.paramName\"\r\n            [url]=\"input.url\"\r\n            [formControlName]=\"input.key\"\r\n            [oldValue]=\"input.value\"\r\n            [showPreview]=\"input.showPreview\"\r\n            [maxFiles]=\"input.maxFiles\"\r\n            [maxFilesize]=\"input.maxFilesize\"\r\n            [acceptedFiles]=\"input.acceptedFiles\"\r\n            [message]=\"input.message\"\r\n            [upload_path]=\"input.upload_path\"\r\n          ></custom-dropzone>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'datetimepicker'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <custom-date-time-picker\r\n              [isClear]=\"isClear\"\r\n              [isDisabled]=\"input.disabled\"\r\n              [dateFormat]=\"input.dateFormat\"\r\n              [timeOnly]=\"input.timeOnly\"\r\n              [showTime]=\"input.showTime\"\r\n              [yearRange]=\"input.yearRange\"\r\n              [yearNavigator]=\"input.yearNavigator\"\r\n              [monthNavigator]=\"input.monthNavigator\"\r\n              [showIcon]=\"input.showIcon\"\r\n              [formControlName]=\"input.key\"\r\n              [minDate]=\"input.minDate\"\r\n              [maxDate]=\"input.maxDate\"\r\n            ></custom-date-time-picker>\r\n          </div>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'phonecode'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <app-phone-input [isDisabled]=\"input.disabled\" [formControlName]=\"input.key\"></app-phone-input>\r\n          </div>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'select2'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <app-custom-select2\r\n              [isDisabled]=\"input.disabled\"\r\n              [isSelectAll]=\"input.isSelectAll\"\r\n              [selectBtnText]=\"input.selectBtnText\"\r\n              [clearBtnText]=\"input.clearBtnText\"\r\n              [isClear]=\"isClear\"\r\n              [id]=\"input.id\"\r\n              [options]=\"input.options\"\r\n              [formControlName]=\"input.key\"\r\n              [placeholder]=\"input.placeholder\"\r\n              [tags]=\"input.tags\"\r\n              [dropdownParent]=\"input.dropdownParent\"\r\n            ></app-custom-select2>\r\n          </div>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- <div *ngSwitchCase=\"'custom_checkbox'\">\r\n      <div class=\"form-primary\">\r\n        <label class=\"float-label\">{{ input.label }}</label>\r\n        <div class=\"form-group\">\r\n          <custom-checkbox [formControlName]=\"input.key\" [onChange]=\"input.onChange\"></custom-checkbox>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n\r\n    <div *ngSwitchCase=\"'uploadfile'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <upload-images\r\n            [isClear]=\"isClear\"\r\n            [formControlName]=\"input.key\"\r\n            [id]=\"input.id\"\r\n            [oldValue]=\"input.value\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [paramName]=\"input.paramName\"\r\n            [uploadPath]=\"input.uploadPath\"\r\n            [multiple]=\"input.multiple\"\r\n            [headers]=\"input.headers\"\r\n            [apiUpload]=\"input.apiUpload\"\r\n            [accept]=\"input.accept\"\r\n            [allowMaxSize]=\"input.allowMaxSize\"\r\n            [zoom]=\"input.zoom\"\r\n          ></upload-images>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'province'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <province-city [formControlName]=\"input.key\"></province-city>\r\n          </div>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'selection-by-api'\">\r\n      <div class=\"form-primary\" *ngIf=\"input.multiple === false\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <selection-by-api\r\n              [id]=\"input.id\"\r\n              [isClear]=\"isClear\"\r\n              [formControlName]=\"input.key\"\r\n              [resultTransformer]=\"input.resultTransformer\"\r\n              [headers]=\"input.headers\"\r\n              [apiUpload]=\"input.apiUpload\"\r\n              [fieldName]=\"input.fieldName\"\r\n              [lengthToSearch]=\"input.lengthToSearch\"\r\n              [method]=\"input.method\"\r\n            ></selection-by-api>\r\n          </div>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-primary\" *ngIf=\"input.multiple === true\">\r\n        <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n        <div class=\"form-group\">\r\n          <multi-selection-by-api\r\n            [id]=\"input.id\"\r\n            [isClear]=\"isClear\"\r\n            [formControlName]=\"input.key\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [headers]=\"input.headers\"\r\n            [apiUpload]=\"input.apiUpload\"\r\n            [fieldName]=\"input.fieldName\"\r\n            [lengthToSearch]=\"input.lengthToSearch\"\r\n            [method]=\"input.method\"\r\n          ></multi-selection-by-api>\r\n          <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n            <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n            <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'captcha'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <captcha\r\n              [captchaCorrect]=\"captchaCorrect\"\r\n              [formControlName]=\"input.key\"\r\n              [type]=\"input.type\"\r\n              [numberOfChar]=\"input.numberOfChar\"\r\n              [message]=\"input.message\"\r\n            ></captcha>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'single-select2'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <single-select2\r\n              [isDisabled]=\"input.disabled\"\r\n              [isClear]=\"isClear\"\r\n              [id]=\"input.id\"\r\n              [options]=\"input.options\"\r\n              [formControlName]=\"input.key\"\r\n              [placeholder]=\"input.placeholder\"\r\n            ></single-select2>\r\n          </div>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'switch-input'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <div class=\"form-group\">\r\n            <custom-switch-input\r\n              [id]=\"input.id\"\r\n              [isDisabled]=\"input.disabled\"\r\n              [isClear]=\"isClear\"\r\n              [formControlName]=\"input.key\"\r\n            ></custom-switch-input>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'uploadfilev2'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <upload-file\r\n            [isClear]=\"isClear\"\r\n            [formControlName]=\"input.key\"\r\n            [id]=\"input.id\"\r\n            [oldValue]=\"input.value\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [dataFunction]=\"input.dataFunction\"\r\n            [paramName]=\"input.paramName\"\r\n            [uploadPath]=\"input.uploadPath\"\r\n            [multiple]=\"input.multiple\"\r\n            [headers]=\"input.headers\"\r\n            [apiUpload]=\"input.apiUpload\"\r\n            [accept]=\"input.accept\"\r\n            [allowMaxSize]=\"input.allowMaxSize\"\r\n            [width]=\"input.width\"\r\n            [maxWidth]=\"input.maxWidth\"\r\n            [height]=\"input.height\"\r\n            [maxHeight]=\"input.maxHeight\"\r\n            [title]=\"input.title\"\r\n            [uploadFromDB]=\"input.uploadFromDB\"\r\n          ></upload-file>\r\n        </div>\r\n\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'uploadfilev3'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <upload-file-v3\r\n            [isClear]=\"isClear\"\r\n            [resultKey]=\"input.resultKey\"\r\n            [formControlName]=\"input.key\"\r\n            [id]=\"input.id\"\r\n            [oldValue]=\"input.value\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [paramName]=\"input.paramName\"\r\n            [uploadPath]=\"input.uploadPath\"\r\n            [multiple]=\"input.multiple\"\r\n            [headers]=\"input.headers\"\r\n            [apiUpload]=\"input.apiUpload\"\r\n            [accept]=\"input.accept\"\r\n            [allowMaxSize]=\"input.allowMaxSize\"\r\n          ></upload-file-v3>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'type-ahead'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <typeahead\r\n            [isClear]=\"isClear\"\r\n            [id]=\"input.id\"\r\n            [formControlName]=\"input.key\"\r\n            [resultTransformer]=\"input.resultTransformer\"\r\n            [apiUpload]=\"input.apiUpload\"\r\n            [method]=\"input.method\"\r\n            [keyName]=\"input.keyName\"\r\n            [fieldName]=\"input.fieldName\"\r\n            [searchBy]=\"input.searchBy\"\r\n          >\r\n          </typeahead>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'type-ahead-without-api'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <typeahead-without-api [isClear]=\"isClear\" [id]=\"input.id\" [formControlName]=\"input.key\" [options]=\"input.options\">\r\n          </typeahead-without-api>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'ranger-slider'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <ranger-silders\r\n            [oldValue]=\"input.value\"\r\n            [formControlName]=\"input.key\"\r\n            [step]=\"input.step\"\r\n            [min]=\"input.min\"\r\n            [max]=\"input.max\"\r\n            [miLabel]=\"input.miLabel\"\r\n            [unit]=\"input.unit\"\r\n          ></ranger-silders>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"'gutenberg'\">\r\n      <div class=\"form-primary\">\r\n        <div class=\"input-content\">\r\n          <label class=\"float-label\"><span [innerHtml]=\"input.label\"></span></label>\r\n          <gutenberg [formControlName]=\"input.key\" [oldValue]=\"input.value\"></gutenberg>\r\n        </div>\r\n        <div class=\"errorMessage messages text-danger\" *ngIf=\"submitted && !isValid\">\r\n          <div *ngIf=\"input.validators\">{{ getError(input.validators) }}</div>\r\n          <div *ngIf=\"input.asyncValidators\">{{ getAsyncErrors(input.asyncValidators) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                providers: [FileService],
                styles: [":host .reactive-form-group label{font-size:12px;margin-bottom:0}:host #textarea{width:100%}:host .checkbox .float-label{display:block;position:relative;padding-left:35px;margin-bottom:12px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:27px}:host .checkbox .float-label input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}:host .checkbox .checkmark{position:absolute;top:0;left:0;height:25px;width:25px;background-color:#eee}:host .checkbox .float-label:hover input~.checkmark{background-color:#ccc}:host .checkbox .float-label input:checked~.checkmark{background-color:#2196f3}:host .checkbox .checkmark:after{content:'';position:absolute;display:none}:host .checkbox .float-label input:checked~.checkmark:after{display:block}:host .checkbox .float-label .checkmark:after{left:9px;top:5px;width:5px;height:10px;border:solid #fff;border-width:0 3px 3px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}:host .radio .radio-label{display:block;position:relative;padding-left:35px;margin-bottom:12px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:27px}:host .radio .radio-label input{position:absolute;opacity:0;cursor:pointer}:host .radio .checkmark{position:absolute;top:0;left:0;height:25px;width:25px;background-color:#eee;border-radius:50%}:host .radio .radio-label:hover input~.checkmark{background-color:#ccc}:host .radio .radio-label input:checked~.checkmark{background-color:#2196f3}:host .radio .checkmark:after{content:'';position:absolute;display:none}:host .radio .radio-label input:checked~.checkmark:after{display:block}:host .radio .radio-label .checkmark:after{top:9px;left:9px;width:8px;height:8px;border-radius:50%;background:#fff}"]
            }] }
];
/** @nocollapse */
DynamicInputComponent.ctorParameters = () => [
    { type: FileService },
    { type: Injector }
];
DynamicInputComponent.propDecorators = {
    input: [{ type: Input }],
    form: [{ type: Input }],
    submitted: [{ type: Input }],
    isClear: [{ type: Input }],
    captchaCorrect: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DynamicInputComponent.prototype.input;
    /** @type {?} */
    DynamicInputComponent.prototype.form;
    /** @type {?} */
    DynamicInputComponent.prototype.submitted;
    /** @type {?} */
    DynamicInputComponent.prototype.isClear;
    /** @type {?} */
    DynamicInputComponent.prototype.captchaCorrect;
    /** @type {?} */
    DynamicInputComponent.prototype.validatorForm;
    /**
     * @type {?}
     * @private
     */
    DynamicInputComponent.prototype.api;
    /**
     * @type {?}
     * @private
     */
    DynamicInputComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,