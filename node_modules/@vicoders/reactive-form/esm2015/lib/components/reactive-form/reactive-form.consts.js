/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/reactive-form/reactive-form.consts.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
export const VALIDATOR_REQUIRED = 'required';
/** @type {?} */
export const VALIDATOR_PATTERN = 'pattern';
/** @type {?} */
export const VALIDATOR_MINLENGTH = 'minlength';
/** @type {?} */
export const VALIDATOR_MAXLENGTH = 'maxlength';
import * as _ from 'lodash';
/** @type {?} */
export const UpdateFormValue = (/**
 * @param {?} inputs
 * @param {?} data
 * @param {?=} options
 * @return {?}
 */
(inputs, data, options) => {
    // tslint:disable-next-line:max-line-length
    /** @type {?} */
    const ableSimpleValue = [
        'textbox',
        'dropdown',
        'radio',
        'checkbox',
        'datetimepicker',
        'uploadfile',
        'phonecode',
        'textarea',
        'textbox-mask',
        'tinymce',
        'single-select2',
        'selection-by-api',
        'switch-input',
        'uploadfilev2',
        'uploadfilev3',
        'type-ahead',
        'type-ahead-without-api',
        'custom_dropdown',
        'ranger-slider',
        'gutenberg',
        'dropzone'
    ];
    _.forEach(data, (/**
     * @param {?} value
     * @param {?} key
     * @return {?}
     */
    function (value, key) {
        inputs = _.map(inputs, (/**
         * @param {?} input
         * @return {?}
         */
        input => {
            if (input.key === key) {
                if (_.includes(ableSimpleValue, input.controlType)) {
                    input.value = value;
                    return input;
                }
                switch (input.controlType) {
                    case 'list-checkbox':
                        input.options = input.options.map((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            for (const i of value) {
                                if (item.value === i) {
                                    item.checked = true;
                                }
                            }
                            return item;
                        }));
                        return input;
                        break;
                    case 'select2':
                        input.options = input.options.map((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            for (const i of value) {
                                if (item.value === i) {
                                    item.selected = true;
                                }
                            }
                            return item;
                        }));
                        return input;
                        break;
                }
            }
            return input;
        }));
    }));
    return inputs;
});
/** @type {?} */
export const UpdateInputsValue = (/**
 * @param {?} inputs
 * @param {?} data
 * @return {?}
 */
(inputs, data) => {
    /** @type {?} */
    const ableType = ['dropdown', 'radio', 'list-checkbox', 'select2', 'single-select2', 'type-ahead-without-api', 'custom_dropdown'];
    _.forEach(data, (/**
     * @param {?} value
     * @param {?} key
     * @return {?}
     */
    function (value, key) {
        _.forEach(inputs, (/**
         * @param {?} input
         * @return {?}
         */
        function (input) {
            if (input.key === key) {
                if (_.includes(ableType, input.controlType)) {
                    input.options = value;
                }
                if (input.controlType === 'dropdown') {
                    input.value = _.head(value);
                }
                if (input.controlType === 'radio') {
                    input.value = ((/** @type {?} */ (_.head(value)))).value;
                }
            }
        }));
    }));
    return inputs;
});
class Support {
    constructor() {
        this.UpdateInputsValue = (/**
         * @param {?} inputs
         * @param {?} data
         * @return {?}
         */
        (inputs, data) => {
            /** @type {?} */
            const ableType = ['dropdown', 'radio', 'list-checkbox', 'select2', 'single-select2', 'type-ahead-without-api', 'custom_dropdown'];
            _.forEach(data, (/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            function (value, key) {
                _.forEach(inputs, (/**
                 * @param {?} input
                 * @return {?}
                 */
                function (input) {
                    if (input.key === key) {
                        if (_.includes(ableType, input.controlType)) {
                            input.options = value;
                        }
                        if (input.controlType === 'dropdown') {
                            input.value = _.head(value);
                        }
                        if (input.controlType === 'radio') {
                            input.value = ((/** @type {?} */ (_.head(value)))).value;
                        }
                    }
                }));
            }));
            return inputs;
            // tslint:disable-next-line:semicolon
        });
        this.UpdateFormValue = (/**
         * @param {?} inputs
         * @param {?} data
         * @param {?=} options
         * @return {?}
         */
        (inputs, data, options) => {
            // tslint:disable-next-line:max-line-length
            /** @type {?} */
            const ableSimpleValue = [
                'textbox',
                'dropdown',
                'radio',
                'checkbox',
                'datetimepicker',
                'uploadfile',
                'phonecode',
                'textarea',
                'textbox-mask',
                'tinymce',
                'single-select2',
                'selection-by-api',
                'switch-input',
                'uploadfilev2',
                'uploadfilev3',
                'type-ahead',
                'type-ahead-without-api',
                'custom_dropdown',
                'ranger-slider',
                'gutenberg',
                'dropzone'
            ];
            _.forEach(data, (/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            function (value, key) {
                inputs = _.map(inputs, (/**
                 * @param {?} input
                 * @return {?}
                 */
                input => {
                    if (input.key === key) {
                        if (_.includes(ableSimpleValue, input.controlType)) {
                            input.value = value;
                        }
                        switch (input.controlType) {
                            case 'list-checkbox':
                                input.options = input.options.map((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                item => {
                                    for (const i of value) {
                                        if (item.value === i) {
                                            item.checked = true;
                                        }
                                    }
                                    return item;
                                }));
                                break;
                            case 'select2':
                                input.options = input.options.map((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                item => {
                                    for (const i of value) {
                                        if (item.value === i) {
                                            item.selected = true;
                                        }
                                    }
                                    return item;
                                }));
                                break;
                        }
                    }
                    else {
                        input.value = input.value;
                    }
                    return input;
                }));
            }));
            return inputs;
            // tslint:disable-next-line:semicolon
        });
    }
}
if (false) {
    /** @type {?} */
    Support.prototype.UpdateInputsValue;
    /** @type {?} */
    Support.prototype.UpdateFormValue;
}
/** @type {?} */
export const support = new Support();
//# sourceMappingURL=data:application/json;base64,