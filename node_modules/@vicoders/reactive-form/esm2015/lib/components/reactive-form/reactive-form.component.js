/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/reactive-form/reactive-form.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { FormControlService } from '../../services/form-control.service';
import * as _ from 'lodash';
import { PhoneCode } from '../../models/PhoneCode';
import { TinyMce } from '../../models/TinyMce';
import { CheckBox } from '../../models/CheckBox';
import { SwitchInput } from '../../models/SwitchInput';
import { SelectionByApi } from '../../models/SelectionByApi';
import { Select2 } from '../../models/Select2';
import { ListCheckBox } from '../../models/ListCheckBox';
export class ReactiveFormComponent {
    /**
     * @param {?} fcs
     */
    constructor(fcs) {
        this.fcs = fcs;
        this.groups = [];
        this.inputs = [];
        this.captchaCorrect = true;
        this.values = {};
        this.submitted = false;
        this.clear = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.onInitReactive) {
            this.onInitReactive.apply(null, [this.form]);
        }
    }
    /**
     * @return {?}
     */
    onChangesReactive() {
        /** @type {?} */
        const $this = this;
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.keysChange !== undefined) {
                _.forEach(this.keysChange, (/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    $this.form.get(value).valueChanges.subscribe((/**
                     * @param {?} val
                     * @return {?}
                     */
                    (val) => {
                        $this.values[value] = val;
                        $this.form.value[value] = val;
                        $this.onChangeReactive.apply(null, [$this.form]);
                    }));
                }));
            }
            else {
                this.form.valueChanges.subscribe((/**
                 * @param {?} val
                 * @return {?}
                 */
                (val) => {
                    if (this.onChangeReactive !== undefined) {
                        this.onChangeReactive.apply(null, [this.form]);
                    }
                }));
            }
        }), 500);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const groups = [];
        /** @type {?} */
        const grouped = _.groupBy(this.inputs, 'group');
        // tslint:disable-next-line:forin
        for (const k in grouped) {
            groups.push({
                group: k,
                items: grouped[k],
                classes: _.head(grouped[k]).group_classes
            });
        }
        this.groups = groups;
        this.form = this.fcs.toFormGroup(this.inputs);
        this.onChangesReactive();
    }
    /**
     * @return {?}
     */
    submit() {
        this.submitted = true;
        if (this.form.invalid) {
            if (this.scrollOnErrror && this.scrollOnErrror === true) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    $('html, body').animate({
                        scrollTop: $('.errorMessage').first().offset().top - 70
                    }, 1000);
                }), 100);
            }
            return false;
        }
        if (this.captcha && this.form.value[`${this.captcha}`].value !== this.form.value[`${this.captcha}`].code) {
            this.captchaCorrect = false;
            return false;
        }
        this.captchaCorrect = true;
        if (this.onSubmit !== undefined) {
            delete this.form.value[''];
            this.onSubmit.apply(null, [this.form]);
        }
        this.clear = false;
        if (!this.saveValue || this.saveValue === false) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.clearData();
            }), 2);
        }
    }
    /**
     * @return {?}
     */
    resetFunction() {
        if (confirm('Are you sure want to reset this form?')) {
            this.clearData();
        }
    }
    /**
     * @return {?}
     */
    customSubmitFunction() {
        this.submitted = true;
        if (this.form.invalid) {
            return false;
        }
        if (this.customSubmit !== undefined) {
            delete this.form.value[''];
            this.customSubmit.apply(null, [this.form]);
        }
        this.clear = false;
    }
    /**
     * @return {?}
     */
    customButtonFunction() {
        if (this.customButton !== undefined) {
            this.customButton.apply(null, []);
        }
    }
    /**
     * @return {?}
     */
    clearData() {
        this.clear = true;
        this.submitted = false;
        /** @type {?} */
        const data = {};
        _.forEach(this.inputs, (/**
         * @param {?} input
         * @return {?}
         */
        (input) => {
            if (input.controlType === new PhoneCode().controlType) {
                data[input.key] = {
                    code: '',
                    value: ''
                };
            }
            if (input.controlType === new TinyMce().controlType) {
                data[input.key] = '';
            }
            if (input.controlType === new CheckBox().controlType || input.controlType === new SwitchInput().controlType) {
                input.value = false;
            }
            if (input.controlType === new SelectionByApi().controlType) {
                input.value = null;
            }
            if (input.controlType === new Select2().controlType || input.controlType === new ListCheckBox().controlType) {
                input.value = [];
            }
        }));
        this.form.reset(data);
        _.forEach(this.inputs, (/**
         * @param {?} input
         * @return {?}
         */
        (input) => {
            if (input.controlType === new CheckBox().controlType || input.controlType === new SwitchInput().controlType) {
                input.value = false;
            }
            if (input.controlType === new SelectionByApi().controlType) {
                input.value = null;
            }
            if (input.controlType === new Select2().controlType || input.controlType === new ListCheckBox().controlType) {
                input.value = [];
            }
        }));
        this.form.markAsPristine();
        this.form.markAsUntouched();
    }
}
ReactiveFormComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'reactive-form',
                template: "<form autocomplete=\"off\" (ngSubmit)=\"submit()\" [formGroup]=\"form\" id=\"{{ themeID ? themeID : 'none' }}\">\r\n  <div class=\"row\">\r\n    <div class=\"dynamic-collection\" *ngFor=\"let group of groups\" [ngClass]=\"group.classes\">\r\n      <div class=\"row\">\r\n        <div *ngFor=\"let input of group.items\" class=\"dynamic-input-group\" [ngClass]=\"input.classes\">\r\n          <dynamic-input\r\n            [captchaCorrect]=\"captchaCorrect\"\r\n            [isClear]=\"clear\"\r\n            [input]=\"input\"\r\n            [form]=\"form\"\r\n            [submitted]=\"submitted\"\r\n          ></dynamic-input>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"dynamic-submit-btn\">\r\n    <button type=\"submit\" [ngClass]=\"{ disabled: !form.valid }\" class=\"btn btn-primary m-r-15 ripple light\">\r\n      <i class=\"icofont icofont-plus m-r-5\"></i> {{ submitText !== undefined ? submitText : 'Submit' }}\r\n    </button>\r\n    <button\r\n      *ngIf=\"isReset !== undefined && isReset === true\"\r\n      type=\"button\"\r\n      class=\"btn btn-primary m-r-15 ripple light btn-reset\"\r\n      (click)=\"resetFunction()\"\r\n    >\r\n      <i class=\"icofont icofont-plus m-r-5\"></i> {{ resetText !== undefined ? resetText : 'Reset' }}\r\n    </button>\r\n    <button\r\n      *ngIf=\"customSubmit !== undefined\"\r\n      type=\"button\"\r\n      class=\"btn btn-primary m-r-15 ripple light btn-reset\"\r\n      (click)=\"customSubmitFunction()\"\r\n    >\r\n      <i class=\"icofont icofont-plus m-r-5\"></i> {{ customeSubmitText !== undefined ? customeSubmitText : 'Custom Submit' }}\r\n    </button>\r\n    <button\r\n      *ngIf=\"customButton !== undefined\"\r\n      type=\"button\"\r\n      class=\"btn btn-primary m-r-15 ripple light btn-reset\"\r\n      (click)=\"customButtonFunction()\"\r\n    >\r\n      <i class=\"icofont icofont-plus m-r-5\"></i> {{ customButtonText !== undefined ? customButtonText : 'Custom Button' }}\r\n    </button>\r\n  </div>\r\n</form>\r\n",
                providers: [FormControlService],
                styles: [":host .dynamic-collection{margin-bottom:10px}:host .btn-reset{float:right}:host .rf__captcha--error{margin-top:15px;color:#e74c3c;font-size:15px}"]
            }] }
];
/** @nocollapse */
ReactiveFormComponent.ctorParameters = () => [
    { type: FormControlService }
];
ReactiveFormComponent.propDecorators = {
    inputs: [{ type: Input }],
    onSubmit: [{ type: Input }],
    submitText: [{ type: Input }],
    onChangeReactive: [{ type: Input }],
    keysChange: [{ type: Input }],
    isReset: [{ type: Input }],
    resetText: [{ type: Input }],
    customSubmit: [{ type: Input }],
    customButton: [{ type: Input }],
    customeSubmitText: [{ type: Input }],
    customButtonText: [{ type: Input }],
    saveValue: [{ type: Input }],
    captcha: [{ type: Input }],
    scrollOnErrror: [{ type: Input }],
    themeID: [{ type: Input }],
    onInitReactive: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ReactiveFormComponent.prototype.groups;
    /** @type {?} */
    ReactiveFormComponent.prototype.inputs;
    /** @type {?} */
    ReactiveFormComponent.prototype.onSubmit;
    /** @type {?} */
    ReactiveFormComponent.prototype.submitText;
    /** @type {?} */
    ReactiveFormComponent.prototype.onChangeReactive;
    /** @type {?} */
    ReactiveFormComponent.prototype.keysChange;
    /** @type {?} */
    ReactiveFormComponent.prototype.isReset;
    /** @type {?} */
    ReactiveFormComponent.prototype.resetText;
    /** @type {?} */
    ReactiveFormComponent.prototype.customSubmit;
    /** @type {?} */
    ReactiveFormComponent.prototype.customButton;
    /** @type {?} */
    ReactiveFormComponent.prototype.customeSubmitText;
    /** @type {?} */
    ReactiveFormComponent.prototype.customButtonText;
    /** @type {?} */
    ReactiveFormComponent.prototype.saveValue;
    /** @type {?} */
    ReactiveFormComponent.prototype.captcha;
    /** @type {?} */
    ReactiveFormComponent.prototype.scrollOnErrror;
    /** @type {?} */
    ReactiveFormComponent.prototype.themeID;
    /** @type {?} */
    ReactiveFormComponent.prototype.onInitReactive;
    /** @type {?} */
    ReactiveFormComponent.prototype.captchaCorrect;
    /** @type {?} */
    ReactiveFormComponent.prototype.values;
    /** @type {?} */
    ReactiveFormComponent.prototype.form;
    /** @type {?} */
    ReactiveFormComponent.prototype.submitted;
    /** @type {?} */
    ReactiveFormComponent.prototype.clear;
    /**
     * @type {?}
     * @private
     */
    ReactiveFormComponent.prototype.fcs;
}
//# sourceMappingURL=data:application/json;base64,