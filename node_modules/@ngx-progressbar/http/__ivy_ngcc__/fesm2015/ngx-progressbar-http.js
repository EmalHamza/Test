import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { finalize } from 'rxjs/operators';
import { NgProgress } from '@ngx-progressbar/core';
import { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-progressbar/core';
const NG_PROGRESS_HTTP_CONFIG = new InjectionToken('ngProgressHttpConfig');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgProgressInterceptor {
    /**
     * @param {?} ngProgress
     * @param {?=} config
     */
    constructor(ngProgress, config) {
        this._inProgressCount = 0;
        this._config = {
            id: 'root',
            silentApis: []
        };
        this._config = config ? Object.assign({}, this._config, config) : this._config;
        this._progressRef = ngProgress.ref(this._config.id);
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        // Ignore by request headers
        if (req.headers.has('ignoreProgressBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
        }
        // Ignore silent api requests
        if (this.checkUrl(req)) {
            return next.handle(req);
        }
        this._inProgressCount++;
        if (!this._progressRef.isStarted) {
            this._progressRef.start();
        }
        return next.handle(req).pipe(finalize((/**
         * @return {?}
         */
        () => {
            this._inProgressCount--;
            if (this._inProgressCount === 0) {
                this._progressRef.complete();
            }
        })));
    }
    /**
     * Check if request is silent.
     * @private
     * @param {?} req request
     * @return {?}
     */
    checkUrl(req) {
        /** @type {?} */
        const url = req.url.toLowerCase();
        /** @type {?} */
        const found = this._config.silentApis.find((/**
         * @param {?} u
         * @return {?}
         */
        (u) => url.startsWith(u)));
        return !!found;
    }
}
NgProgressInterceptor.ɵfac = function NgProgressInterceptor_Factory(t) { return new (t || NgProgressInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.NgProgress), ɵngcc0.ɵɵinject(NG_PROGRESS_HTTP_CONFIG, 8)); };
NgProgressInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgProgressInterceptor, factory: NgProgressInterceptor.ɵfac });
/** @nocollapse */
NgProgressInterceptor.ctorParameters = () => [
    { type: NgProgress },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgProgressInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.NgProgress }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_PROGRESS_HTTP_CONFIG]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgProgressHttpModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static withConfig(config) {
        return {
            ngModule: NgProgressHttpModule,
            providers: [
                { provide: NG_PROGRESS_HTTP_CONFIG, useValue: config }
            ]
        };
    }
}
NgProgressHttpModule.ɵfac = function NgProgressHttpModule_Factory(t) { return new (t || NgProgressHttpModule)(); };
NgProgressHttpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgProgressHttpModule });
NgProgressHttpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [
        { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }
    ] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgProgressHttpModule, [{
        type: NgModule,
        args: [{
                providers: [
                    { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgProgressHttpModule, NG_PROGRESS_HTTP_CONFIG as ɵc, NgProgressInterceptor as ɵa };

//# sourceMappingURL=ngx-progressbar-http.js.map