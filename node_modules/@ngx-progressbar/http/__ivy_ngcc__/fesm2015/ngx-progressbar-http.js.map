{"version":3,"file":"ngx-progressbar-http.js","sources":["@ngx-progressbar/http/lib/ng-progress-http.interface.ts","@ngx-progressbar/http/lib/ng-progress.interceptor.ts","@ngx-progressbar/http/lib/ng-progress-http.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface NgProgressHttpConfig {\r\n  id?: string;\r\n  silentApis?: string[];\r\n}\r\n\r\nexport const NG_PROGRESS_HTTP_CONFIG = new InjectionToken<NgProgressHttpConfig>('ngProgressHttpConfig');\r\n","import { Injectable, Optional, Inject } from '@angular/core';\r\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { NgProgress, NgProgressRef } from '@ngx-progressbar/core';\r\nimport { NgProgressHttpConfig, NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';\r\n\r\n@Injectable()\r\nexport class NgProgressInterceptor implements HttpInterceptor {\r\n\r\n  private _inProgressCount = 0;\r\n  private _progressRef: NgProgressRef;\r\n  private readonly _config: NgProgressHttpConfig = {\r\n    id: 'root',\r\n    silentApis: []\r\n  };\r\n\r\n  constructor(ngProgress: NgProgress, @Optional() @Inject(NG_PROGRESS_HTTP_CONFIG) config?: NgProgressHttpConfig) {\r\n    this._config = config ? {...this._config, ...config} : this._config;\r\n    this._progressRef = ngProgress.ref(this._config.id);\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    // Ignore by request headers\r\n    if (req.headers.has('ignoreProgressBar')) {\r\n      return next.handle(req.clone({headers: req.headers.delete('ignoreProgressBar')}));\r\n    }\r\n\r\n    // Ignore silent api requests\r\n    if (this.checkUrl(req)) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    this._inProgressCount++;\r\n\r\n    if (!this._progressRef.isStarted) {\r\n      this._progressRef.start();\r\n    }\r\n\r\n    return next.handle(req).pipe(\r\n      finalize(() => {\r\n        this._inProgressCount--;\r\n        if (this._inProgressCount === 0) {\r\n          this._progressRef.complete();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if request is silent.\r\n   * @param req request\r\n   */\r\n  private checkUrl(req: HttpRequest<any>) {\r\n    const url = req.url.toLowerCase();\r\n    const found = this._config.silentApis.find((u) => url.startsWith(u));\r\n    return !!found;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { NgProgressInterceptor } from './ng-progress.interceptor';\r\nimport { NgProgressHttpConfig, NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';\r\n\r\n@NgModule({\r\n  providers: [\r\n    { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }\r\n  ]\r\n})\r\nexport class NgProgressHttpModule {\r\n  static withConfig(config: NgProgressHttpConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgProgressHttpModule,\r\n      providers: [\r\n        { provide: NG_PROGRESS_HTTP_CONFIG, useValue: config }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}