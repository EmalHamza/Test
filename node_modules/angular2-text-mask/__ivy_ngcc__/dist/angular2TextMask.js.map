{"version":3,"file":"angular2TextMask.js","sources":["../src/angular2TextMask.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, ElementRef, forwardRef, Input, Inject, NgModule, OnChanges, Optional, Provider, Renderer2, SimpleChanges } from '@angular/core'\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, COMPOSITION_BUFFER_MODE } from '@angular/forms'\nimport {ÉµgetDOM as getDOM} from '@angular/platform-browser'\nimport { createTextMaskInputElement } from 'text-mask-core/dist/textMaskCore'\n\nexport class TextMaskConfig {\n  mask: Array<string | RegExp> | ((raw: string) => Array<string | RegExp>) | false\n  guide?: boolean\n  placeholderChar?: string\n  pipe?: (conformedValue: string, config: TextMaskConfig) => false | string | object\n  keepCharPositions?: boolean\n  showMask?: boolean\n}\n\nexport const MASKEDINPUT_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MaskedInputDirective),\n  multi: true\n}\n\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid(): boolean {\n  const userAgent = getDOM() ? getDOM().getUserAgent() : ''\n  return /android (\\d+)/.test(userAgent.toLowerCase())\n}\n\n@Directive({\n  host: {\n    '(input)': '_handleInput($event.target.value)',\n    '(blur)': 'onTouched()',\n    '(compositionstart)': '_compositionStart()',\n    '(compositionend)': '_compositionEnd($event.target.value)'\n  },\n  selector: '[textMask]',\n  exportAs: 'textMask',\n  providers: [MASKEDINPUT_VALUE_ACCESSOR]\n})\nexport class MaskedInputDirective implements ControlValueAccessor, OnChanges {\n  @Input('textMask') textMaskConfig: TextMaskConfig = {\n    mask: [],\n    guide: true,\n    placeholderChar: '_',\n    pipe: undefined,\n    keepCharPositions: false,\n  }\n\n  onChange = (_: any) => {}\n  onTouched = () => {}\n\n  private textMaskInputElement: any\n  private inputElement: HTMLInputElement\n\n  /** Whether the user is creating a composition string (IME events). */\n  private _composing = false\n\n  constructor(\n    private _renderer: Renderer2,\n    private _elementRef: ElementRef,\n    @Optional() @Inject(COMPOSITION_BUFFER_MODE)private _compositionMode: boolean\n  ) {\n    if (this._compositionMode == null) {\n      this._compositionMode = !_isAndroid()\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._setupMask(true)\n    if (this.textMaskInputElement !== undefined) {\n      this.textMaskInputElement.update(this.inputElement.value)\n    }\n  }\n\n  writeValue(value: any) {\n    this._setupMask()\n\n    // set the initial value for cases where the mask is disabled\n    const normalizedValue = value == null ? '' : value\n    this._renderer.setProperty(this.inputElement, 'value', normalizedValue)\n\n    if (this.textMaskInputElement !== undefined) {\n      this.textMaskInputElement.update(value)\n    }\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled)\n  }\n\n  \n  _handleInput(value) {\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n      this._setupMask()\n\n      if (this.textMaskInputElement !== undefined) {\n        this.textMaskInputElement.update(value)\n        \n        // get the updated value\n        value = this.inputElement.value\n        this.onChange(value)\n      }\n    }\n  }\n\n  _setupMask(create = false) {\n    if (!this.inputElement) {\n      if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {\n        // `textMask` directive is used directly on an input element\n        this.inputElement = this._elementRef.nativeElement\n      } else {\n        // `textMask` directive is used on an abstracted input element, `md-input-container`, etc\n        this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0]\n      }\n    }\n    \n    if (this.inputElement && create) {\n      this.textMaskInputElement = createTextMaskInputElement(\n        Object.assign({inputElement: this.inputElement}, this.textMaskConfig)\n      )\n    }\n    \n  }\n\n  _compositionStart(): void { this._composing = true }\n\n  _compositionEnd(value: any): void {\n    this._composing = false\n    this._compositionMode && this._handleInput(value)\n  }\n}\n\n@NgModule({\n  declarations: [MaskedInputDirective],\n  exports: [MaskedInputDirective]\n})\nexport class TextMaskModule {}\n\nexport { conformToMask } from 'text-mask-core/dist/textMaskCore'\n"]}