{"version":3,"file":"carousel.d.ts","sources":["carousel.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentChecked, AfterContentInit, ChangeDetectorRef, EventEmitter, NgZone, OnChanges, OnDestroy, QueryList, TemplateRef } from '@angular/core';\nimport { NgbCarouselConfig } from './carousel-config';\n/**\n * A directive that wraps the individual carousel slide.\n */\nexport declare class NgbSlide {\n    tplRef: TemplateRef<any>;\n    /**\n     * Slide id that must be unique for the entire document.\n     *\n     * If not provided, will be generated in the `ngb-slide-xx` format.\n     */\n    id: string;\n    constructor(tplRef: TemplateRef<any>);\n}\n/**\n * Carousel is a component to easily create and control slideshows.\n *\n * Allows to set intervals, change the way user interacts with the slides and provides a programmatic API.\n */\nexport declare class NgbCarousel implements AfterContentChecked, AfterContentInit, OnChanges, OnDestroy {\n    private _platformId;\n    private _ngZone;\n    private _cd;\n    slides: QueryList<NgbSlide>;\n    private _destroy$;\n    private _start$;\n    private _stop$;\n    /**\n     * The slide id that should be displayed **initially**.\n     *\n     * For subsequent interactions use methods `select()`, `next()`, etc. and the `(slide)` output.\n     */\n    activeId: string;\n    /**\n     * Time in milliseconds before the next slide is shown.\n     */\n    interval: number;\n    /**\n     * If `true`, will 'wrap' the carousel by switching from the last slide back to the first.\n     */\n    wrap: boolean;\n    /**\n     * If `true`, allows to interact with carousel using keyboard 'arrow left' and 'arrow right'.\n     */\n    keyboard: boolean;\n    /**\n     * If `true`, will pause slide switching when mouse cursor hovers the slide.\n     *\n     * @since 2.2.0\n     */\n    pauseOnHover: boolean;\n    /**\n     * If `true`, 'previous' and 'next' navigation arrows will be visible on the slide.\n     *\n     * @since 2.2.0\n     */\n    showNavigationArrows: boolean;\n    /**\n     * If `true`, navigation indicators at the bottom of the slide will be visible.\n     *\n     * @since 2.2.0\n     */\n    showNavigationIndicators: boolean;\n    /**\n     * An event emitted right after the slide transition is completed.\n     *\n     * See [`NgbSlideEvent`](#/components/carousel/api#NgbSlideEvent) for payload details.\n     */\n    slide: EventEmitter<NgbSlideEvent>;\n    constructor(config: NgbCarouselConfig, _platformId: any, _ngZone: NgZone, _cd: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    ngAfterContentChecked(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: any): void;\n    /**\n     * Navigates to a slide with the specified identifier.\n     */\n    select(slideId: string): void;\n    /**\n     * Navigates to the previous slide.\n     */\n    prev(): void;\n    /**\n     * Navigates to the next slide.\n     */\n    next(): void;\n    /**\n     * Pauses cycling through the slides.\n     */\n    pause(): void;\n    /**\n     * Restarts cycling through the slides from left to right.\n     */\n    cycle(): void;\n    private _cycleToSelected;\n    private _getSlideEventDirection;\n    private _getSlideById;\n    private _getSlideIdxById;\n    private _getNextSlide;\n    private _getPrevSlide;\n}\n/**\n * A slide change event emitted right after the slide transition is completed.\n */\nexport interface NgbSlideEvent {\n    /**\n     * The previous slide id.\n     */\n    prev: string;\n    /**\n     * The current slide id.\n     */\n    current: string;\n    /**\n     * The slide event direction.\n     *\n     * Possible values are `'left' | 'right'`.\n     */\n    direction: NgbSlideEventDirection;\n}\n/**\n * Defines the carousel slide transition direction.\n */\nexport declare enum NgbSlideEventDirection {\n    LEFT,\n    RIGHT\n}\nexport declare const NGB_CAROUSEL_DIRECTIVES: (typeof NgbSlide | typeof NgbCarousel)[];\n"]}